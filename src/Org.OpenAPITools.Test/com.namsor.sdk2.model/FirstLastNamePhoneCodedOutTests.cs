/* 
 * NamSor API v2
 *
 * NamSor API v2 : enpoints to process personal names (gender, cultural origin or ethnicity) in all alphabets or languages. Use GET methods for small tests, but prefer POST methods for higher throughput (batch processing of up to 100 names at a time). Need something you can't find here? We have many more features coming soon. Let us know, we'll do our best to add it! 
 *
 * OpenAPI spec version: 2.0.11
 * Contact: contact@namsor.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using NUnit.Framework;

using System;
using System.Linq;
using System.IO;
using System.Collections.Generic;
using Org.OpenAPITools.com.namsor.sdk2.api;
using Org.OpenAPITools.com.namsor.sdk2.model;
using Org.OpenAPITools.Client;
using System.Reflection;
using Newtonsoft.Json;

namespace Org.OpenAPITools.Test
{
    /// <summary>
    ///  Class for testing FirstLastNamePhoneCodedOut
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the model.
    /// </remarks>
    [TestFixture]
    public class FirstLastNamePhoneCodedOutTests
    {
        // TODO uncomment below to declare an instance variable for FirstLastNamePhoneCodedOut
        //private FirstLastNamePhoneCodedOut instance;

        /// <summary>
        /// Setup before each test
        /// </summary>
        [SetUp]
        public void Init()
        {
            // TODO uncomment below to create an instance of FirstLastNamePhoneCodedOut
            //instance = new FirstLastNamePhoneCodedOut();
        }

        /// <summary>
        /// Clean up after each test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of FirstLastNamePhoneCodedOut
        /// </summary>
        [Test]
        public void FirstLastNamePhoneCodedOutInstanceTest()
        {
            // TODO uncomment below to test "IsInstanceOfType" FirstLastNamePhoneCodedOut
            //Assert.IsInstanceOfType<FirstLastNamePhoneCodedOut> (instance, "variable 'instance' is a FirstLastNamePhoneCodedOut");
        }


        /// <summary>
        /// Test the property 'Id'
        /// </summary>
        [Test]
        public void IdTest()
        {
            // TODO unit test for the property 'Id'
        }
        /// <summary>
        /// Test the property 'FirstName'
        /// </summary>
        [Test]
        public void FirstNameTest()
        {
            // TODO unit test for the property 'FirstName'
        }
        /// <summary>
        /// Test the property 'LastName'
        /// </summary>
        [Test]
        public void LastNameTest()
        {
            // TODO unit test for the property 'LastName'
        }
        /// <summary>
        /// Test the property 'InternationalPhoneNumberVerified'
        /// </summary>
        [Test]
        public void InternationalPhoneNumberVerifiedTest()
        {
            // TODO unit test for the property 'InternationalPhoneNumberVerified'
        }
        /// <summary>
        /// Test the property 'PhoneCountryIso2Verified'
        /// </summary>
        [Test]
        public void PhoneCountryIso2VerifiedTest()
        {
            // TODO unit test for the property 'PhoneCountryIso2Verified'
        }
        /// <summary>
        /// Test the property 'PhoneCountryCode'
        /// </summary>
        [Test]
        public void PhoneCountryCodeTest()
        {
            // TODO unit test for the property 'PhoneCountryCode'
        }
        /// <summary>
        /// Test the property 'PhoneCountryCodeAlt'
        /// </summary>
        [Test]
        public void PhoneCountryCodeAltTest()
        {
            // TODO unit test for the property 'PhoneCountryCodeAlt'
        }
        /// <summary>
        /// Test the property 'PhoneCountryIso2'
        /// </summary>
        [Test]
        public void PhoneCountryIso2Test()
        {
            // TODO unit test for the property 'PhoneCountryIso2'
        }
        /// <summary>
        /// Test the property 'PhoneCountryIso2Alt'
        /// </summary>
        [Test]
        public void PhoneCountryIso2AltTest()
        {
            // TODO unit test for the property 'PhoneCountryIso2Alt'
        }
        /// <summary>
        /// Test the property 'OriginCountryIso2'
        /// </summary>
        [Test]
        public void OriginCountryIso2Test()
        {
            // TODO unit test for the property 'OriginCountryIso2'
        }
        /// <summary>
        /// Test the property 'OriginCountryIso2Alt'
        /// </summary>
        [Test]
        public void OriginCountryIso2AltTest()
        {
            // TODO unit test for the property 'OriginCountryIso2Alt'
        }
        /// <summary>
        /// Test the property 'PhoneNumber'
        /// </summary>
        [Test]
        public void PhoneNumberTest()
        {
            // TODO unit test for the property 'PhoneNumber'
        }
        /// <summary>
        /// Test the property 'Verified'
        /// </summary>
        [Test]
        public void VerifiedTest()
        {
            // TODO unit test for the property 'Verified'
        }
        /// <summary>
        /// Test the property 'Score'
        /// </summary>
        [Test]
        public void ScoreTest()
        {
            // TODO unit test for the property 'Score'
        }
        /// <summary>
        /// Test the property 'CountryIso2'
        /// </summary>
        [Test]
        public void CountryIso2Test()
        {
            // TODO unit test for the property 'CountryIso2'
        }

    }

}
