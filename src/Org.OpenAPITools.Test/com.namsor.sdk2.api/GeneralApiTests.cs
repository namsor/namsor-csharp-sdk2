/* 
 * NamSor API v2
 *
 * NamSor API v2 : enpoints to process personal names (gender, cultural origin or ethnicity) in all alphabets or languages. Use GET methods for small tests, but prefer POST methods for higher throughput (batch processing of up to 100 names at a time). Need something you can't find here? We have many more features coming soon. Let us know, we'll do our best to add it! 
 *
 * OpenAPI spec version: 2.0.11
 * Contact: contact@namsor.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using Org.OpenAPITools.Client;
using Org.OpenAPITools.com.namsor.sdk2.api;
using Org.OpenAPITools.com.namsor.sdk2.model;

namespace Org.OpenAPITools.Test
{
    /// <summary>
    ///  Class for testing GeneralApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class GeneralApiTests
    {
        private GeneralApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new GeneralApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of GeneralApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' GeneralApi
            //Assert.IsInstanceOfType(typeof(GeneralApi), instance, "instance is a GeneralApi");
        }

        
        /// <summary>
        /// Test NameType
        /// </summary>
        [Test]
        public void NameTypeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string properNoun = null;
            //var response = instance.NameType(properNoun);
            //Assert.IsInstanceOf<ProperNounCategorizedOut> (response, "response is ProperNounCategorizedOut");
        }
        
        /// <summary>
        /// Test NameType1
        /// </summary>
        [Test]
        public void NameType1Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string properNoun = null;
            //string countryIso2 = null;
            //var response = instance.NameType1(properNoun, countryIso2);
            //Assert.IsInstanceOf<ProperNounCategorizedOut> (response, "response is ProperNounCategorizedOut");
        }
        
    }

}
