/* 
 * NamSor API v2
 *
 * NamSor API v2 : enpoints to process personal names (gender, cultural origin or ethnicity) in all alphabets or languages. Use GET methods for small tests, but prefer POST methods for higher throughput (batch processing of up to 100 names at a time). Need something you can't find here? We have many more features coming soon. Let us know, we'll do our best to add it! 
 *
 * OpenAPI spec version: 2.0.9
 * Contact: contact@namsor.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using Org.OpenAPITools.Client;
using Org.OpenAPITools.com.namsor.sdk2.api;
using Org.OpenAPITools.com.namsor.sdk2.model;

namespace Org.OpenAPITools.Test
{
    /// <summary>
    ///  Class for testing PersonalApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class PersonalApiTests
    {
        private PersonalApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new PersonalApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of PersonalApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' PersonalApi
            //Assert.IsInstanceOfType(typeof(PersonalApi), instance, "instance is a PersonalApi");
        }

        
        /// <summary>
        /// Test Country
        /// </summary>
        [Test]
        public void CountryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string personalNameFull = null;
            //var response = instance.Country(personalNameFull);
            //Assert.IsInstanceOf<PersonalNameGeoOut> (response, "response is PersonalNameGeoOut");
        }
        
        /// <summary>
        /// Test CountryBatch
        /// </summary>
        [Test]
        public void CountryBatchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //BatchPersonalNameIn batchPersonalNameIn = null;
            //var response = instance.CountryBatch(batchPersonalNameIn);
            //Assert.IsInstanceOf<BatchPersonalNameGeoOut> (response, "response is BatchPersonalNameGeoOut");
        }
        
        /// <summary>
        /// Test Diaspora
        /// </summary>
        [Test]
        public void DiasporaTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string countryIso2 = null;
            //string firstName = null;
            //string lastName = null;
            //var response = instance.Diaspora(countryIso2, firstName, lastName);
            //Assert.IsInstanceOf<FirstLastNameDiasporaedOut> (response, "response is FirstLastNameDiasporaedOut");
        }
        
        /// <summary>
        /// Test DiasporaBatch
        /// </summary>
        [Test]
        public void DiasporaBatchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //BatchFirstLastNameGeoIn batchFirstLastNameGeoIn = null;
            //var response = instance.DiasporaBatch(batchFirstLastNameGeoIn);
            //Assert.IsInstanceOf<BatchFirstLastNameDiasporaedOut> (response, "response is BatchFirstLastNameDiasporaedOut");
        }
        
        /// <summary>
        /// Test Gender
        /// </summary>
        [Test]
        public void GenderTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string firstName = null;
            //string lastName = null;
            //var response = instance.Gender(firstName, lastName);
            //Assert.IsInstanceOf<FirstLastNameGenderedOut> (response, "response is FirstLastNameGenderedOut");
        }
        
        /// <summary>
        /// Test GenderBatch
        /// </summary>
        [Test]
        public void GenderBatchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //BatchFirstLastNameIn batchFirstLastNameIn = null;
            //var response = instance.GenderBatch(batchFirstLastNameIn);
            //Assert.IsInstanceOf<BatchFirstLastNameGenderedOut> (response, "response is BatchFirstLastNameGenderedOut");
        }
        
        /// <summary>
        /// Test GenderFull
        /// </summary>
        [Test]
        public void GenderFullTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string fullName = null;
            //var response = instance.GenderFull(fullName);
            //Assert.IsInstanceOf<PersonalNameGenderedOut> (response, "response is PersonalNameGenderedOut");
        }
        
        /// <summary>
        /// Test GenderFullBatch
        /// </summary>
        [Test]
        public void GenderFullBatchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //BatchPersonalNameIn batchPersonalNameIn = null;
            //var response = instance.GenderFullBatch(batchPersonalNameIn);
            //Assert.IsInstanceOf<BatchPersonalNameGenderedOut> (response, "response is BatchPersonalNameGenderedOut");
        }
        
        /// <summary>
        /// Test GenderFullGeo
        /// </summary>
        [Test]
        public void GenderFullGeoTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string fullName = null;
            //string countryIso2 = null;
            //var response = instance.GenderFullGeo(fullName, countryIso2);
            //Assert.IsInstanceOf<PersonalNameGenderedOut> (response, "response is PersonalNameGenderedOut");
        }
        
        /// <summary>
        /// Test GenderFullGeoBatch
        /// </summary>
        [Test]
        public void GenderFullGeoBatchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //BatchPersonalNameGeoIn batchPersonalNameGeoIn = null;
            //var response = instance.GenderFullGeoBatch(batchPersonalNameGeoIn);
            //Assert.IsInstanceOf<BatchPersonalNameGenderedOut> (response, "response is BatchPersonalNameGenderedOut");
        }
        
        /// <summary>
        /// Test GenderGeo
        /// </summary>
        [Test]
        public void GenderGeoTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string firstName = null;
            //string lastName = null;
            //string countryIso2 = null;
            //var response = instance.GenderGeo(firstName, lastName, countryIso2);
            //Assert.IsInstanceOf<FirstLastNameGenderedOut> (response, "response is FirstLastNameGenderedOut");
        }
        
        /// <summary>
        /// Test GenderGeoBatch
        /// </summary>
        [Test]
        public void GenderGeoBatchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //BatchFirstLastNameGeoIn batchFirstLastNameGeoIn = null;
            //var response = instance.GenderGeoBatch(batchFirstLastNameGeoIn);
            //Assert.IsInstanceOf<BatchFirstLastNameGenderedOut> (response, "response is BatchFirstLastNameGenderedOut");
        }
        
        /// <summary>
        /// Test Origin
        /// </summary>
        [Test]
        public void OriginTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string firstName = null;
            //string lastName = null;
            //var response = instance.Origin(firstName, lastName);
            //Assert.IsInstanceOf<FirstLastNameOriginedOut> (response, "response is FirstLastNameOriginedOut");
        }
        
        /// <summary>
        /// Test OriginBatch
        /// </summary>
        [Test]
        public void OriginBatchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //BatchFirstLastNameIn batchFirstLastNameIn = null;
            //var response = instance.OriginBatch(batchFirstLastNameIn);
            //Assert.IsInstanceOf<BatchFirstLastNameOriginedOut> (response, "response is BatchFirstLastNameOriginedOut");
        }
        
        /// <summary>
        /// Test ParseName
        /// </summary>
        [Test]
        public void ParseNameTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string nameFull = null;
            //var response = instance.ParseName(nameFull);
            //Assert.IsInstanceOf<PersonalNameParsedOut> (response, "response is PersonalNameParsedOut");
        }
        
        /// <summary>
        /// Test ParseNameBatch
        /// </summary>
        [Test]
        public void ParseNameBatchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //BatchPersonalNameIn batchPersonalNameIn = null;
            //var response = instance.ParseNameBatch(batchPersonalNameIn);
            //Assert.IsInstanceOf<BatchPersonalNameParsedOut> (response, "response is BatchPersonalNameParsedOut");
        }
        
        /// <summary>
        /// Test ParseNameGeo
        /// </summary>
        [Test]
        public void ParseNameGeoTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string nameFull = null;
            //string countryIso2 = null;
            //var response = instance.ParseNameGeo(nameFull, countryIso2);
            //Assert.IsInstanceOf<PersonalNameParsedOut> (response, "response is PersonalNameParsedOut");
        }
        
        /// <summary>
        /// Test ParseNameGeoBatch
        /// </summary>
        [Test]
        public void ParseNameGeoBatchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //BatchPersonalNameGeoIn batchPersonalNameGeoIn = null;
            //var response = instance.ParseNameGeoBatch(batchPersonalNameGeoIn);
            //Assert.IsInstanceOf<BatchPersonalNameParsedOut> (response, "response is BatchPersonalNameParsedOut");
        }
        
        /// <summary>
        /// Test ParsedGenderBatch
        /// </summary>
        [Test]
        public void ParsedGenderBatchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //BatchParsedFullNameIn batchParsedFullNameIn = null;
            //var response = instance.ParsedGenderBatch(batchParsedFullNameIn);
            //Assert.IsInstanceOf<BatchFirstLastNameGenderedOut> (response, "response is BatchFirstLastNameGenderedOut");
        }
        
        /// <summary>
        /// Test ParsedGenderGeoBatch
        /// </summary>
        [Test]
        public void ParsedGenderGeoBatchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //BatchParsedFullNameGeoIn batchParsedFullNameGeoIn = null;
            //var response = instance.ParsedGenderGeoBatch(batchParsedFullNameGeoIn);
            //Assert.IsInstanceOf<BatchFirstLastNameGenderedOut> (response, "response is BatchFirstLastNameGenderedOut");
        }
        
        /// <summary>
        /// Test UsRaceEthnicity
        /// </summary>
        [Test]
        public void UsRaceEthnicityTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string firstName = null;
            //string lastName = null;
            //var response = instance.UsRaceEthnicity(firstName, lastName);
            //Assert.IsInstanceOf<FirstLastNameUSRaceEthnicityOut> (response, "response is FirstLastNameUSRaceEthnicityOut");
        }
        
        /// <summary>
        /// Test UsRaceEthnicityBatch
        /// </summary>
        [Test]
        public void UsRaceEthnicityBatchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //BatchFirstLastNameGeoIn batchFirstLastNameGeoIn = null;
            //var response = instance.UsRaceEthnicityBatch(batchFirstLastNameGeoIn);
            //Assert.IsInstanceOf<BatchFirstLastNameUSRaceEthnicityOut> (response, "response is BatchFirstLastNameUSRaceEthnicityOut");
        }
        
        /// <summary>
        /// Test UsRaceEthnicityZIP5
        /// </summary>
        [Test]
        public void UsRaceEthnicityZIP5Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string firstName = null;
            //string lastName = null;
            //string zip5Code = null;
            //var response = instance.UsRaceEthnicityZIP5(firstName, lastName, zip5Code);
            //Assert.IsInstanceOf<FirstLastNameUSRaceEthnicityOut> (response, "response is FirstLastNameUSRaceEthnicityOut");
        }
        
        /// <summary>
        /// Test UsZipRaceEthnicityBatch
        /// </summary>
        [Test]
        public void UsZipRaceEthnicityBatchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //BatchFirstLastNameGeoZippedIn batchFirstLastNameGeoZippedIn = null;
            //var response = instance.UsZipRaceEthnicityBatch(batchFirstLastNameGeoZippedIn);
            //Assert.IsInstanceOf<BatchFirstLastNameUSRaceEthnicityOut> (response, "response is BatchFirstLastNameUSRaceEthnicityOut");
        }
        
    }

}
