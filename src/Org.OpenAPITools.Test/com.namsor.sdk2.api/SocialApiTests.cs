/* 
 * NamSor API v2
 *
 * NamSor API v2 : enpoints to process personal names (gender, cultural origin or ethnicity) in all alphabets or languages. Use GET methods for small tests, but prefer POST methods for higher throughput (batch processing of up to 100 names at a time). Need something you can't find here? We have many more features coming soon. Let us know, we'll do our best to add it! 
 *
 * OpenAPI spec version: 2.0.11
 * Contact: contact@namsor.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using Org.OpenAPITools.Client;
using Org.OpenAPITools.com.namsor.sdk2.api;
using Org.OpenAPITools.com.namsor.sdk2.model;

namespace Org.OpenAPITools.Test
{
    /// <summary>
    ///  Class for testing SocialApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class SocialApiTests
    {
        private SocialApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new SocialApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of SocialApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' SocialApi
            //Assert.IsInstanceOfType(typeof(SocialApi), instance, "instance is a SocialApi");
        }

        
        /// <summary>
        /// Test PhoneCode
        /// </summary>
        [Test]
        public void PhoneCodeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string firstName = null;
            //string lastName = null;
            //string phoneNumber = null;
            //var response = instance.PhoneCode(firstName, lastName, phoneNumber);
            //Assert.IsInstanceOf<FirstLastNamePhoneCodedOut> (response, "response is FirstLastNamePhoneCodedOut");
        }
        
        /// <summary>
        /// Test PhoneCodeBatch
        /// </summary>
        [Test]
        public void PhoneCodeBatchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //BatchFirstLastNamePhoneNumberIn batchFirstLastNamePhoneNumberIn = null;
            //var response = instance.PhoneCodeBatch(batchFirstLastNamePhoneNumberIn);
            //Assert.IsInstanceOf<BatchFirstLastNamePhoneCodedOut> (response, "response is BatchFirstLastNamePhoneCodedOut");
        }
        
        /// <summary>
        /// Test PhoneCodeGeo
        /// </summary>
        [Test]
        public void PhoneCodeGeoTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string firstName = null;
            //string lastName = null;
            //string phoneNumber = null;
            //string countryIso2 = null;
            //var response = instance.PhoneCodeGeo(firstName, lastName, phoneNumber, countryIso2);
            //Assert.IsInstanceOf<FirstLastNamePhoneCodedOut> (response, "response is FirstLastNamePhoneCodedOut");
        }
        
        /// <summary>
        /// Test PhoneCodeGeoBatch
        /// </summary>
        [Test]
        public void PhoneCodeGeoBatchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //BatchFirstLastNamePhoneNumberGeoIn batchFirstLastNamePhoneNumberGeoIn = null;
            //var response = instance.PhoneCodeGeoBatch(batchFirstLastNamePhoneNumberGeoIn);
            //Assert.IsInstanceOf<BatchFirstLastNamePhoneCodedOut> (response, "response is BatchFirstLastNamePhoneCodedOut");
        }
        
        /// <summary>
        /// Test PhoneCodeGeoFeedbackLoop
        /// </summary>
        [Test]
        public void PhoneCodeGeoFeedbackLoopTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string firstName = null;
            //string lastName = null;
            //string phoneNumber = null;
            //string phoneNumberE164 = null;
            //string countryIso2 = null;
            //var response = instance.PhoneCodeGeoFeedbackLoop(firstName, lastName, phoneNumber, phoneNumberE164, countryIso2);
            //Assert.IsInstanceOf<FirstLastNamePhoneCodedOut> (response, "response is FirstLastNamePhoneCodedOut");
        }
        
    }

}
