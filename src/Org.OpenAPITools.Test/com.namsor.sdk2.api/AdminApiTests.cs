/* 
 * NamSor API v2
 *
 * NamSor API v2 : enpoints to process personal names (gender, cultural origin or ethnicity) in all alphabets or languages. Use GET methods for small tests, but prefer POST methods for higher throughput (batch processing of up to 100 names at a time). Need something you can't find here? We have many more features coming soon. Let us know, we'll do our best to add it! 
 *
 * OpenAPI spec version: 2.0.10
 * Contact: contact@namsor.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using Org.OpenAPITools.Client;
using Org.OpenAPITools.com.namsor.sdk2.api;
using Org.OpenAPITools.com.namsor.sdk2.model;

namespace Org.OpenAPITools.Test
{
    /// <summary>
    ///  Class for testing AdminApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class AdminApiTests
    {
        private AdminApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new AdminApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of AdminApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' AdminApi
            //Assert.IsInstanceOfType(typeof(AdminApi), instance, "instance is a AdminApi");
        }

        
        /// <summary>
        /// Test AddCredits
        /// </summary>
        [Test]
        public void AddCreditsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string apiKey = null;
            //long? usageCredits = null;
            //string userMessage = null;
            //var response = instance.AddCredits(apiKey, usageCredits, userMessage);
            //Assert.IsInstanceOf<SystemMetricsOut> (response, "response is SystemMetricsOut");
        }
        
        /// <summary>
        /// Test Anonymize
        /// </summary>
        [Test]
        public void AnonymizeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string source = null;
            //bool? anonymized = null;
            //instance.Anonymize(source, anonymized);
            
        }
        
        /// <summary>
        /// Test ApiStatus
        /// </summary>
        [Test]
        public void ApiStatusTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.ApiStatus();
            //Assert.IsInstanceOf<APIPlansOut> (response, "response is APIPlansOut");
        }
        
        /// <summary>
        /// Test ApiUsage
        /// </summary>
        [Test]
        public void ApiUsageTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.ApiUsage();
            //Assert.IsInstanceOf<APIPeriodUsageOut> (response, "response is APIPeriodUsageOut");
        }
        
        /// <summary>
        /// Test ApiUsageHistory
        /// </summary>
        [Test]
        public void ApiUsageHistoryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.ApiUsageHistory();
            //Assert.IsInstanceOf<APIPeriodUsageOut> (response, "response is APIPeriodUsageOut");
        }
        
        /// <summary>
        /// Test ApiUsageHistoryAggregate
        /// </summary>
        [Test]
        public void ApiUsageHistoryAggregateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.ApiUsageHistoryAggregate();
            //Assert.IsInstanceOf<APIPeriodUsageOut> (response, "response is APIPeriodUsageOut");
        }
        
        /// <summary>
        /// Test AvailablePlans
        /// </summary>
        [Test]
        public void AvailablePlansTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.AvailablePlans();
            //Assert.IsInstanceOf<APIPlansOut> (response, "response is APIPlansOut");
        }
        
        /// <summary>
        /// Test AvailablePlans1
        /// </summary>
        [Test]
        public void AvailablePlans1Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string token = null;
            //var response = instance.AvailablePlans1(token);
            //Assert.IsInstanceOf<APIPlansOut> (response, "response is APIPlansOut");
        }
        
        /// <summary>
        /// Test AvailableServices
        /// </summary>
        [Test]
        public void AvailableServicesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.AvailableServices();
            //Assert.IsInstanceOf<APIPlansOut> (response, "response is APIPlansOut");
        }
        
        /// <summary>
        /// Test BillingCurrencies
        /// </summary>
        [Test]
        public void BillingCurrenciesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.BillingCurrencies();
            //Assert.IsInstanceOf<CurrenciesOut> (response, "response is CurrenciesOut");
        }
        
        /// <summary>
        /// Test BillingHistory
        /// </summary>
        [Test]
        public void BillingHistoryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string token = null;
            //var response = instance.BillingHistory(token);
            //Assert.IsInstanceOf<BillingHistoryOut> (response, "response is BillingHistoryOut");
        }
        
        /// <summary>
        /// Test BillingInfo
        /// </summary>
        [Test]
        public void BillingInfoTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string token = null;
            //var response = instance.BillingInfo(token);
            //Assert.IsInstanceOf<BillingInfoInOut> (response, "response is BillingInfoInOut");
        }
        
        /// <summary>
        /// Test Charge
        /// </summary>
        [Test]
        public void ChargeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //InlineObject inlineObject = null;
            //var response = instance.Charge(inlineObject);
            //Assert.IsInstanceOf<APIKeyOut> (response, "response is APIKeyOut");
        }
        
        /// <summary>
        /// Test CorporateKey
        /// </summary>
        [Test]
        public void CorporateKeyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string apiKey = null;
            //bool? corporate = null;
            //instance.CorporateKey(apiKey, corporate);
            
        }
        
        /// <summary>
        /// Test DebugLevel
        /// </summary>
        [Test]
        public void DebugLevelTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string logger = null;
            //string level = null;
            //instance.DebugLevel(logger, level);
            
        }
        
        /// <summary>
        /// Test Flush
        /// </summary>
        [Test]
        public void FlushTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //instance.Flush();
            
        }
        
        /// <summary>
        /// Test InvalidateCache
        /// </summary>
        [Test]
        public void InvalidateCacheTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //instance.InvalidateCache();
            
        }
        
        /// <summary>
        /// Test Learnable
        /// </summary>
        [Test]
        public void LearnableTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string source = null;
            //bool? learnable = null;
            //instance.Learnable(source, learnable);
            
        }
        
        /// <summary>
        /// Test NamsorCounter
        /// </summary>
        [Test]
        public void NamsorCounterTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.NamsorCounter();
            //Assert.IsInstanceOf<SoftwareVersionOut> (response, "response is SoftwareVersionOut");
        }
        
        /// <summary>
        /// Test PaymentInfo
        /// </summary>
        [Test]
        public void PaymentInfoTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string token = null;
            //var response = instance.PaymentInfo(token);
            //Assert.IsInstanceOf<APIKeyOut> (response, "response is APIKeyOut");
        }
        
        /// <summary>
        /// Test ProcureKey
        /// </summary>
        [Test]
        public void ProcureKeyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string token = null;
            //var response = instance.ProcureKey(token);
            //Assert.IsInstanceOf<APIKeyOut> (response, "response is APIKeyOut");
        }
        
        /// <summary>
        /// Test RedeployUI
        /// </summary>
        [Test]
        public void RedeployUITest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //instance.RedeployUI();
            
        }
        
        /// <summary>
        /// Test RedeployUI1
        /// </summary>
        [Test]
        public void RedeployUI1Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? live = null;
            //instance.RedeployUI1(live);
            
        }
        
        /// <summary>
        /// Test RemoveUserAccount
        /// </summary>
        [Test]
        public void RemoveUserAccountTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string token = null;
            //var response = instance.RemoveUserAccount(token);
            //Assert.IsInstanceOf<APIPlanSubscriptionOut> (response, "response is APIPlanSubscriptionOut");
        }
        
        /// <summary>
        /// Test RemoveUserAccountOnBehalf
        /// </summary>
        [Test]
        public void RemoveUserAccountOnBehalfTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string apiKey = null;
            //var response = instance.RemoveUserAccountOnBehalf(apiKey);
            //Assert.IsInstanceOf<APIPlanSubscriptionOut> (response, "response is APIPlanSubscriptionOut");
        }
        
        /// <summary>
        /// Test Shutdown
        /// </summary>
        [Test]
        public void ShutdownTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //instance.Shutdown();
            
        }
        
        /// <summary>
        /// Test SoftwareVersion
        /// </summary>
        [Test]
        public void SoftwareVersionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.SoftwareVersion();
            //Assert.IsInstanceOf<SoftwareVersionOut> (response, "response is SoftwareVersionOut");
        }
        
        /// <summary>
        /// Test SourceStats
        /// </summary>
        [Test]
        public void SourceStatsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string source = null;
            //var response = instance.SourceStats(source);
            //Assert.IsInstanceOf<SystemMetricsOut> (response, "response is SystemMetricsOut");
        }
        
        /// <summary>
        /// Test Stats
        /// </summary>
        [Test]
        public void StatsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.Stats();
            //Assert.IsInstanceOf<SystemMetricsOut> (response, "response is SystemMetricsOut");
        }
        
        /// <summary>
        /// Test StripeConnect
        /// </summary>
        [Test]
        public void StripeConnectTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string scope = null;
            //string code = null;
            //string error = null;
            //string errorDescription = null;
            //instance.StripeConnect(scope, code, error, errorDescription);
            
        }
        
        /// <summary>
        /// Test SubscribePlan
        /// </summary>
        [Test]
        public void SubscribePlanTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string planName = null;
            //string token = null;
            //var response = instance.SubscribePlan(planName, token);
            //Assert.IsInstanceOf<APIPlanSubscriptionOut> (response, "response is APIPlanSubscriptionOut");
        }
        
        /// <summary>
        /// Test SubscribePlanOnBehalf
        /// </summary>
        [Test]
        public void SubscribePlanOnBehalfTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string planName = null;
            //string apiKey = null;
            //var response = instance.SubscribePlanOnBehalf(planName, apiKey);
            //Assert.IsInstanceOf<APIPlanSubscriptionOut> (response, "response is APIPlanSubscriptionOut");
        }
        
        /// <summary>
        /// Test TaxonomyClasses
        /// </summary>
        [Test]
        public void TaxonomyClassesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string classifierName = null;
            //var response = instance.TaxonomyClasses(classifierName);
            //Assert.IsInstanceOf<APIPlansOut> (response, "response is APIPlansOut");
        }
        
        /// <summary>
        /// Test UpdateBillingInfo
        /// </summary>
        [Test]
        public void UpdateBillingInfoTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string token = null;
            //BillingInfoInOut billingInfoInOut = null;
            //var response = instance.UpdateBillingInfo(token, billingInfoInOut);
            //Assert.IsInstanceOf<BillingInfoInOut> (response, "response is BillingInfoInOut");
        }
        
        /// <summary>
        /// Test UpdateLimit
        /// </summary>
        [Test]
        public void UpdateLimitTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? usageLimit = null;
            //bool? hardOrSoft = null;
            //string token = null;
            //var response = instance.UpdateLimit(usageLimit, hardOrSoft, token);
            //Assert.IsInstanceOf<APIPeriodUsageOut> (response, "response is APIPeriodUsageOut");
        }
        
        /// <summary>
        /// Test UpdatePaymentDefault
        /// </summary>
        [Test]
        public void UpdatePaymentDefaultTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string defautSourceId = null;
            //string token = null;
            //var response = instance.UpdatePaymentDefault(defautSourceId, token);
            //Assert.IsInstanceOf<APIKeyOut> (response, "response is APIKeyOut");
        }
        
        /// <summary>
        /// Test UserInfo
        /// </summary>
        [Test]
        public void UserInfoTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string token = null;
            //var response = instance.UserInfo(token);
            //Assert.IsInstanceOf<APIKeyOut> (response, "response is APIKeyOut");
        }
        
        /// <summary>
        /// Test VerifyEmail
        /// </summary>
        [Test]
        public void VerifyEmailTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string emailToken = null;
            //var response = instance.VerifyEmail(emailToken);
            //Assert.IsInstanceOf<APIKeyOut> (response, "response is APIKeyOut");
        }
        
        /// <summary>
        /// Test VerifyRemoveEmail
        /// </summary>
        [Test]
        public void VerifyRemoveEmailTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string emailToken = null;
            //var response = instance.VerifyRemoveEmail(emailToken);
            //Assert.IsInstanceOf<APIKeyOut> (response, "response is APIKeyOut");
        }
        
        /// <summary>
        /// Test Vet
        /// </summary>
        [Test]
        public void VetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string source = null;
            //bool? vetted = null;
            //instance.Vet(source, vetted);
            
        }
        
    }

}
