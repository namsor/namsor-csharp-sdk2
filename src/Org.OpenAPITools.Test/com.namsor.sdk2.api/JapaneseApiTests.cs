/* 
 * NamSor API v2
 *
 * NamSor API v2 : enpoints to process personal names (gender, cultural origin or ethnicity) in all alphabets or languages. Use GET methods for small tests, but prefer POST methods for higher throughput (batch processing of up to 100 names at a time). Need something you can't find here? We have many more features coming soon. Let us know, we'll do our best to add it! 
 *
 * OpenAPI spec version: 2.0.11
 * Contact: contact@namsor.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using Org.OpenAPITools.Client;
using Org.OpenAPITools.com.namsor.sdk2.api;
using Org.OpenAPITools.com.namsor.sdk2.model;

namespace Org.OpenAPITools.Test
{
    /// <summary>
    ///  Class for testing JapaneseApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class JapaneseApiTests
    {
        private JapaneseApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new JapaneseApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of JapaneseApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' JapaneseApi
            //Assert.IsInstanceOfType(typeof(JapaneseApi), instance, "instance is a JapaneseApi");
        }

        
        /// <summary>
        /// Test GenderJapaneseNameFull
        /// </summary>
        [Test]
        public void GenderJapaneseNameFullTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string japaneseName = null;
            //var response = instance.GenderJapaneseNameFull(japaneseName);
            //Assert.IsInstanceOf<PersonalNameGenderedOut> (response, "response is PersonalNameGenderedOut");
        }
        
        /// <summary>
        /// Test GenderJapaneseNameFullBatch
        /// </summary>
        [Test]
        public void GenderJapaneseNameFullBatchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //BatchPersonalNameIn batchPersonalNameIn = null;
            //var response = instance.GenderJapaneseNameFullBatch(batchPersonalNameIn);
            //Assert.IsInstanceOf<BatchPersonalNameGenderedOut> (response, "response is BatchPersonalNameGenderedOut");
        }
        
        /// <summary>
        /// Test GenderJapaneseNamePinyin
        /// </summary>
        [Test]
        public void GenderJapaneseNamePinyinTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string japaneseSurname = null;
            //string japaneseGivenName = null;
            //var response = instance.GenderJapaneseNamePinyin(japaneseSurname, japaneseGivenName);
            //Assert.IsInstanceOf<FirstLastNameGenderedOut> (response, "response is FirstLastNameGenderedOut");
        }
        
        /// <summary>
        /// Test GenderJapaneseNamePinyinBatch
        /// </summary>
        [Test]
        public void GenderJapaneseNamePinyinBatchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //BatchFirstLastNameIn batchFirstLastNameIn = null;
            //var response = instance.GenderJapaneseNamePinyinBatch(batchFirstLastNameIn);
            //Assert.IsInstanceOf<BatchFirstLastNameGenderedOut> (response, "response is BatchFirstLastNameGenderedOut");
        }
        
        /// <summary>
        /// Test JapaneseNameKanjiCandidates
        /// </summary>
        [Test]
        public void JapaneseNameKanjiCandidatesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string japaneseSurnameLatin = null;
            //string japaneseGivenNameLatin = null;
            //var response = instance.JapaneseNameKanjiCandidates(japaneseSurnameLatin, japaneseGivenNameLatin);
            //Assert.IsInstanceOf<RomanizedNameOut> (response, "response is RomanizedNameOut");
        }
        
        /// <summary>
        /// Test JapaneseNameKanjiCandidatesBatch
        /// </summary>
        [Test]
        public void JapaneseNameKanjiCandidatesBatchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //BatchFirstLastNameIn batchFirstLastNameIn = null;
            //var response = instance.JapaneseNameKanjiCandidatesBatch(batchFirstLastNameIn);
            //Assert.IsInstanceOf<BatchNameMatchCandidatesOut> (response, "response is BatchNameMatchCandidatesOut");
        }
        
        /// <summary>
        /// Test JapaneseNameLatinCandidates
        /// </summary>
        [Test]
        public void JapaneseNameLatinCandidatesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string japaneseSurnameKanji = null;
            //string japaneseGivenNameKanji = null;
            //var response = instance.JapaneseNameLatinCandidates(japaneseSurnameKanji, japaneseGivenNameKanji);
            //Assert.IsInstanceOf<RomanizedNameOut> (response, "response is RomanizedNameOut");
        }
        
        /// <summary>
        /// Test JapaneseNameLatinCandidatesBatch
        /// </summary>
        [Test]
        public void JapaneseNameLatinCandidatesBatchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //BatchFirstLastNameIn batchFirstLastNameIn = null;
            //var response = instance.JapaneseNameLatinCandidatesBatch(batchFirstLastNameIn);
            //Assert.IsInstanceOf<BatchNameMatchCandidatesOut> (response, "response is BatchNameMatchCandidatesOut");
        }
        
        /// <summary>
        /// Test JapaneseNameMatch
        /// </summary>
        [Test]
        public void JapaneseNameMatchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string japaneseSurnameLatin = null;
            //string japaneseGivenNameLatin = null;
            //string japaneseName = null;
            //var response = instance.JapaneseNameMatch(japaneseSurnameLatin, japaneseGivenNameLatin, japaneseName);
            //Assert.IsInstanceOf<RomanizedNameOut> (response, "response is RomanizedNameOut");
        }
        
        /// <summary>
        /// Test JapaneseNameMatchBatch
        /// </summary>
        [Test]
        public void JapaneseNameMatchBatchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //BatchFirstLastNameIn batchFirstLastNameIn = null;
            //var response = instance.JapaneseNameMatchBatch(batchFirstLastNameIn);
            //Assert.IsInstanceOf<BatchNameMatchCandidatesOut> (response, "response is BatchNameMatchCandidatesOut");
        }
        
        /// <summary>
        /// Test JapaneseNameMatchFeedbackLoop
        /// </summary>
        [Test]
        public void JapaneseNameMatchFeedbackLoopTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string japaneseSurnameLatin = null;
            //string japaneseGivenNameLatin = null;
            //string japaneseName = null;
            //var response = instance.JapaneseNameMatchFeedbackLoop(japaneseSurnameLatin, japaneseGivenNameLatin, japaneseName);
            //Assert.IsInstanceOf<RomanizedNameOut> (response, "response is RomanizedNameOut");
        }
        
        /// <summary>
        /// Test ParseJapaneseName
        /// </summary>
        [Test]
        public void ParseJapaneseNameTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string japaneseName = null;
            //var response = instance.ParseJapaneseName(japaneseName);
            //Assert.IsInstanceOf<PersonalNameParsedOut> (response, "response is PersonalNameParsedOut");
        }
        
        /// <summary>
        /// Test ParseJapaneseNameBatch
        /// </summary>
        [Test]
        public void ParseJapaneseNameBatchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //BatchPersonalNameIn batchPersonalNameIn = null;
            //var response = instance.ParseJapaneseNameBatch(batchPersonalNameIn);
            //Assert.IsInstanceOf<BatchPersonalNameParsedOut> (response, "response is BatchPersonalNameParsedOut");
        }
        
    }

}
