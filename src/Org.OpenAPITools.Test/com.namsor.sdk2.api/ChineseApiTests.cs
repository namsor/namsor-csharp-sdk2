/* 
 * NamSor API v2
 *
 * NamSor API v2 : enpoints to process personal names (gender, cultural origin or ethnicity) in all alphabets or languages. Use GET methods for small tests, but prefer POST methods for higher throughput (batch processing of up to 100 names at a time). Need something you can't find here? We have many more features coming soon. Let us know, we'll do our best to add it! 
 *
 * OpenAPI spec version: 2.0.11
 * Contact: contact@namsor.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using Org.OpenAPITools.Client;
using Org.OpenAPITools.com.namsor.sdk2.api;
using Org.OpenAPITools.com.namsor.sdk2.model;

namespace Org.OpenAPITools.Test
{
    /// <summary>
    ///  Class for testing ChineseApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class ChineseApiTests
    {
        private ChineseApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new ChineseApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of ChineseApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' ChineseApi
            //Assert.IsInstanceOfType(typeof(ChineseApi), instance, "instance is a ChineseApi");
        }

        
        /// <summary>
        /// Test ChineseNameCandidates
        /// </summary>
        [Test]
        public void ChineseNameCandidatesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string chineseSurnameLatin = null;
            //string chineseGivenNameLatin = null;
            //var response = instance.ChineseNameCandidates(chineseSurnameLatin, chineseGivenNameLatin);
            //Assert.IsInstanceOf<RomanizedNameOut> (response, "response is RomanizedNameOut");
        }
        
        /// <summary>
        /// Test ChineseNameCandidatesBatch
        /// </summary>
        [Test]
        public void ChineseNameCandidatesBatchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //BatchFirstLastNameIn batchFirstLastNameIn = null;
            //var response = instance.ChineseNameCandidatesBatch(batchFirstLastNameIn);
            //Assert.IsInstanceOf<BatchNameMatchCandidatesOut> (response, "response is BatchNameMatchCandidatesOut");
        }
        
        /// <summary>
        /// Test ChineseNameCandidatesGenderBatch
        /// </summary>
        [Test]
        public void ChineseNameCandidatesGenderBatchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //BatchFirstLastNameIn batchFirstLastNameIn = null;
            //var response = instance.ChineseNameCandidatesGenderBatch(batchFirstLastNameIn);
            //Assert.IsInstanceOf<BatchNameMatchCandidatesOut> (response, "response is BatchNameMatchCandidatesOut");
        }
        
        /// <summary>
        /// Test ChineseNameGenderCandidates
        /// </summary>
        [Test]
        public void ChineseNameGenderCandidatesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string chineseSurnameLatin = null;
            //string chineseGivenNameLatin = null;
            //string knownGender = null;
            //var response = instance.ChineseNameGenderCandidates(chineseSurnameLatin, chineseGivenNameLatin, knownGender);
            //Assert.IsInstanceOf<RomanizedNameOut> (response, "response is RomanizedNameOut");
        }
        
        /// <summary>
        /// Test ChineseNameMatch
        /// </summary>
        [Test]
        public void ChineseNameMatchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string chineseSurnameLatin = null;
            //string chineseGivenNameLatin = null;
            //string chineseName = null;
            //var response = instance.ChineseNameMatch(chineseSurnameLatin, chineseGivenNameLatin, chineseName);
            //Assert.IsInstanceOf<RomanizedNameOut> (response, "response is RomanizedNameOut");
        }
        
        /// <summary>
        /// Test ChineseNameMatchBatch
        /// </summary>
        [Test]
        public void ChineseNameMatchBatchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //BatchFirstLastNameIn batchFirstLastNameIn = null;
            //var response = instance.ChineseNameMatchBatch(batchFirstLastNameIn);
            //Assert.IsInstanceOf<BatchNameMatchCandidatesOut> (response, "response is BatchNameMatchCandidatesOut");
        }
        
        /// <summary>
        /// Test GenderChineseName
        /// </summary>
        [Test]
        public void GenderChineseNameTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string chineseName = null;
            //var response = instance.GenderChineseName(chineseName);
            //Assert.IsInstanceOf<PersonalNameGenderedOut> (response, "response is PersonalNameGenderedOut");
        }
        
        /// <summary>
        /// Test GenderChineseNameBatch
        /// </summary>
        [Test]
        public void GenderChineseNameBatchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //BatchPersonalNameIn batchPersonalNameIn = null;
            //var response = instance.GenderChineseNameBatch(batchPersonalNameIn);
            //Assert.IsInstanceOf<BatchPersonalNameGenderedOut> (response, "response is BatchPersonalNameGenderedOut");
        }
        
        /// <summary>
        /// Test GenderChineseNamePinyin
        /// </summary>
        [Test]
        public void GenderChineseNamePinyinTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string chineseSurnameLatin = null;
            //string chineseGivenNameLatin = null;
            //var response = instance.GenderChineseNamePinyin(chineseSurnameLatin, chineseGivenNameLatin);
            //Assert.IsInstanceOf<FirstLastNameGenderedOut> (response, "response is FirstLastNameGenderedOut");
        }
        
        /// <summary>
        /// Test GenderChineseNamePinyinBatch
        /// </summary>
        [Test]
        public void GenderChineseNamePinyinBatchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //BatchFirstLastNameIn batchFirstLastNameIn = null;
            //var response = instance.GenderChineseNamePinyinBatch(batchFirstLastNameIn);
            //Assert.IsInstanceOf<BatchFirstLastNameGenderedOut> (response, "response is BatchFirstLastNameGenderedOut");
        }
        
        /// <summary>
        /// Test ParseChineseName
        /// </summary>
        [Test]
        public void ParseChineseNameTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string chineseName = null;
            //var response = instance.ParseChineseName(chineseName);
            //Assert.IsInstanceOf<PersonalNameParsedOut> (response, "response is PersonalNameParsedOut");
        }
        
        /// <summary>
        /// Test ParseChineseNameBatch
        /// </summary>
        [Test]
        public void ParseChineseNameBatchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //BatchPersonalNameIn batchPersonalNameIn = null;
            //var response = instance.ParseChineseNameBatch(batchPersonalNameIn);
            //Assert.IsInstanceOf<BatchPersonalNameParsedOut> (response, "response is BatchPersonalNameParsedOut");
        }
        
        /// <summary>
        /// Test PinyinChineseName
        /// </summary>
        [Test]
        public void PinyinChineseNameTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string chineseName = null;
            //var response = instance.PinyinChineseName(chineseName);
            //Assert.IsInstanceOf<PersonalNameParsedOut> (response, "response is PersonalNameParsedOut");
        }
        
        /// <summary>
        /// Test PinyinChineseNameBatch
        /// </summary>
        [Test]
        public void PinyinChineseNameBatchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //BatchPersonalNameIn batchPersonalNameIn = null;
            //var response = instance.PinyinChineseNameBatch(batchPersonalNameIn);
            //Assert.IsInstanceOf<BatchPersonalNameParsedOut> (response, "response is BatchPersonalNameParsedOut");
        }
        
    }

}
