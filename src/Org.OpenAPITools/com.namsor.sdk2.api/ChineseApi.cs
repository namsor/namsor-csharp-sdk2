/* 
 * NamSor API v2
 *
 * NamSor API v2 : enpoints to process personal names (gender, cultural origin or ethnicity) in all alphabets or languages. Use GET methods for small tests, but prefer POST methods for higher throughput (batch processing of up to 100 names at a time). Need something you can't find here? We have many more features coming soon. Let us know, we'll do our best to add it! 
 *
 * OpenAPI spec version: 2.0.8
 * Contact: contact@namsor.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.com.namsor.sdk2.model;

namespace Org.OpenAPITools.com.namsor.sdk2.api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IChineseApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Identify Chinese name candidates, based on the romanized name ex. Wang Xiaoming
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chineseSurnameLatin"></param>
        /// <param name="chineseGivenNameLatin"></param>
        /// <returns>RomanizedNameOut</returns>
        RomanizedNameOut ChineseNameCandidates (string chineseSurnameLatin, string chineseGivenNameLatin);

        /// <summary>
        /// Identify Chinese name candidates, based on the romanized name ex. Wang Xiaoming
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chineseSurnameLatin"></param>
        /// <param name="chineseGivenNameLatin"></param>
        /// <returns>ApiResponse of RomanizedNameOut</returns>
        ApiResponse<RomanizedNameOut> ChineseNameCandidatesWithHttpInfo (string chineseSurnameLatin, string chineseGivenNameLatin);
        /// <summary>
        /// Identify Chinese name candidates, based on the romanized name (firstName &#x3D; chineseGivenName; lastName&#x3D;chineseSurname), ex. Wang Xiaoming
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchFirstLastNameIn">A list of personal Chinese names in LATIN, firstName &#x3D; chineseGivenName; lastName&#x3D;chineseSurname (optional)</param>
        /// <returns>BatchNameMatchCandidatesOut</returns>
        BatchNameMatchCandidatesOut ChineseNameCandidatesBatch (BatchFirstLastNameIn batchFirstLastNameIn = null);

        /// <summary>
        /// Identify Chinese name candidates, based on the romanized name (firstName &#x3D; chineseGivenName; lastName&#x3D;chineseSurname), ex. Wang Xiaoming
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchFirstLastNameIn">A list of personal Chinese names in LATIN, firstName &#x3D; chineseGivenName; lastName&#x3D;chineseSurname (optional)</param>
        /// <returns>ApiResponse of BatchNameMatchCandidatesOut</returns>
        ApiResponse<BatchNameMatchCandidatesOut> ChineseNameCandidatesBatchWithHttpInfo (BatchFirstLastNameIn batchFirstLastNameIn = null);
        /// <summary>
        /// Identify Chinese name candidates, based on the romanized name (firstName &#x3D; chineseGivenName; lastName&#x3D;chineseSurname) ex. Wang Xiaoming.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchFirstLastNameIn">A list of personal Chinese names in LATIN, firstName &#x3D; chineseGivenName; lastName&#x3D;chineseSurname (optional)</param>
        /// <returns>BatchNameMatchCandidatesOut</returns>
        BatchNameMatchCandidatesOut ChineseNameCandidatesGenderBatch (BatchFirstLastNameIn batchFirstLastNameIn = null);

        /// <summary>
        /// Identify Chinese name candidates, based on the romanized name (firstName &#x3D; chineseGivenName; lastName&#x3D;chineseSurname) ex. Wang Xiaoming.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchFirstLastNameIn">A list of personal Chinese names in LATIN, firstName &#x3D; chineseGivenName; lastName&#x3D;chineseSurname (optional)</param>
        /// <returns>ApiResponse of BatchNameMatchCandidatesOut</returns>
        ApiResponse<BatchNameMatchCandidatesOut> ChineseNameCandidatesGenderBatchWithHttpInfo (BatchFirstLastNameIn batchFirstLastNameIn = null);
        /// <summary>
        /// Identify Chinese name candidates, based on the romanized name ex. Wang Xiaoming - having a known gender (&#39;male&#39; or &#39;female&#39;)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chineseSurnameLatin"></param>
        /// <param name="chineseGivenNameLatin"></param>
        /// <param name="knownGender"></param>
        /// <returns>RomanizedNameOut</returns>
        RomanizedNameOut ChineseNameGenderCandidates (string chineseSurnameLatin, string chineseGivenNameLatin, string knownGender);

        /// <summary>
        /// Identify Chinese name candidates, based on the romanized name ex. Wang Xiaoming - having a known gender (&#39;male&#39; or &#39;female&#39;)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chineseSurnameLatin"></param>
        /// <param name="chineseGivenNameLatin"></param>
        /// <param name="knownGender"></param>
        /// <returns>ApiResponse of RomanizedNameOut</returns>
        ApiResponse<RomanizedNameOut> ChineseNameGenderCandidatesWithHttpInfo (string chineseSurnameLatin, string chineseGivenNameLatin, string knownGender);
        /// <summary>
        /// Return a score for matching Chinese name ex. 王晓明 with a romanized name ex. Wang Xiaoming
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chineseSurnameLatin"></param>
        /// <param name="chineseGivenNameLatin"></param>
        /// <param name="chineseName"></param>
        /// <returns>RomanizedNameOut</returns>
        RomanizedNameOut ChineseNameMatch (string chineseSurnameLatin, string chineseGivenNameLatin, string chineseName);

        /// <summary>
        /// Return a score for matching Chinese name ex. 王晓明 with a romanized name ex. Wang Xiaoming
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chineseSurnameLatin"></param>
        /// <param name="chineseGivenNameLatin"></param>
        /// <param name="chineseName"></param>
        /// <returns>ApiResponse of RomanizedNameOut</returns>
        ApiResponse<RomanizedNameOut> ChineseNameMatchWithHttpInfo (string chineseSurnameLatin, string chineseGivenNameLatin, string chineseName);
        /// <summary>
        /// Identify Chinese name candidates, based on the romanized name (firstName &#x3D; chineseGivenName; lastName&#x3D;chineseSurname), ex. Wang Xiaoming
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchFirstLastNameIn">A list of personal Chinese names in LATIN, firstName &#x3D; chineseGivenName; lastName&#x3D;chineseSurname (optional)</param>
        /// <returns>BatchNameMatchCandidatesOut</returns>
        BatchNameMatchCandidatesOut ChineseNameMatchBatch (BatchFirstLastNameIn batchFirstLastNameIn = null);

        /// <summary>
        /// Identify Chinese name candidates, based on the romanized name (firstName &#x3D; chineseGivenName; lastName&#x3D;chineseSurname), ex. Wang Xiaoming
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchFirstLastNameIn">A list of personal Chinese names in LATIN, firstName &#x3D; chineseGivenName; lastName&#x3D;chineseSurname (optional)</param>
        /// <returns>ApiResponse of BatchNameMatchCandidatesOut</returns>
        ApiResponse<BatchNameMatchCandidatesOut> ChineseNameMatchBatchWithHttpInfo (BatchFirstLastNameIn batchFirstLastNameIn = null);
        /// <summary>
        /// Infer the likely gender of a Chinese full name ex. 王晓明
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chineseName"></param>
        /// <returns>PersonalNameGenderedOut</returns>
        PersonalNameGenderedOut GenderChineseName (string chineseName);

        /// <summary>
        /// Infer the likely gender of a Chinese full name ex. 王晓明
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chineseName"></param>
        /// <returns>ApiResponse of PersonalNameGenderedOut</returns>
        ApiResponse<PersonalNameGenderedOut> GenderChineseNameWithHttpInfo (string chineseName);
        /// <summary>
        /// Infer the likely gender of up to 100 full names ex. 王晓明
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchPersonalNameIn">A list of personal names, with a country ISO2 code (optional)</param>
        /// <returns>BatchPersonalNameGenderedOut</returns>
        BatchPersonalNameGenderedOut GenderChineseNameBatch (BatchPersonalNameIn batchPersonalNameIn = null);

        /// <summary>
        /// Infer the likely gender of up to 100 full names ex. 王晓明
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchPersonalNameIn">A list of personal names, with a country ISO2 code (optional)</param>
        /// <returns>ApiResponse of BatchPersonalNameGenderedOut</returns>
        ApiResponse<BatchPersonalNameGenderedOut> GenderChineseNameBatchWithHttpInfo (BatchPersonalNameIn batchPersonalNameIn = null);
        /// <summary>
        /// Infer the likely gender of a Chinese name in LATIN (Pinyin).
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chineseSurnameLatin"></param>
        /// <param name="chineseGivenNameLatin"></param>
        /// <returns>FirstLastNameGenderedOut</returns>
        FirstLastNameGenderedOut GenderChineseNamePinyin (string chineseSurnameLatin, string chineseGivenNameLatin);

        /// <summary>
        /// Infer the likely gender of a Chinese name in LATIN (Pinyin).
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chineseSurnameLatin"></param>
        /// <param name="chineseGivenNameLatin"></param>
        /// <returns>ApiResponse of FirstLastNameGenderedOut</returns>
        ApiResponse<FirstLastNameGenderedOut> GenderChineseNamePinyinWithHttpInfo (string chineseSurnameLatin, string chineseGivenNameLatin);
        /// <summary>
        /// Infer the likely gender of up to 100 Chinese names in LATIN (Pinyin).
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchFirstLastNameIn">A list of names, with country code. (optional)</param>
        /// <returns>BatchFirstLastNameGenderedOut</returns>
        BatchFirstLastNameGenderedOut GenderChineseNamePinyinBatch (BatchFirstLastNameIn batchFirstLastNameIn = null);

        /// <summary>
        /// Infer the likely gender of up to 100 Chinese names in LATIN (Pinyin).
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchFirstLastNameIn">A list of names, with country code. (optional)</param>
        /// <returns>ApiResponse of BatchFirstLastNameGenderedOut</returns>
        ApiResponse<BatchFirstLastNameGenderedOut> GenderChineseNamePinyinBatchWithHttpInfo (BatchFirstLastNameIn batchFirstLastNameIn = null);
        /// <summary>
        /// Infer the likely first/last name structure of a name, ex. 王晓明 -&gt; 王(surname) 晓明(given name)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chineseName"></param>
        /// <returns>PersonalNameParsedOut</returns>
        PersonalNameParsedOut ParseChineseName (string chineseName);

        /// <summary>
        /// Infer the likely first/last name structure of a name, ex. 王晓明 -&gt; 王(surname) 晓明(given name)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chineseName"></param>
        /// <returns>ApiResponse of PersonalNameParsedOut</returns>
        ApiResponse<PersonalNameParsedOut> ParseChineseNameWithHttpInfo (string chineseName);
        /// <summary>
        /// Infer the likely first/last name structure of a name, ex. 王晓明 -&gt; 王(surname) 晓明(given name).
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchPersonalNameIn">A list of personal names (optional)</param>
        /// <returns>BatchPersonalNameParsedOut</returns>
        BatchPersonalNameParsedOut ParseChineseNameBatch (BatchPersonalNameIn batchPersonalNameIn = null);

        /// <summary>
        /// Infer the likely first/last name structure of a name, ex. 王晓明 -&gt; 王(surname) 晓明(given name).
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchPersonalNameIn">A list of personal names (optional)</param>
        /// <returns>ApiResponse of BatchPersonalNameParsedOut</returns>
        ApiResponse<BatchPersonalNameParsedOut> ParseChineseNameBatchWithHttpInfo (BatchPersonalNameIn batchPersonalNameIn = null);
        /// <summary>
        /// Romanize the Chinese name to Pinyin, ex. 王晓明 -&gt; Wang (surname) Xiaoming (given name)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chineseName"></param>
        /// <returns>PersonalNameParsedOut</returns>
        PersonalNameParsedOut PinyinChineseName (string chineseName);

        /// <summary>
        /// Romanize the Chinese name to Pinyin, ex. 王晓明 -&gt; Wang (surname) Xiaoming (given name)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chineseName"></param>
        /// <returns>ApiResponse of PersonalNameParsedOut</returns>
        ApiResponse<PersonalNameParsedOut> PinyinChineseNameWithHttpInfo (string chineseName);
        /// <summary>
        /// Romanize a list of Chinese name to Pinyin, ex. 王晓明 -&gt; Wang (surname) Xiaoming (given name).
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchPersonalNameIn">A list of Chinese names (optional)</param>
        /// <returns>BatchPersonalNameParsedOut</returns>
        BatchPersonalNameParsedOut PinyinChineseNameBatch (BatchPersonalNameIn batchPersonalNameIn = null);

        /// <summary>
        /// Romanize a list of Chinese name to Pinyin, ex. 王晓明 -&gt; Wang (surname) Xiaoming (given name).
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchPersonalNameIn">A list of Chinese names (optional)</param>
        /// <returns>ApiResponse of BatchPersonalNameParsedOut</returns>
        ApiResponse<BatchPersonalNameParsedOut> PinyinChineseNameBatchWithHttpInfo (BatchPersonalNameIn batchPersonalNameIn = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Identify Chinese name candidates, based on the romanized name ex. Wang Xiaoming
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chineseSurnameLatin"></param>
        /// <param name="chineseGivenNameLatin"></param>
        /// <returns>Task of RomanizedNameOut</returns>
        System.Threading.Tasks.Task<RomanizedNameOut> ChineseNameCandidatesAsync (string chineseSurnameLatin, string chineseGivenNameLatin);

        /// <summary>
        /// Identify Chinese name candidates, based on the romanized name ex. Wang Xiaoming
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chineseSurnameLatin"></param>
        /// <param name="chineseGivenNameLatin"></param>
        /// <returns>Task of ApiResponse (RomanizedNameOut)</returns>
        System.Threading.Tasks.Task<ApiResponse<RomanizedNameOut>> ChineseNameCandidatesAsyncWithHttpInfo (string chineseSurnameLatin, string chineseGivenNameLatin);
        /// <summary>
        /// Identify Chinese name candidates, based on the romanized name (firstName &#x3D; chineseGivenName; lastName&#x3D;chineseSurname), ex. Wang Xiaoming
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchFirstLastNameIn">A list of personal Chinese names in LATIN, firstName &#x3D; chineseGivenName; lastName&#x3D;chineseSurname (optional)</param>
        /// <returns>Task of BatchNameMatchCandidatesOut</returns>
        System.Threading.Tasks.Task<BatchNameMatchCandidatesOut> ChineseNameCandidatesBatchAsync (BatchFirstLastNameIn batchFirstLastNameIn = null);

        /// <summary>
        /// Identify Chinese name candidates, based on the romanized name (firstName &#x3D; chineseGivenName; lastName&#x3D;chineseSurname), ex. Wang Xiaoming
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchFirstLastNameIn">A list of personal Chinese names in LATIN, firstName &#x3D; chineseGivenName; lastName&#x3D;chineseSurname (optional)</param>
        /// <returns>Task of ApiResponse (BatchNameMatchCandidatesOut)</returns>
        System.Threading.Tasks.Task<ApiResponse<BatchNameMatchCandidatesOut>> ChineseNameCandidatesBatchAsyncWithHttpInfo (BatchFirstLastNameIn batchFirstLastNameIn = null);
        /// <summary>
        /// Identify Chinese name candidates, based on the romanized name (firstName &#x3D; chineseGivenName; lastName&#x3D;chineseSurname) ex. Wang Xiaoming.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchFirstLastNameIn">A list of personal Chinese names in LATIN, firstName &#x3D; chineseGivenName; lastName&#x3D;chineseSurname (optional)</param>
        /// <returns>Task of BatchNameMatchCandidatesOut</returns>
        System.Threading.Tasks.Task<BatchNameMatchCandidatesOut> ChineseNameCandidatesGenderBatchAsync (BatchFirstLastNameIn batchFirstLastNameIn = null);

        /// <summary>
        /// Identify Chinese name candidates, based on the romanized name (firstName &#x3D; chineseGivenName; lastName&#x3D;chineseSurname) ex. Wang Xiaoming.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchFirstLastNameIn">A list of personal Chinese names in LATIN, firstName &#x3D; chineseGivenName; lastName&#x3D;chineseSurname (optional)</param>
        /// <returns>Task of ApiResponse (BatchNameMatchCandidatesOut)</returns>
        System.Threading.Tasks.Task<ApiResponse<BatchNameMatchCandidatesOut>> ChineseNameCandidatesGenderBatchAsyncWithHttpInfo (BatchFirstLastNameIn batchFirstLastNameIn = null);
        /// <summary>
        /// Identify Chinese name candidates, based on the romanized name ex. Wang Xiaoming - having a known gender (&#39;male&#39; or &#39;female&#39;)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chineseSurnameLatin"></param>
        /// <param name="chineseGivenNameLatin"></param>
        /// <param name="knownGender"></param>
        /// <returns>Task of RomanizedNameOut</returns>
        System.Threading.Tasks.Task<RomanizedNameOut> ChineseNameGenderCandidatesAsync (string chineseSurnameLatin, string chineseGivenNameLatin, string knownGender);

        /// <summary>
        /// Identify Chinese name candidates, based on the romanized name ex. Wang Xiaoming - having a known gender (&#39;male&#39; or &#39;female&#39;)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chineseSurnameLatin"></param>
        /// <param name="chineseGivenNameLatin"></param>
        /// <param name="knownGender"></param>
        /// <returns>Task of ApiResponse (RomanizedNameOut)</returns>
        System.Threading.Tasks.Task<ApiResponse<RomanizedNameOut>> ChineseNameGenderCandidatesAsyncWithHttpInfo (string chineseSurnameLatin, string chineseGivenNameLatin, string knownGender);
        /// <summary>
        /// Return a score for matching Chinese name ex. 王晓明 with a romanized name ex. Wang Xiaoming
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chineseSurnameLatin"></param>
        /// <param name="chineseGivenNameLatin"></param>
        /// <param name="chineseName"></param>
        /// <returns>Task of RomanizedNameOut</returns>
        System.Threading.Tasks.Task<RomanizedNameOut> ChineseNameMatchAsync (string chineseSurnameLatin, string chineseGivenNameLatin, string chineseName);

        /// <summary>
        /// Return a score for matching Chinese name ex. 王晓明 with a romanized name ex. Wang Xiaoming
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chineseSurnameLatin"></param>
        /// <param name="chineseGivenNameLatin"></param>
        /// <param name="chineseName"></param>
        /// <returns>Task of ApiResponse (RomanizedNameOut)</returns>
        System.Threading.Tasks.Task<ApiResponse<RomanizedNameOut>> ChineseNameMatchAsyncWithHttpInfo (string chineseSurnameLatin, string chineseGivenNameLatin, string chineseName);
        /// <summary>
        /// Identify Chinese name candidates, based on the romanized name (firstName &#x3D; chineseGivenName; lastName&#x3D;chineseSurname), ex. Wang Xiaoming
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchFirstLastNameIn">A list of personal Chinese names in LATIN, firstName &#x3D; chineseGivenName; lastName&#x3D;chineseSurname (optional)</param>
        /// <returns>Task of BatchNameMatchCandidatesOut</returns>
        System.Threading.Tasks.Task<BatchNameMatchCandidatesOut> ChineseNameMatchBatchAsync (BatchFirstLastNameIn batchFirstLastNameIn = null);

        /// <summary>
        /// Identify Chinese name candidates, based on the romanized name (firstName &#x3D; chineseGivenName; lastName&#x3D;chineseSurname), ex. Wang Xiaoming
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchFirstLastNameIn">A list of personal Chinese names in LATIN, firstName &#x3D; chineseGivenName; lastName&#x3D;chineseSurname (optional)</param>
        /// <returns>Task of ApiResponse (BatchNameMatchCandidatesOut)</returns>
        System.Threading.Tasks.Task<ApiResponse<BatchNameMatchCandidatesOut>> ChineseNameMatchBatchAsyncWithHttpInfo (BatchFirstLastNameIn batchFirstLastNameIn = null);
        /// <summary>
        /// Infer the likely gender of a Chinese full name ex. 王晓明
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chineseName"></param>
        /// <returns>Task of PersonalNameGenderedOut</returns>
        System.Threading.Tasks.Task<PersonalNameGenderedOut> GenderChineseNameAsync (string chineseName);

        /// <summary>
        /// Infer the likely gender of a Chinese full name ex. 王晓明
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chineseName"></param>
        /// <returns>Task of ApiResponse (PersonalNameGenderedOut)</returns>
        System.Threading.Tasks.Task<ApiResponse<PersonalNameGenderedOut>> GenderChineseNameAsyncWithHttpInfo (string chineseName);
        /// <summary>
        /// Infer the likely gender of up to 100 full names ex. 王晓明
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchPersonalNameIn">A list of personal names, with a country ISO2 code (optional)</param>
        /// <returns>Task of BatchPersonalNameGenderedOut</returns>
        System.Threading.Tasks.Task<BatchPersonalNameGenderedOut> GenderChineseNameBatchAsync (BatchPersonalNameIn batchPersonalNameIn = null);

        /// <summary>
        /// Infer the likely gender of up to 100 full names ex. 王晓明
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchPersonalNameIn">A list of personal names, with a country ISO2 code (optional)</param>
        /// <returns>Task of ApiResponse (BatchPersonalNameGenderedOut)</returns>
        System.Threading.Tasks.Task<ApiResponse<BatchPersonalNameGenderedOut>> GenderChineseNameBatchAsyncWithHttpInfo (BatchPersonalNameIn batchPersonalNameIn = null);
        /// <summary>
        /// Infer the likely gender of a Chinese name in LATIN (Pinyin).
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chineseSurnameLatin"></param>
        /// <param name="chineseGivenNameLatin"></param>
        /// <returns>Task of FirstLastNameGenderedOut</returns>
        System.Threading.Tasks.Task<FirstLastNameGenderedOut> GenderChineseNamePinyinAsync (string chineseSurnameLatin, string chineseGivenNameLatin);

        /// <summary>
        /// Infer the likely gender of a Chinese name in LATIN (Pinyin).
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chineseSurnameLatin"></param>
        /// <param name="chineseGivenNameLatin"></param>
        /// <returns>Task of ApiResponse (FirstLastNameGenderedOut)</returns>
        System.Threading.Tasks.Task<ApiResponse<FirstLastNameGenderedOut>> GenderChineseNamePinyinAsyncWithHttpInfo (string chineseSurnameLatin, string chineseGivenNameLatin);
        /// <summary>
        /// Infer the likely gender of up to 100 Chinese names in LATIN (Pinyin).
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchFirstLastNameIn">A list of names, with country code. (optional)</param>
        /// <returns>Task of BatchFirstLastNameGenderedOut</returns>
        System.Threading.Tasks.Task<BatchFirstLastNameGenderedOut> GenderChineseNamePinyinBatchAsync (BatchFirstLastNameIn batchFirstLastNameIn = null);

        /// <summary>
        /// Infer the likely gender of up to 100 Chinese names in LATIN (Pinyin).
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchFirstLastNameIn">A list of names, with country code. (optional)</param>
        /// <returns>Task of ApiResponse (BatchFirstLastNameGenderedOut)</returns>
        System.Threading.Tasks.Task<ApiResponse<BatchFirstLastNameGenderedOut>> GenderChineseNamePinyinBatchAsyncWithHttpInfo (BatchFirstLastNameIn batchFirstLastNameIn = null);
        /// <summary>
        /// Infer the likely first/last name structure of a name, ex. 王晓明 -&gt; 王(surname) 晓明(given name)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chineseName"></param>
        /// <returns>Task of PersonalNameParsedOut</returns>
        System.Threading.Tasks.Task<PersonalNameParsedOut> ParseChineseNameAsync (string chineseName);

        /// <summary>
        /// Infer the likely first/last name structure of a name, ex. 王晓明 -&gt; 王(surname) 晓明(given name)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chineseName"></param>
        /// <returns>Task of ApiResponse (PersonalNameParsedOut)</returns>
        System.Threading.Tasks.Task<ApiResponse<PersonalNameParsedOut>> ParseChineseNameAsyncWithHttpInfo (string chineseName);
        /// <summary>
        /// Infer the likely first/last name structure of a name, ex. 王晓明 -&gt; 王(surname) 晓明(given name).
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchPersonalNameIn">A list of personal names (optional)</param>
        /// <returns>Task of BatchPersonalNameParsedOut</returns>
        System.Threading.Tasks.Task<BatchPersonalNameParsedOut> ParseChineseNameBatchAsync (BatchPersonalNameIn batchPersonalNameIn = null);

        /// <summary>
        /// Infer the likely first/last name structure of a name, ex. 王晓明 -&gt; 王(surname) 晓明(given name).
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchPersonalNameIn">A list of personal names (optional)</param>
        /// <returns>Task of ApiResponse (BatchPersonalNameParsedOut)</returns>
        System.Threading.Tasks.Task<ApiResponse<BatchPersonalNameParsedOut>> ParseChineseNameBatchAsyncWithHttpInfo (BatchPersonalNameIn batchPersonalNameIn = null);
        /// <summary>
        /// Romanize the Chinese name to Pinyin, ex. 王晓明 -&gt; Wang (surname) Xiaoming (given name)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chineseName"></param>
        /// <returns>Task of PersonalNameParsedOut</returns>
        System.Threading.Tasks.Task<PersonalNameParsedOut> PinyinChineseNameAsync (string chineseName);

        /// <summary>
        /// Romanize the Chinese name to Pinyin, ex. 王晓明 -&gt; Wang (surname) Xiaoming (given name)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chineseName"></param>
        /// <returns>Task of ApiResponse (PersonalNameParsedOut)</returns>
        System.Threading.Tasks.Task<ApiResponse<PersonalNameParsedOut>> PinyinChineseNameAsyncWithHttpInfo (string chineseName);
        /// <summary>
        /// Romanize a list of Chinese name to Pinyin, ex. 王晓明 -&gt; Wang (surname) Xiaoming (given name).
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchPersonalNameIn">A list of Chinese names (optional)</param>
        /// <returns>Task of BatchPersonalNameParsedOut</returns>
        System.Threading.Tasks.Task<BatchPersonalNameParsedOut> PinyinChineseNameBatchAsync (BatchPersonalNameIn batchPersonalNameIn = null);

        /// <summary>
        /// Romanize a list of Chinese name to Pinyin, ex. 王晓明 -&gt; Wang (surname) Xiaoming (given name).
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchPersonalNameIn">A list of Chinese names (optional)</param>
        /// <returns>Task of ApiResponse (BatchPersonalNameParsedOut)</returns>
        System.Threading.Tasks.Task<ApiResponse<BatchPersonalNameParsedOut>> PinyinChineseNameBatchAsyncWithHttpInfo (BatchPersonalNameIn batchPersonalNameIn = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ChineseApi : IChineseApi
    {
        private Org.OpenAPITools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ChineseApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ChineseApi(String basePath)
        {
            this.Configuration = new Org.OpenAPITools.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ChineseApi"/> class
        /// </summary>
        /// <returns></returns>
        public ChineseApi()
        {
            this.Configuration = Org.OpenAPITools.Client.Configuration.Default;

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ChineseApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ChineseApi(Org.OpenAPITools.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Org.OpenAPITools.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.OpenAPITools.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.OpenAPITools.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Identify Chinese name candidates, based on the romanized name ex. Wang Xiaoming 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chineseSurnameLatin"></param>
        /// <param name="chineseGivenNameLatin"></param>
        /// <returns>RomanizedNameOut</returns>
        public RomanizedNameOut ChineseNameCandidates (string chineseSurnameLatin, string chineseGivenNameLatin)
        {
             ApiResponse<RomanizedNameOut> localVarResponse = ChineseNameCandidatesWithHttpInfo(chineseSurnameLatin, chineseGivenNameLatin);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Identify Chinese name candidates, based on the romanized name ex. Wang Xiaoming 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chineseSurnameLatin"></param>
        /// <param name="chineseGivenNameLatin"></param>
        /// <returns>ApiResponse of RomanizedNameOut</returns>
        public ApiResponse< RomanizedNameOut > ChineseNameCandidatesWithHttpInfo (string chineseSurnameLatin, string chineseGivenNameLatin)
        {
            // verify the required parameter 'chineseSurnameLatin' is set
            if (chineseSurnameLatin == null)
                throw new ApiException(400, "Missing required parameter 'chineseSurnameLatin' when calling ChineseApi->ChineseNameCandidates");
            // verify the required parameter 'chineseGivenNameLatin' is set
            if (chineseGivenNameLatin == null)
                throw new ApiException(400, "Missing required parameter 'chineseGivenNameLatin' when calling ChineseApi->ChineseNameCandidates");

            var localVarPath = "/api2/json/chineseNameCandidates/{chineseSurnameLatin}/{chineseGivenNameLatin}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (chineseSurnameLatin != null) localVarPathParams.Add("chineseSurnameLatin", this.Configuration.ApiClient.ParameterToString(chineseSurnameLatin)); // path parameter
            if (chineseGivenNameLatin != null) localVarPathParams.Add("chineseGivenNameLatin", this.Configuration.ApiClient.ParameterToString(chineseGivenNameLatin)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarHeaderParams["X-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-API-KEY");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ChineseNameCandidates", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RomanizedNameOut>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RomanizedNameOut) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RomanizedNameOut)));
        }

        /// <summary>
        /// Identify Chinese name candidates, based on the romanized name ex. Wang Xiaoming 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chineseSurnameLatin"></param>
        /// <param name="chineseGivenNameLatin"></param>
        /// <returns>Task of RomanizedNameOut</returns>
        public async System.Threading.Tasks.Task<RomanizedNameOut> ChineseNameCandidatesAsync (string chineseSurnameLatin, string chineseGivenNameLatin)
        {
             ApiResponse<RomanizedNameOut> localVarResponse = await ChineseNameCandidatesAsyncWithHttpInfo(chineseSurnameLatin, chineseGivenNameLatin);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Identify Chinese name candidates, based on the romanized name ex. Wang Xiaoming 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chineseSurnameLatin"></param>
        /// <param name="chineseGivenNameLatin"></param>
        /// <returns>Task of ApiResponse (RomanizedNameOut)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RomanizedNameOut>> ChineseNameCandidatesAsyncWithHttpInfo (string chineseSurnameLatin, string chineseGivenNameLatin)
        {
            // verify the required parameter 'chineseSurnameLatin' is set
            if (chineseSurnameLatin == null)
                throw new ApiException(400, "Missing required parameter 'chineseSurnameLatin' when calling ChineseApi->ChineseNameCandidates");
            // verify the required parameter 'chineseGivenNameLatin' is set
            if (chineseGivenNameLatin == null)
                throw new ApiException(400, "Missing required parameter 'chineseGivenNameLatin' when calling ChineseApi->ChineseNameCandidates");

            var localVarPath = "/api2/json/chineseNameCandidates/{chineseSurnameLatin}/{chineseGivenNameLatin}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (chineseSurnameLatin != null) localVarPathParams.Add("chineseSurnameLatin", this.Configuration.ApiClient.ParameterToString(chineseSurnameLatin)); // path parameter
            if (chineseGivenNameLatin != null) localVarPathParams.Add("chineseGivenNameLatin", this.Configuration.ApiClient.ParameterToString(chineseGivenNameLatin)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarHeaderParams["X-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-API-KEY");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ChineseNameCandidates", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RomanizedNameOut>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RomanizedNameOut) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RomanizedNameOut)));
        }

        /// <summary>
        /// Identify Chinese name candidates, based on the romanized name (firstName &#x3D; chineseGivenName; lastName&#x3D;chineseSurname), ex. Wang Xiaoming 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchFirstLastNameIn">A list of personal Chinese names in LATIN, firstName &#x3D; chineseGivenName; lastName&#x3D;chineseSurname (optional)</param>
        /// <returns>BatchNameMatchCandidatesOut</returns>
        public BatchNameMatchCandidatesOut ChineseNameCandidatesBatch (BatchFirstLastNameIn batchFirstLastNameIn = null)
        {
             ApiResponse<BatchNameMatchCandidatesOut> localVarResponse = ChineseNameCandidatesBatchWithHttpInfo(batchFirstLastNameIn);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Identify Chinese name candidates, based on the romanized name (firstName &#x3D; chineseGivenName; lastName&#x3D;chineseSurname), ex. Wang Xiaoming 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchFirstLastNameIn">A list of personal Chinese names in LATIN, firstName &#x3D; chineseGivenName; lastName&#x3D;chineseSurname (optional)</param>
        /// <returns>ApiResponse of BatchNameMatchCandidatesOut</returns>
        public ApiResponse< BatchNameMatchCandidatesOut > ChineseNameCandidatesBatchWithHttpInfo (BatchFirstLastNameIn batchFirstLastNameIn = null)
        {

            var localVarPath = "/api2/json/chineseNameCandidatesBatch";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (batchFirstLastNameIn != null && batchFirstLastNameIn.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(batchFirstLastNameIn); // http body (model) parameter
            }
            else
            {
                localVarPostBody = batchFirstLastNameIn; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarHeaderParams["X-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-API-KEY");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ChineseNameCandidatesBatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BatchNameMatchCandidatesOut>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BatchNameMatchCandidatesOut) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BatchNameMatchCandidatesOut)));
        }

        /// <summary>
        /// Identify Chinese name candidates, based on the romanized name (firstName &#x3D; chineseGivenName; lastName&#x3D;chineseSurname), ex. Wang Xiaoming 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchFirstLastNameIn">A list of personal Chinese names in LATIN, firstName &#x3D; chineseGivenName; lastName&#x3D;chineseSurname (optional)</param>
        /// <returns>Task of BatchNameMatchCandidatesOut</returns>
        public async System.Threading.Tasks.Task<BatchNameMatchCandidatesOut> ChineseNameCandidatesBatchAsync (BatchFirstLastNameIn batchFirstLastNameIn = null)
        {
             ApiResponse<BatchNameMatchCandidatesOut> localVarResponse = await ChineseNameCandidatesBatchAsyncWithHttpInfo(batchFirstLastNameIn);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Identify Chinese name candidates, based on the romanized name (firstName &#x3D; chineseGivenName; lastName&#x3D;chineseSurname), ex. Wang Xiaoming 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchFirstLastNameIn">A list of personal Chinese names in LATIN, firstName &#x3D; chineseGivenName; lastName&#x3D;chineseSurname (optional)</param>
        /// <returns>Task of ApiResponse (BatchNameMatchCandidatesOut)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BatchNameMatchCandidatesOut>> ChineseNameCandidatesBatchAsyncWithHttpInfo (BatchFirstLastNameIn batchFirstLastNameIn = null)
        {

            var localVarPath = "/api2/json/chineseNameCandidatesBatch";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (batchFirstLastNameIn != null && batchFirstLastNameIn.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(batchFirstLastNameIn); // http body (model) parameter
            }
            else
            {
                localVarPostBody = batchFirstLastNameIn; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarHeaderParams["X-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-API-KEY");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ChineseNameCandidatesBatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BatchNameMatchCandidatesOut>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BatchNameMatchCandidatesOut) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BatchNameMatchCandidatesOut)));
        }

        /// <summary>
        /// Identify Chinese name candidates, based on the romanized name (firstName &#x3D; chineseGivenName; lastName&#x3D;chineseSurname) ex. Wang Xiaoming. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchFirstLastNameIn">A list of personal Chinese names in LATIN, firstName &#x3D; chineseGivenName; lastName&#x3D;chineseSurname (optional)</param>
        /// <returns>BatchNameMatchCandidatesOut</returns>
        public BatchNameMatchCandidatesOut ChineseNameCandidatesGenderBatch (BatchFirstLastNameIn batchFirstLastNameIn = null)
        {
             ApiResponse<BatchNameMatchCandidatesOut> localVarResponse = ChineseNameCandidatesGenderBatchWithHttpInfo(batchFirstLastNameIn);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Identify Chinese name candidates, based on the romanized name (firstName &#x3D; chineseGivenName; lastName&#x3D;chineseSurname) ex. Wang Xiaoming. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchFirstLastNameIn">A list of personal Chinese names in LATIN, firstName &#x3D; chineseGivenName; lastName&#x3D;chineseSurname (optional)</param>
        /// <returns>ApiResponse of BatchNameMatchCandidatesOut</returns>
        public ApiResponse< BatchNameMatchCandidatesOut > ChineseNameCandidatesGenderBatchWithHttpInfo (BatchFirstLastNameIn batchFirstLastNameIn = null)
        {

            var localVarPath = "/api2/json/chineseNameCandidatesGenderBatch";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (batchFirstLastNameIn != null && batchFirstLastNameIn.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(batchFirstLastNameIn); // http body (model) parameter
            }
            else
            {
                localVarPostBody = batchFirstLastNameIn; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarHeaderParams["X-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-API-KEY");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ChineseNameCandidatesGenderBatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BatchNameMatchCandidatesOut>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BatchNameMatchCandidatesOut) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BatchNameMatchCandidatesOut)));
        }

        /// <summary>
        /// Identify Chinese name candidates, based on the romanized name (firstName &#x3D; chineseGivenName; lastName&#x3D;chineseSurname) ex. Wang Xiaoming. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchFirstLastNameIn">A list of personal Chinese names in LATIN, firstName &#x3D; chineseGivenName; lastName&#x3D;chineseSurname (optional)</param>
        /// <returns>Task of BatchNameMatchCandidatesOut</returns>
        public async System.Threading.Tasks.Task<BatchNameMatchCandidatesOut> ChineseNameCandidatesGenderBatchAsync (BatchFirstLastNameIn batchFirstLastNameIn = null)
        {
             ApiResponse<BatchNameMatchCandidatesOut> localVarResponse = await ChineseNameCandidatesGenderBatchAsyncWithHttpInfo(batchFirstLastNameIn);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Identify Chinese name candidates, based on the romanized name (firstName &#x3D; chineseGivenName; lastName&#x3D;chineseSurname) ex. Wang Xiaoming. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchFirstLastNameIn">A list of personal Chinese names in LATIN, firstName &#x3D; chineseGivenName; lastName&#x3D;chineseSurname (optional)</param>
        /// <returns>Task of ApiResponse (BatchNameMatchCandidatesOut)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BatchNameMatchCandidatesOut>> ChineseNameCandidatesGenderBatchAsyncWithHttpInfo (BatchFirstLastNameIn batchFirstLastNameIn = null)
        {

            var localVarPath = "/api2/json/chineseNameCandidatesGenderBatch";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (batchFirstLastNameIn != null && batchFirstLastNameIn.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(batchFirstLastNameIn); // http body (model) parameter
            }
            else
            {
                localVarPostBody = batchFirstLastNameIn; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarHeaderParams["X-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-API-KEY");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ChineseNameCandidatesGenderBatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BatchNameMatchCandidatesOut>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BatchNameMatchCandidatesOut) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BatchNameMatchCandidatesOut)));
        }

        /// <summary>
        /// Identify Chinese name candidates, based on the romanized name ex. Wang Xiaoming - having a known gender (&#39;male&#39; or &#39;female&#39;) 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chineseSurnameLatin"></param>
        /// <param name="chineseGivenNameLatin"></param>
        /// <param name="knownGender"></param>
        /// <returns>RomanizedNameOut</returns>
        public RomanizedNameOut ChineseNameGenderCandidates (string chineseSurnameLatin, string chineseGivenNameLatin, string knownGender)
        {
             ApiResponse<RomanizedNameOut> localVarResponse = ChineseNameGenderCandidatesWithHttpInfo(chineseSurnameLatin, chineseGivenNameLatin, knownGender);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Identify Chinese name candidates, based on the romanized name ex. Wang Xiaoming - having a known gender (&#39;male&#39; or &#39;female&#39;) 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chineseSurnameLatin"></param>
        /// <param name="chineseGivenNameLatin"></param>
        /// <param name="knownGender"></param>
        /// <returns>ApiResponse of RomanizedNameOut</returns>
        public ApiResponse< RomanizedNameOut > ChineseNameGenderCandidatesWithHttpInfo (string chineseSurnameLatin, string chineseGivenNameLatin, string knownGender)
        {
            // verify the required parameter 'chineseSurnameLatin' is set
            if (chineseSurnameLatin == null)
                throw new ApiException(400, "Missing required parameter 'chineseSurnameLatin' when calling ChineseApi->ChineseNameGenderCandidates");
            // verify the required parameter 'chineseGivenNameLatin' is set
            if (chineseGivenNameLatin == null)
                throw new ApiException(400, "Missing required parameter 'chineseGivenNameLatin' when calling ChineseApi->ChineseNameGenderCandidates");
            // verify the required parameter 'knownGender' is set
            if (knownGender == null)
                throw new ApiException(400, "Missing required parameter 'knownGender' when calling ChineseApi->ChineseNameGenderCandidates");

            var localVarPath = "/api2/json/chineseNameGenderCandidates/{chineseSurnameLatin}/{chineseGivenNameLatin}/{knownGender}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (chineseSurnameLatin != null) localVarPathParams.Add("chineseSurnameLatin", this.Configuration.ApiClient.ParameterToString(chineseSurnameLatin)); // path parameter
            if (chineseGivenNameLatin != null) localVarPathParams.Add("chineseGivenNameLatin", this.Configuration.ApiClient.ParameterToString(chineseGivenNameLatin)); // path parameter
            if (knownGender != null) localVarPathParams.Add("knownGender", this.Configuration.ApiClient.ParameterToString(knownGender)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarHeaderParams["X-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-API-KEY");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ChineseNameGenderCandidates", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RomanizedNameOut>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RomanizedNameOut) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RomanizedNameOut)));
        }

        /// <summary>
        /// Identify Chinese name candidates, based on the romanized name ex. Wang Xiaoming - having a known gender (&#39;male&#39; or &#39;female&#39;) 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chineseSurnameLatin"></param>
        /// <param name="chineseGivenNameLatin"></param>
        /// <param name="knownGender"></param>
        /// <returns>Task of RomanizedNameOut</returns>
        public async System.Threading.Tasks.Task<RomanizedNameOut> ChineseNameGenderCandidatesAsync (string chineseSurnameLatin, string chineseGivenNameLatin, string knownGender)
        {
             ApiResponse<RomanizedNameOut> localVarResponse = await ChineseNameGenderCandidatesAsyncWithHttpInfo(chineseSurnameLatin, chineseGivenNameLatin, knownGender);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Identify Chinese name candidates, based on the romanized name ex. Wang Xiaoming - having a known gender (&#39;male&#39; or &#39;female&#39;) 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chineseSurnameLatin"></param>
        /// <param name="chineseGivenNameLatin"></param>
        /// <param name="knownGender"></param>
        /// <returns>Task of ApiResponse (RomanizedNameOut)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RomanizedNameOut>> ChineseNameGenderCandidatesAsyncWithHttpInfo (string chineseSurnameLatin, string chineseGivenNameLatin, string knownGender)
        {
            // verify the required parameter 'chineseSurnameLatin' is set
            if (chineseSurnameLatin == null)
                throw new ApiException(400, "Missing required parameter 'chineseSurnameLatin' when calling ChineseApi->ChineseNameGenderCandidates");
            // verify the required parameter 'chineseGivenNameLatin' is set
            if (chineseGivenNameLatin == null)
                throw new ApiException(400, "Missing required parameter 'chineseGivenNameLatin' when calling ChineseApi->ChineseNameGenderCandidates");
            // verify the required parameter 'knownGender' is set
            if (knownGender == null)
                throw new ApiException(400, "Missing required parameter 'knownGender' when calling ChineseApi->ChineseNameGenderCandidates");

            var localVarPath = "/api2/json/chineseNameGenderCandidates/{chineseSurnameLatin}/{chineseGivenNameLatin}/{knownGender}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (chineseSurnameLatin != null) localVarPathParams.Add("chineseSurnameLatin", this.Configuration.ApiClient.ParameterToString(chineseSurnameLatin)); // path parameter
            if (chineseGivenNameLatin != null) localVarPathParams.Add("chineseGivenNameLatin", this.Configuration.ApiClient.ParameterToString(chineseGivenNameLatin)); // path parameter
            if (knownGender != null) localVarPathParams.Add("knownGender", this.Configuration.ApiClient.ParameterToString(knownGender)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarHeaderParams["X-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-API-KEY");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ChineseNameGenderCandidates", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RomanizedNameOut>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RomanizedNameOut) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RomanizedNameOut)));
        }

        /// <summary>
        /// Return a score for matching Chinese name ex. 王晓明 with a romanized name ex. Wang Xiaoming 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chineseSurnameLatin"></param>
        /// <param name="chineseGivenNameLatin"></param>
        /// <param name="chineseName"></param>
        /// <returns>RomanizedNameOut</returns>
        public RomanizedNameOut ChineseNameMatch (string chineseSurnameLatin, string chineseGivenNameLatin, string chineseName)
        {
             ApiResponse<RomanizedNameOut> localVarResponse = ChineseNameMatchWithHttpInfo(chineseSurnameLatin, chineseGivenNameLatin, chineseName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Return a score for matching Chinese name ex. 王晓明 with a romanized name ex. Wang Xiaoming 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chineseSurnameLatin"></param>
        /// <param name="chineseGivenNameLatin"></param>
        /// <param name="chineseName"></param>
        /// <returns>ApiResponse of RomanizedNameOut</returns>
        public ApiResponse< RomanizedNameOut > ChineseNameMatchWithHttpInfo (string chineseSurnameLatin, string chineseGivenNameLatin, string chineseName)
        {
            // verify the required parameter 'chineseSurnameLatin' is set
            if (chineseSurnameLatin == null)
                throw new ApiException(400, "Missing required parameter 'chineseSurnameLatin' when calling ChineseApi->ChineseNameMatch");
            // verify the required parameter 'chineseGivenNameLatin' is set
            if (chineseGivenNameLatin == null)
                throw new ApiException(400, "Missing required parameter 'chineseGivenNameLatin' when calling ChineseApi->ChineseNameMatch");
            // verify the required parameter 'chineseName' is set
            if (chineseName == null)
                throw new ApiException(400, "Missing required parameter 'chineseName' when calling ChineseApi->ChineseNameMatch");

            var localVarPath = "/api2/json/chineseNameMatch/{chineseSurnameLatin}/{chineseGivenNameLatin}/{chineseName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (chineseSurnameLatin != null) localVarPathParams.Add("chineseSurnameLatin", this.Configuration.ApiClient.ParameterToString(chineseSurnameLatin)); // path parameter
            if (chineseGivenNameLatin != null) localVarPathParams.Add("chineseGivenNameLatin", this.Configuration.ApiClient.ParameterToString(chineseGivenNameLatin)); // path parameter
            if (chineseName != null) localVarPathParams.Add("chineseName", this.Configuration.ApiClient.ParameterToString(chineseName)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarHeaderParams["X-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-API-KEY");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ChineseNameMatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RomanizedNameOut>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RomanizedNameOut) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RomanizedNameOut)));
        }

        /// <summary>
        /// Return a score for matching Chinese name ex. 王晓明 with a romanized name ex. Wang Xiaoming 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chineseSurnameLatin"></param>
        /// <param name="chineseGivenNameLatin"></param>
        /// <param name="chineseName"></param>
        /// <returns>Task of RomanizedNameOut</returns>
        public async System.Threading.Tasks.Task<RomanizedNameOut> ChineseNameMatchAsync (string chineseSurnameLatin, string chineseGivenNameLatin, string chineseName)
        {
             ApiResponse<RomanizedNameOut> localVarResponse = await ChineseNameMatchAsyncWithHttpInfo(chineseSurnameLatin, chineseGivenNameLatin, chineseName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Return a score for matching Chinese name ex. 王晓明 with a romanized name ex. Wang Xiaoming 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chineseSurnameLatin"></param>
        /// <param name="chineseGivenNameLatin"></param>
        /// <param name="chineseName"></param>
        /// <returns>Task of ApiResponse (RomanizedNameOut)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RomanizedNameOut>> ChineseNameMatchAsyncWithHttpInfo (string chineseSurnameLatin, string chineseGivenNameLatin, string chineseName)
        {
            // verify the required parameter 'chineseSurnameLatin' is set
            if (chineseSurnameLatin == null)
                throw new ApiException(400, "Missing required parameter 'chineseSurnameLatin' when calling ChineseApi->ChineseNameMatch");
            // verify the required parameter 'chineseGivenNameLatin' is set
            if (chineseGivenNameLatin == null)
                throw new ApiException(400, "Missing required parameter 'chineseGivenNameLatin' when calling ChineseApi->ChineseNameMatch");
            // verify the required parameter 'chineseName' is set
            if (chineseName == null)
                throw new ApiException(400, "Missing required parameter 'chineseName' when calling ChineseApi->ChineseNameMatch");

            var localVarPath = "/api2/json/chineseNameMatch/{chineseSurnameLatin}/{chineseGivenNameLatin}/{chineseName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (chineseSurnameLatin != null) localVarPathParams.Add("chineseSurnameLatin", this.Configuration.ApiClient.ParameterToString(chineseSurnameLatin)); // path parameter
            if (chineseGivenNameLatin != null) localVarPathParams.Add("chineseGivenNameLatin", this.Configuration.ApiClient.ParameterToString(chineseGivenNameLatin)); // path parameter
            if (chineseName != null) localVarPathParams.Add("chineseName", this.Configuration.ApiClient.ParameterToString(chineseName)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarHeaderParams["X-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-API-KEY");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ChineseNameMatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RomanizedNameOut>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RomanizedNameOut) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RomanizedNameOut)));
        }

        /// <summary>
        /// Identify Chinese name candidates, based on the romanized name (firstName &#x3D; chineseGivenName; lastName&#x3D;chineseSurname), ex. Wang Xiaoming 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchFirstLastNameIn">A list of personal Chinese names in LATIN, firstName &#x3D; chineseGivenName; lastName&#x3D;chineseSurname (optional)</param>
        /// <returns>BatchNameMatchCandidatesOut</returns>
        public BatchNameMatchCandidatesOut ChineseNameMatchBatch (BatchFirstLastNameIn batchFirstLastNameIn = null)
        {
             ApiResponse<BatchNameMatchCandidatesOut> localVarResponse = ChineseNameMatchBatchWithHttpInfo(batchFirstLastNameIn);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Identify Chinese name candidates, based on the romanized name (firstName &#x3D; chineseGivenName; lastName&#x3D;chineseSurname), ex. Wang Xiaoming 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchFirstLastNameIn">A list of personal Chinese names in LATIN, firstName &#x3D; chineseGivenName; lastName&#x3D;chineseSurname (optional)</param>
        /// <returns>ApiResponse of BatchNameMatchCandidatesOut</returns>
        public ApiResponse< BatchNameMatchCandidatesOut > ChineseNameMatchBatchWithHttpInfo (BatchFirstLastNameIn batchFirstLastNameIn = null)
        {

            var localVarPath = "/api2/json/chineseNameMatchBatch";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (batchFirstLastNameIn != null && batchFirstLastNameIn.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(batchFirstLastNameIn); // http body (model) parameter
            }
            else
            {
                localVarPostBody = batchFirstLastNameIn; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarHeaderParams["X-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-API-KEY");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ChineseNameMatchBatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BatchNameMatchCandidatesOut>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BatchNameMatchCandidatesOut) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BatchNameMatchCandidatesOut)));
        }

        /// <summary>
        /// Identify Chinese name candidates, based on the romanized name (firstName &#x3D; chineseGivenName; lastName&#x3D;chineseSurname), ex. Wang Xiaoming 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchFirstLastNameIn">A list of personal Chinese names in LATIN, firstName &#x3D; chineseGivenName; lastName&#x3D;chineseSurname (optional)</param>
        /// <returns>Task of BatchNameMatchCandidatesOut</returns>
        public async System.Threading.Tasks.Task<BatchNameMatchCandidatesOut> ChineseNameMatchBatchAsync (BatchFirstLastNameIn batchFirstLastNameIn = null)
        {
             ApiResponse<BatchNameMatchCandidatesOut> localVarResponse = await ChineseNameMatchBatchAsyncWithHttpInfo(batchFirstLastNameIn);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Identify Chinese name candidates, based on the romanized name (firstName &#x3D; chineseGivenName; lastName&#x3D;chineseSurname), ex. Wang Xiaoming 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchFirstLastNameIn">A list of personal Chinese names in LATIN, firstName &#x3D; chineseGivenName; lastName&#x3D;chineseSurname (optional)</param>
        /// <returns>Task of ApiResponse (BatchNameMatchCandidatesOut)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BatchNameMatchCandidatesOut>> ChineseNameMatchBatchAsyncWithHttpInfo (BatchFirstLastNameIn batchFirstLastNameIn = null)
        {

            var localVarPath = "/api2/json/chineseNameMatchBatch";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (batchFirstLastNameIn != null && batchFirstLastNameIn.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(batchFirstLastNameIn); // http body (model) parameter
            }
            else
            {
                localVarPostBody = batchFirstLastNameIn; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarHeaderParams["X-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-API-KEY");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ChineseNameMatchBatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BatchNameMatchCandidatesOut>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BatchNameMatchCandidatesOut) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BatchNameMatchCandidatesOut)));
        }

        /// <summary>
        /// Infer the likely gender of a Chinese full name ex. 王晓明 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chineseName"></param>
        /// <returns>PersonalNameGenderedOut</returns>
        public PersonalNameGenderedOut GenderChineseName (string chineseName)
        {
             ApiResponse<PersonalNameGenderedOut> localVarResponse = GenderChineseNameWithHttpInfo(chineseName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Infer the likely gender of a Chinese full name ex. 王晓明 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chineseName"></param>
        /// <returns>ApiResponse of PersonalNameGenderedOut</returns>
        public ApiResponse< PersonalNameGenderedOut > GenderChineseNameWithHttpInfo (string chineseName)
        {
            // verify the required parameter 'chineseName' is set
            if (chineseName == null)
                throw new ApiException(400, "Missing required parameter 'chineseName' when calling ChineseApi->GenderChineseName");

            var localVarPath = "/api2/json/genderChineseName/{chineseName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (chineseName != null) localVarPathParams.Add("chineseName", this.Configuration.ApiClient.ParameterToString(chineseName)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarHeaderParams["X-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-API-KEY");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GenderChineseName", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PersonalNameGenderedOut>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PersonalNameGenderedOut) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PersonalNameGenderedOut)));
        }

        /// <summary>
        /// Infer the likely gender of a Chinese full name ex. 王晓明 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chineseName"></param>
        /// <returns>Task of PersonalNameGenderedOut</returns>
        public async System.Threading.Tasks.Task<PersonalNameGenderedOut> GenderChineseNameAsync (string chineseName)
        {
             ApiResponse<PersonalNameGenderedOut> localVarResponse = await GenderChineseNameAsyncWithHttpInfo(chineseName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Infer the likely gender of a Chinese full name ex. 王晓明 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chineseName"></param>
        /// <returns>Task of ApiResponse (PersonalNameGenderedOut)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PersonalNameGenderedOut>> GenderChineseNameAsyncWithHttpInfo (string chineseName)
        {
            // verify the required parameter 'chineseName' is set
            if (chineseName == null)
                throw new ApiException(400, "Missing required parameter 'chineseName' when calling ChineseApi->GenderChineseName");

            var localVarPath = "/api2/json/genderChineseName/{chineseName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (chineseName != null) localVarPathParams.Add("chineseName", this.Configuration.ApiClient.ParameterToString(chineseName)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarHeaderParams["X-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-API-KEY");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GenderChineseName", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PersonalNameGenderedOut>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PersonalNameGenderedOut) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PersonalNameGenderedOut)));
        }

        /// <summary>
        /// Infer the likely gender of up to 100 full names ex. 王晓明 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchPersonalNameIn">A list of personal names, with a country ISO2 code (optional)</param>
        /// <returns>BatchPersonalNameGenderedOut</returns>
        public BatchPersonalNameGenderedOut GenderChineseNameBatch (BatchPersonalNameIn batchPersonalNameIn = null)
        {
             ApiResponse<BatchPersonalNameGenderedOut> localVarResponse = GenderChineseNameBatchWithHttpInfo(batchPersonalNameIn);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Infer the likely gender of up to 100 full names ex. 王晓明 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchPersonalNameIn">A list of personal names, with a country ISO2 code (optional)</param>
        /// <returns>ApiResponse of BatchPersonalNameGenderedOut</returns>
        public ApiResponse< BatchPersonalNameGenderedOut > GenderChineseNameBatchWithHttpInfo (BatchPersonalNameIn batchPersonalNameIn = null)
        {

            var localVarPath = "/api2/json/genderChineseNameBatch";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (batchPersonalNameIn != null && batchPersonalNameIn.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(batchPersonalNameIn); // http body (model) parameter
            }
            else
            {
                localVarPostBody = batchPersonalNameIn; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarHeaderParams["X-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-API-KEY");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GenderChineseNameBatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BatchPersonalNameGenderedOut>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BatchPersonalNameGenderedOut) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BatchPersonalNameGenderedOut)));
        }

        /// <summary>
        /// Infer the likely gender of up to 100 full names ex. 王晓明 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchPersonalNameIn">A list of personal names, with a country ISO2 code (optional)</param>
        /// <returns>Task of BatchPersonalNameGenderedOut</returns>
        public async System.Threading.Tasks.Task<BatchPersonalNameGenderedOut> GenderChineseNameBatchAsync (BatchPersonalNameIn batchPersonalNameIn = null)
        {
             ApiResponse<BatchPersonalNameGenderedOut> localVarResponse = await GenderChineseNameBatchAsyncWithHttpInfo(batchPersonalNameIn);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Infer the likely gender of up to 100 full names ex. 王晓明 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchPersonalNameIn">A list of personal names, with a country ISO2 code (optional)</param>
        /// <returns>Task of ApiResponse (BatchPersonalNameGenderedOut)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BatchPersonalNameGenderedOut>> GenderChineseNameBatchAsyncWithHttpInfo (BatchPersonalNameIn batchPersonalNameIn = null)
        {

            var localVarPath = "/api2/json/genderChineseNameBatch";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (batchPersonalNameIn != null && batchPersonalNameIn.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(batchPersonalNameIn); // http body (model) parameter
            }
            else
            {
                localVarPostBody = batchPersonalNameIn; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarHeaderParams["X-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-API-KEY");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GenderChineseNameBatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BatchPersonalNameGenderedOut>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BatchPersonalNameGenderedOut) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BatchPersonalNameGenderedOut)));
        }

        /// <summary>
        /// Infer the likely gender of a Chinese name in LATIN (Pinyin). 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chineseSurnameLatin"></param>
        /// <param name="chineseGivenNameLatin"></param>
        /// <returns>FirstLastNameGenderedOut</returns>
        public FirstLastNameGenderedOut GenderChineseNamePinyin (string chineseSurnameLatin, string chineseGivenNameLatin)
        {
             ApiResponse<FirstLastNameGenderedOut> localVarResponse = GenderChineseNamePinyinWithHttpInfo(chineseSurnameLatin, chineseGivenNameLatin);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Infer the likely gender of a Chinese name in LATIN (Pinyin). 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chineseSurnameLatin"></param>
        /// <param name="chineseGivenNameLatin"></param>
        /// <returns>ApiResponse of FirstLastNameGenderedOut</returns>
        public ApiResponse< FirstLastNameGenderedOut > GenderChineseNamePinyinWithHttpInfo (string chineseSurnameLatin, string chineseGivenNameLatin)
        {
            // verify the required parameter 'chineseSurnameLatin' is set
            if (chineseSurnameLatin == null)
                throw new ApiException(400, "Missing required parameter 'chineseSurnameLatin' when calling ChineseApi->GenderChineseNamePinyin");
            // verify the required parameter 'chineseGivenNameLatin' is set
            if (chineseGivenNameLatin == null)
                throw new ApiException(400, "Missing required parameter 'chineseGivenNameLatin' when calling ChineseApi->GenderChineseNamePinyin");

            var localVarPath = "/api2/json/genderChineseNamePinyin/{chineseSurnameLatin}/{chineseGivenNameLatin}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (chineseSurnameLatin != null) localVarPathParams.Add("chineseSurnameLatin", this.Configuration.ApiClient.ParameterToString(chineseSurnameLatin)); // path parameter
            if (chineseGivenNameLatin != null) localVarPathParams.Add("chineseGivenNameLatin", this.Configuration.ApiClient.ParameterToString(chineseGivenNameLatin)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarHeaderParams["X-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-API-KEY");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GenderChineseNamePinyin", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FirstLastNameGenderedOut>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FirstLastNameGenderedOut) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FirstLastNameGenderedOut)));
        }

        /// <summary>
        /// Infer the likely gender of a Chinese name in LATIN (Pinyin). 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chineseSurnameLatin"></param>
        /// <param name="chineseGivenNameLatin"></param>
        /// <returns>Task of FirstLastNameGenderedOut</returns>
        public async System.Threading.Tasks.Task<FirstLastNameGenderedOut> GenderChineseNamePinyinAsync (string chineseSurnameLatin, string chineseGivenNameLatin)
        {
             ApiResponse<FirstLastNameGenderedOut> localVarResponse = await GenderChineseNamePinyinAsyncWithHttpInfo(chineseSurnameLatin, chineseGivenNameLatin);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Infer the likely gender of a Chinese name in LATIN (Pinyin). 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chineseSurnameLatin"></param>
        /// <param name="chineseGivenNameLatin"></param>
        /// <returns>Task of ApiResponse (FirstLastNameGenderedOut)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FirstLastNameGenderedOut>> GenderChineseNamePinyinAsyncWithHttpInfo (string chineseSurnameLatin, string chineseGivenNameLatin)
        {
            // verify the required parameter 'chineseSurnameLatin' is set
            if (chineseSurnameLatin == null)
                throw new ApiException(400, "Missing required parameter 'chineseSurnameLatin' when calling ChineseApi->GenderChineseNamePinyin");
            // verify the required parameter 'chineseGivenNameLatin' is set
            if (chineseGivenNameLatin == null)
                throw new ApiException(400, "Missing required parameter 'chineseGivenNameLatin' when calling ChineseApi->GenderChineseNamePinyin");

            var localVarPath = "/api2/json/genderChineseNamePinyin/{chineseSurnameLatin}/{chineseGivenNameLatin}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (chineseSurnameLatin != null) localVarPathParams.Add("chineseSurnameLatin", this.Configuration.ApiClient.ParameterToString(chineseSurnameLatin)); // path parameter
            if (chineseGivenNameLatin != null) localVarPathParams.Add("chineseGivenNameLatin", this.Configuration.ApiClient.ParameterToString(chineseGivenNameLatin)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarHeaderParams["X-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-API-KEY");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GenderChineseNamePinyin", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FirstLastNameGenderedOut>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FirstLastNameGenderedOut) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FirstLastNameGenderedOut)));
        }

        /// <summary>
        /// Infer the likely gender of up to 100 Chinese names in LATIN (Pinyin). 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchFirstLastNameIn">A list of names, with country code. (optional)</param>
        /// <returns>BatchFirstLastNameGenderedOut</returns>
        public BatchFirstLastNameGenderedOut GenderChineseNamePinyinBatch (BatchFirstLastNameIn batchFirstLastNameIn = null)
        {
             ApiResponse<BatchFirstLastNameGenderedOut> localVarResponse = GenderChineseNamePinyinBatchWithHttpInfo(batchFirstLastNameIn);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Infer the likely gender of up to 100 Chinese names in LATIN (Pinyin). 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchFirstLastNameIn">A list of names, with country code. (optional)</param>
        /// <returns>ApiResponse of BatchFirstLastNameGenderedOut</returns>
        public ApiResponse< BatchFirstLastNameGenderedOut > GenderChineseNamePinyinBatchWithHttpInfo (BatchFirstLastNameIn batchFirstLastNameIn = null)
        {

            var localVarPath = "/api2/json/genderChineseNamePinyinBatch";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (batchFirstLastNameIn != null && batchFirstLastNameIn.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(batchFirstLastNameIn); // http body (model) parameter
            }
            else
            {
                localVarPostBody = batchFirstLastNameIn; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarHeaderParams["X-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-API-KEY");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GenderChineseNamePinyinBatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BatchFirstLastNameGenderedOut>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BatchFirstLastNameGenderedOut) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BatchFirstLastNameGenderedOut)));
        }

        /// <summary>
        /// Infer the likely gender of up to 100 Chinese names in LATIN (Pinyin). 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchFirstLastNameIn">A list of names, with country code. (optional)</param>
        /// <returns>Task of BatchFirstLastNameGenderedOut</returns>
        public async System.Threading.Tasks.Task<BatchFirstLastNameGenderedOut> GenderChineseNamePinyinBatchAsync (BatchFirstLastNameIn batchFirstLastNameIn = null)
        {
             ApiResponse<BatchFirstLastNameGenderedOut> localVarResponse = await GenderChineseNamePinyinBatchAsyncWithHttpInfo(batchFirstLastNameIn);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Infer the likely gender of up to 100 Chinese names in LATIN (Pinyin). 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchFirstLastNameIn">A list of names, with country code. (optional)</param>
        /// <returns>Task of ApiResponse (BatchFirstLastNameGenderedOut)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BatchFirstLastNameGenderedOut>> GenderChineseNamePinyinBatchAsyncWithHttpInfo (BatchFirstLastNameIn batchFirstLastNameIn = null)
        {

            var localVarPath = "/api2/json/genderChineseNamePinyinBatch";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (batchFirstLastNameIn != null && batchFirstLastNameIn.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(batchFirstLastNameIn); // http body (model) parameter
            }
            else
            {
                localVarPostBody = batchFirstLastNameIn; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarHeaderParams["X-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-API-KEY");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GenderChineseNamePinyinBatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BatchFirstLastNameGenderedOut>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BatchFirstLastNameGenderedOut) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BatchFirstLastNameGenderedOut)));
        }

        /// <summary>
        /// Infer the likely first/last name structure of a name, ex. 王晓明 -&gt; 王(surname) 晓明(given name) 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chineseName"></param>
        /// <returns>PersonalNameParsedOut</returns>
        public PersonalNameParsedOut ParseChineseName (string chineseName)
        {
             ApiResponse<PersonalNameParsedOut> localVarResponse = ParseChineseNameWithHttpInfo(chineseName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Infer the likely first/last name structure of a name, ex. 王晓明 -&gt; 王(surname) 晓明(given name) 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chineseName"></param>
        /// <returns>ApiResponse of PersonalNameParsedOut</returns>
        public ApiResponse< PersonalNameParsedOut > ParseChineseNameWithHttpInfo (string chineseName)
        {
            // verify the required parameter 'chineseName' is set
            if (chineseName == null)
                throw new ApiException(400, "Missing required parameter 'chineseName' when calling ChineseApi->ParseChineseName");

            var localVarPath = "/api2/json/parseChineseName/{chineseName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (chineseName != null) localVarPathParams.Add("chineseName", this.Configuration.ApiClient.ParameterToString(chineseName)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarHeaderParams["X-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-API-KEY");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ParseChineseName", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PersonalNameParsedOut>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PersonalNameParsedOut) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PersonalNameParsedOut)));
        }

        /// <summary>
        /// Infer the likely first/last name structure of a name, ex. 王晓明 -&gt; 王(surname) 晓明(given name) 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chineseName"></param>
        /// <returns>Task of PersonalNameParsedOut</returns>
        public async System.Threading.Tasks.Task<PersonalNameParsedOut> ParseChineseNameAsync (string chineseName)
        {
             ApiResponse<PersonalNameParsedOut> localVarResponse = await ParseChineseNameAsyncWithHttpInfo(chineseName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Infer the likely first/last name structure of a name, ex. 王晓明 -&gt; 王(surname) 晓明(given name) 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chineseName"></param>
        /// <returns>Task of ApiResponse (PersonalNameParsedOut)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PersonalNameParsedOut>> ParseChineseNameAsyncWithHttpInfo (string chineseName)
        {
            // verify the required parameter 'chineseName' is set
            if (chineseName == null)
                throw new ApiException(400, "Missing required parameter 'chineseName' when calling ChineseApi->ParseChineseName");

            var localVarPath = "/api2/json/parseChineseName/{chineseName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (chineseName != null) localVarPathParams.Add("chineseName", this.Configuration.ApiClient.ParameterToString(chineseName)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarHeaderParams["X-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-API-KEY");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ParseChineseName", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PersonalNameParsedOut>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PersonalNameParsedOut) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PersonalNameParsedOut)));
        }

        /// <summary>
        /// Infer the likely first/last name structure of a name, ex. 王晓明 -&gt; 王(surname) 晓明(given name). 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchPersonalNameIn">A list of personal names (optional)</param>
        /// <returns>BatchPersonalNameParsedOut</returns>
        public BatchPersonalNameParsedOut ParseChineseNameBatch (BatchPersonalNameIn batchPersonalNameIn = null)
        {
             ApiResponse<BatchPersonalNameParsedOut> localVarResponse = ParseChineseNameBatchWithHttpInfo(batchPersonalNameIn);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Infer the likely first/last name structure of a name, ex. 王晓明 -&gt; 王(surname) 晓明(given name). 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchPersonalNameIn">A list of personal names (optional)</param>
        /// <returns>ApiResponse of BatchPersonalNameParsedOut</returns>
        public ApiResponse< BatchPersonalNameParsedOut > ParseChineseNameBatchWithHttpInfo (BatchPersonalNameIn batchPersonalNameIn = null)
        {

            var localVarPath = "/api2/json/parseChineseNameBatch";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (batchPersonalNameIn != null && batchPersonalNameIn.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(batchPersonalNameIn); // http body (model) parameter
            }
            else
            {
                localVarPostBody = batchPersonalNameIn; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarHeaderParams["X-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-API-KEY");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ParseChineseNameBatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BatchPersonalNameParsedOut>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BatchPersonalNameParsedOut) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BatchPersonalNameParsedOut)));
        }

        /// <summary>
        /// Infer the likely first/last name structure of a name, ex. 王晓明 -&gt; 王(surname) 晓明(given name). 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchPersonalNameIn">A list of personal names (optional)</param>
        /// <returns>Task of BatchPersonalNameParsedOut</returns>
        public async System.Threading.Tasks.Task<BatchPersonalNameParsedOut> ParseChineseNameBatchAsync (BatchPersonalNameIn batchPersonalNameIn = null)
        {
             ApiResponse<BatchPersonalNameParsedOut> localVarResponse = await ParseChineseNameBatchAsyncWithHttpInfo(batchPersonalNameIn);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Infer the likely first/last name structure of a name, ex. 王晓明 -&gt; 王(surname) 晓明(given name). 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchPersonalNameIn">A list of personal names (optional)</param>
        /// <returns>Task of ApiResponse (BatchPersonalNameParsedOut)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BatchPersonalNameParsedOut>> ParseChineseNameBatchAsyncWithHttpInfo (BatchPersonalNameIn batchPersonalNameIn = null)
        {

            var localVarPath = "/api2/json/parseChineseNameBatch";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (batchPersonalNameIn != null && batchPersonalNameIn.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(batchPersonalNameIn); // http body (model) parameter
            }
            else
            {
                localVarPostBody = batchPersonalNameIn; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarHeaderParams["X-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-API-KEY");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ParseChineseNameBatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BatchPersonalNameParsedOut>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BatchPersonalNameParsedOut) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BatchPersonalNameParsedOut)));
        }

        /// <summary>
        /// Romanize the Chinese name to Pinyin, ex. 王晓明 -&gt; Wang (surname) Xiaoming (given name) 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chineseName"></param>
        /// <returns>PersonalNameParsedOut</returns>
        public PersonalNameParsedOut PinyinChineseName (string chineseName)
        {
             ApiResponse<PersonalNameParsedOut> localVarResponse = PinyinChineseNameWithHttpInfo(chineseName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Romanize the Chinese name to Pinyin, ex. 王晓明 -&gt; Wang (surname) Xiaoming (given name) 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chineseName"></param>
        /// <returns>ApiResponse of PersonalNameParsedOut</returns>
        public ApiResponse< PersonalNameParsedOut > PinyinChineseNameWithHttpInfo (string chineseName)
        {
            // verify the required parameter 'chineseName' is set
            if (chineseName == null)
                throw new ApiException(400, "Missing required parameter 'chineseName' when calling ChineseApi->PinyinChineseName");

            var localVarPath = "/api2/json/pinyinChineseName/{chineseName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (chineseName != null) localVarPathParams.Add("chineseName", this.Configuration.ApiClient.ParameterToString(chineseName)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarHeaderParams["X-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-API-KEY");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PinyinChineseName", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PersonalNameParsedOut>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PersonalNameParsedOut) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PersonalNameParsedOut)));
        }

        /// <summary>
        /// Romanize the Chinese name to Pinyin, ex. 王晓明 -&gt; Wang (surname) Xiaoming (given name) 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chineseName"></param>
        /// <returns>Task of PersonalNameParsedOut</returns>
        public async System.Threading.Tasks.Task<PersonalNameParsedOut> PinyinChineseNameAsync (string chineseName)
        {
             ApiResponse<PersonalNameParsedOut> localVarResponse = await PinyinChineseNameAsyncWithHttpInfo(chineseName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Romanize the Chinese name to Pinyin, ex. 王晓明 -&gt; Wang (surname) Xiaoming (given name) 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chineseName"></param>
        /// <returns>Task of ApiResponse (PersonalNameParsedOut)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PersonalNameParsedOut>> PinyinChineseNameAsyncWithHttpInfo (string chineseName)
        {
            // verify the required parameter 'chineseName' is set
            if (chineseName == null)
                throw new ApiException(400, "Missing required parameter 'chineseName' when calling ChineseApi->PinyinChineseName");

            var localVarPath = "/api2/json/pinyinChineseName/{chineseName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (chineseName != null) localVarPathParams.Add("chineseName", this.Configuration.ApiClient.ParameterToString(chineseName)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarHeaderParams["X-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-API-KEY");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PinyinChineseName", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PersonalNameParsedOut>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PersonalNameParsedOut) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PersonalNameParsedOut)));
        }

        /// <summary>
        /// Romanize a list of Chinese name to Pinyin, ex. 王晓明 -&gt; Wang (surname) Xiaoming (given name). 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchPersonalNameIn">A list of Chinese names (optional)</param>
        /// <returns>BatchPersonalNameParsedOut</returns>
        public BatchPersonalNameParsedOut PinyinChineseNameBatch (BatchPersonalNameIn batchPersonalNameIn = null)
        {
             ApiResponse<BatchPersonalNameParsedOut> localVarResponse = PinyinChineseNameBatchWithHttpInfo(batchPersonalNameIn);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Romanize a list of Chinese name to Pinyin, ex. 王晓明 -&gt; Wang (surname) Xiaoming (given name). 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchPersonalNameIn">A list of Chinese names (optional)</param>
        /// <returns>ApiResponse of BatchPersonalNameParsedOut</returns>
        public ApiResponse< BatchPersonalNameParsedOut > PinyinChineseNameBatchWithHttpInfo (BatchPersonalNameIn batchPersonalNameIn = null)
        {

            var localVarPath = "/api2/json/pinyinChineseNameBatch";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (batchPersonalNameIn != null && batchPersonalNameIn.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(batchPersonalNameIn); // http body (model) parameter
            }
            else
            {
                localVarPostBody = batchPersonalNameIn; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarHeaderParams["X-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-API-KEY");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PinyinChineseNameBatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BatchPersonalNameParsedOut>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BatchPersonalNameParsedOut) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BatchPersonalNameParsedOut)));
        }

        /// <summary>
        /// Romanize a list of Chinese name to Pinyin, ex. 王晓明 -&gt; Wang (surname) Xiaoming (given name). 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchPersonalNameIn">A list of Chinese names (optional)</param>
        /// <returns>Task of BatchPersonalNameParsedOut</returns>
        public async System.Threading.Tasks.Task<BatchPersonalNameParsedOut> PinyinChineseNameBatchAsync (BatchPersonalNameIn batchPersonalNameIn = null)
        {
             ApiResponse<BatchPersonalNameParsedOut> localVarResponse = await PinyinChineseNameBatchAsyncWithHttpInfo(batchPersonalNameIn);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Romanize a list of Chinese name to Pinyin, ex. 王晓明 -&gt; Wang (surname) Xiaoming (given name). 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchPersonalNameIn">A list of Chinese names (optional)</param>
        /// <returns>Task of ApiResponse (BatchPersonalNameParsedOut)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BatchPersonalNameParsedOut>> PinyinChineseNameBatchAsyncWithHttpInfo (BatchPersonalNameIn batchPersonalNameIn = null)
        {

            var localVarPath = "/api2/json/pinyinChineseNameBatch";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (batchPersonalNameIn != null && batchPersonalNameIn.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(batchPersonalNameIn); // http body (model) parameter
            }
            else
            {
                localVarPostBody = batchPersonalNameIn; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarHeaderParams["X-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-API-KEY");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PinyinChineseNameBatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BatchPersonalNameParsedOut>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BatchPersonalNameParsedOut) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BatchPersonalNameParsedOut)));
        }

    }
}
