/* 
 * NamSor API v2
 *
 * NamSor API v2 : enpoints to process personal names (gender, cultural origin or ethnicity) in all alphabets or languages. Use GET methods for small tests, but prefer POST methods for higher throughput (batch processing of up to 100 names at a time). Need something you can't find here? We have many more features coming soon. Let us know, we'll do our best to add it! 
 *
 * OpenAPI spec version: 2.0.4
 * Contact: contact@namsor.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.com.namsor.sdk2.model;

namespace Org.OpenAPITools.com.namsor.sdk2.api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAdminApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Add usage credits to an API Key.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="usageCredits"></param>
        /// <param name="userMessage"></param>
        /// <returns>SystemMetricsOut</returns>
        SystemMetricsOut AddCredits (string apiKey, long? usageCredits, string userMessage);

        /// <summary>
        /// Add usage credits to an API Key.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="usageCredits"></param>
        /// <param name="userMessage"></param>
        /// <returns>ApiResponse of SystemMetricsOut</returns>
        ApiResponse<SystemMetricsOut> AddCreditsWithHttpInfo (string apiKey, long? usageCredits, string userMessage);
        /// <summary>
        /// Activate/deactivate anonymization for a source.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="source"></param>
        /// <param name="anonymized"></param>
        /// <returns></returns>
        void Anonymize (string source, bool? anonymized);

        /// <summary>
        /// Activate/deactivate anonymization for a source.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="source"></param>
        /// <param name="anonymized"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AnonymizeWithHttpInfo (string source, bool? anonymized);
        /// <summary>
        /// Print current API usage.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>APIPeriodUsageOut</returns>
        APIPeriodUsageOut ApiUsage ();

        /// <summary>
        /// Print current API usage.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of APIPeriodUsageOut</returns>
        ApiResponse<APIPeriodUsageOut> ApiUsageWithHttpInfo ();
        /// <summary>
        /// Print historical API usage.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>APIPeriodUsageOut</returns>
        APIPeriodUsageOut ApiUsageHistory ();

        /// <summary>
        /// Print historical API usage.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of APIPeriodUsageOut</returns>
        ApiResponse<APIPeriodUsageOut> ApiUsageHistoryWithHttpInfo ();
        /// <summary>
        /// Print historical API usage (in an aggregated view, by service, by day/hour/min).
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>APIPeriodUsageOut</returns>
        APIPeriodUsageOut ApiUsageHistoryAggregate ();

        /// <summary>
        /// Print historical API usage (in an aggregated view, by service, by day/hour/min).
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of APIPeriodUsageOut</returns>
        ApiResponse<APIPeriodUsageOut> ApiUsageHistoryAggregateWithHttpInfo ();
        /// <summary>
        /// List all available plans in the user&#39;s preferred currency.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token"></param>
        /// <returns>APIPlansOut</returns>
        APIPlansOut AvailablePlans (string token);

        /// <summary>
        /// List all available plans in the user&#39;s preferred currency.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token"></param>
        /// <returns>ApiResponse of APIPlansOut</returns>
        ApiResponse<APIPlansOut> AvailablePlansWithHttpInfo (string token);
        /// <summary>
        /// List all available plans in the default currency (usd).
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>APIPlansOut</returns>
        APIPlansOut AvailablePlans1 ();

        /// <summary>
        /// List all available plans in the default currency (usd).
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of APIPlansOut</returns>
        ApiResponse<APIPlansOut> AvailablePlans1WithHttpInfo ();
        /// <summary>
        /// List of API services and usage cost in Units (default is 1&#x3D;ONE Unit).
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>APIPlansOut</returns>
        APIPlansOut AvailableServices ();

        /// <summary>
        /// List of API services and usage cost in Units (default is 1&#x3D;ONE Unit).
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of APIPlansOut</returns>
        ApiResponse<APIPlansOut> AvailableServicesWithHttpInfo ();
        /// <summary>
        /// List possible currency options for billing (USD, EUR, GBP, ...)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>CurrenciesOut</returns>
        CurrenciesOut BillingCurrencies ();

        /// <summary>
        /// List possible currency options for billing (USD, EUR, GBP, ...)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of CurrenciesOut</returns>
        ApiResponse<CurrenciesOut> BillingCurrenciesWithHttpInfo ();
        /// <summary>
        /// Read the history billing information (invoices paid via Stripe or manually).
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token"></param>
        /// <returns>BillingHistoryOut</returns>
        BillingHistoryOut BillingHistory (string token);

        /// <summary>
        /// Read the history billing information (invoices paid via Stripe or manually).
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token"></param>
        /// <returns>ApiResponse of BillingHistoryOut</returns>
        ApiResponse<BillingHistoryOut> BillingHistoryWithHttpInfo (string token);
        /// <summary>
        /// Read the billing information (company name, address, phone, vat ID)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token"></param>
        /// <returns>BillingInfoInOut</returns>
        BillingInfoInOut BillingInfo (string token);

        /// <summary>
        /// Read the billing information (company name, address, phone, vat ID)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token"></param>
        /// <returns>ApiResponse of BillingInfoInOut</returns>
        ApiResponse<BillingInfoInOut> BillingInfoWithHttpInfo (string token);
        /// <summary>
        /// Create a Stripe Customer, based on a payment card token (from secure StripeJS) and email.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject"> (optional)</param>
        /// <returns>APIKeyOut</returns>
        APIKeyOut Charge (InlineObject inlineObject = null);

        /// <summary>
        /// Create a Stripe Customer, based on a payment card token (from secure StripeJS) and email.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject"> (optional)</param>
        /// <returns>ApiResponse of APIKeyOut</returns>
        ApiResponse<APIKeyOut> ChargeWithHttpInfo (InlineObject inlineObject = null);
        /// <summary>
        /// Setting an API Key to a corporate status.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="corporate"></param>
        /// <returns></returns>
        void CorporateKey (string apiKey, bool? corporate);

        /// <summary>
        /// Setting an API Key to a corporate status.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="corporate"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CorporateKeyWithHttpInfo (string apiKey, bool? corporate);
        /// <summary>
        /// Update debug level for a classifier
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="logger"></param>
        /// <param name="level"></param>
        /// <returns></returns>
        void DebugLevel (string logger, string level);

        /// <summary>
        /// Update debug level for a classifier
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="logger"></param>
        /// <param name="level"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DebugLevelWithHttpInfo (string logger, string level);
        /// <summary>
        /// Flush counters.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        void Flush ();

        /// <summary>
        /// Flush counters.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> FlushWithHttpInfo ();
        /// <summary>
        /// Invalidate system caches.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        void InvalidateCache ();

        /// <summary>
        /// Invalidate system caches.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> InvalidateCacheWithHttpInfo ();
        /// <summary>
        /// Activate/deactivate learning from a source.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="source"></param>
        /// <param name="learnable"></param>
        /// <returns></returns>
        void Learnable (string source, bool? learnable);

        /// <summary>
        /// Activate/deactivate learning from a source.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="source"></param>
        /// <param name="learnable"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> LearnableWithHttpInfo (string source, bool? learnable);
        /// <summary>
        /// Get the overall API counter
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>SoftwareVersionOut</returns>
        SoftwareVersionOut NamsorCounter ();

        /// <summary>
        /// Get the overall API counter
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of SoftwareVersionOut</returns>
        ApiResponse<SoftwareVersionOut> NamsorCounterWithHttpInfo ();
        /// <summary>
        /// Get the Stripe payment information associated with the current google auth session token.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token"></param>
        /// <returns>APIKeyOut</returns>
        APIKeyOut PaymentInfo (string token);

        /// <summary>
        /// Get the Stripe payment information associated with the current google auth session token.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token"></param>
        /// <returns>ApiResponse of APIKeyOut</returns>
        ApiResponse<APIKeyOut> PaymentInfoWithHttpInfo (string token);
        /// <summary>
        /// Procure an API Key (sent via Email), based on an auth token. Keep your API Key secret.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token"></param>
        /// <returns>APIKeyOut</returns>
        APIKeyOut ProcureKey (string token);

        /// <summary>
        /// Procure an API Key (sent via Email), based on an auth token. Keep your API Key secret.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token"></param>
        /// <returns>ApiResponse of APIKeyOut</returns>
        ApiResponse<APIKeyOut> ProcureKeyWithHttpInfo (string token);
        /// <summary>
        /// Redeploy UI from current dev branch.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="live"></param>
        /// <returns></returns>
        void RedeployUI (bool? live);

        /// <summary>
        /// Redeploy UI from current dev branch.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="live"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RedeployUIWithHttpInfo (bool? live);
        /// <summary>
        /// Redeploy UI from current dev branch.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        void RedeployUI1 ();

        /// <summary>
        /// Redeploy UI from current dev branch.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RedeployUI1WithHttpInfo ();
        /// <summary>
        /// Remove the user account.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token"></param>
        /// <returns>APIPlanSubscriptionOut</returns>
        APIPlanSubscriptionOut RemoveUserAccount (string token);

        /// <summary>
        /// Remove the user account.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token"></param>
        /// <returns>ApiResponse of APIPlanSubscriptionOut</returns>
        ApiResponse<APIPlanSubscriptionOut> RemoveUserAccountWithHttpInfo (string token);
        /// <summary>
        /// Remove (on behalf) a user account.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <returns>APIPlanSubscriptionOut</returns>
        APIPlanSubscriptionOut RemoveUserAccountOnBehalf (string apiKey);

        /// <summary>
        /// Remove (on behalf) a user account.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <returns>ApiResponse of APIPlanSubscriptionOut</returns>
        ApiResponse<APIPlanSubscriptionOut> RemoveUserAccountOnBehalfWithHttpInfo (string apiKey);
        /// <summary>
        /// Stop learning and shutdown system.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        void Shutdown ();

        /// <summary>
        /// Stop learning and shutdown system.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ShutdownWithHttpInfo ();
        /// <summary>
        /// Get the current software version
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>SoftwareVersionOut</returns>
        SoftwareVersionOut SoftwareVersion ();

        /// <summary>
        /// Get the current software version
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of SoftwareVersionOut</returns>
        ApiResponse<SoftwareVersionOut> SoftwareVersionWithHttpInfo ();
        /// <summary>
        /// Print basic source statistics.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="source"></param>
        /// <returns>SystemMetricsOut</returns>
        SystemMetricsOut SourceStats (string source);

        /// <summary>
        /// Print basic source statistics.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="source"></param>
        /// <returns>ApiResponse of SystemMetricsOut</returns>
        ApiResponse<SystemMetricsOut> SourceStatsWithHttpInfo (string source);
        /// <summary>
        /// Print basic system statistics.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>SystemMetricsOut</returns>
        SystemMetricsOut Stats ();

        /// <summary>
        /// Print basic system statistics.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of SystemMetricsOut</returns>
        ApiResponse<SystemMetricsOut> StatsWithHttpInfo ();
        /// <summary>
        /// Connects a Stripe Account.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope"> (optional)</param>
        /// <param name="code"> (optional)</param>
        /// <param name="error"> (optional)</param>
        /// <param name="errorDescription"> (optional)</param>
        /// <returns></returns>
        void StripeConnect (string scope = null, string code = null, string error = null, string errorDescription = null);

        /// <summary>
        /// Connects a Stripe Account.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope"> (optional)</param>
        /// <param name="code"> (optional)</param>
        /// <param name="error"> (optional)</param>
        /// <param name="errorDescription"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> StripeConnectWithHttpInfo (string scope = null, string code = null, string error = null, string errorDescription = null);
        /// <summary>
        /// Subscribe to a give API plan, using the user&#39;s preferred or default currency.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="planName"></param>
        /// <param name="token"></param>
        /// <returns>APIPlanSubscriptionOut</returns>
        APIPlanSubscriptionOut SubscribePlan (string planName, string token);

        /// <summary>
        /// Subscribe to a give API plan, using the user&#39;s preferred or default currency.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="planName"></param>
        /// <param name="token"></param>
        /// <returns>ApiResponse of APIPlanSubscriptionOut</returns>
        ApiResponse<APIPlanSubscriptionOut> SubscribePlanWithHttpInfo (string planName, string token);
        /// <summary>
        /// Subscribe to a give API plan, using the user&#39;s preferred or default currency (admin only).
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="planName"></param>
        /// <param name="apiKey"></param>
        /// <returns>APIPlanSubscriptionOut</returns>
        APIPlanSubscriptionOut SubscribePlanOnBehalf (string planName, string apiKey);

        /// <summary>
        /// Subscribe to a give API plan, using the user&#39;s preferred or default currency (admin only).
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="planName"></param>
        /// <param name="apiKey"></param>
        /// <returns>ApiResponse of APIPlanSubscriptionOut</returns>
        ApiResponse<APIPlanSubscriptionOut> SubscribePlanOnBehalfWithHttpInfo (string planName, string apiKey);
        /// <summary>
        /// Sets or update the billing information (company name, address, phone, vat ID)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token"></param>
        /// <param name="billingInfoInOut"> (optional)</param>
        /// <returns>BillingInfoInOut</returns>
        BillingInfoInOut UpdateBillingInfo (string token, BillingInfoInOut billingInfoInOut = null);

        /// <summary>
        /// Sets or update the billing information (company name, address, phone, vat ID)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token"></param>
        /// <param name="billingInfoInOut"> (optional)</param>
        /// <returns>ApiResponse of BillingInfoInOut</returns>
        ApiResponse<BillingInfoInOut> UpdateBillingInfoWithHttpInfo (string token, BillingInfoInOut billingInfoInOut = null);
        /// <summary>
        /// Modifies the hard/soft limit on the API plan&#39;s overages (default is 0$ soft limit).
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="usageLimit"></param>
        /// <param name="hardOrSoft"></param>
        /// <param name="token"></param>
        /// <returns>APIPeriodUsageOut</returns>
        APIPeriodUsageOut UpdateLimit (int? usageLimit, bool? hardOrSoft, string token);

        /// <summary>
        /// Modifies the hard/soft limit on the API plan&#39;s overages (default is 0$ soft limit).
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="usageLimit"></param>
        /// <param name="hardOrSoft"></param>
        /// <param name="token"></param>
        /// <returns>ApiResponse of APIPeriodUsageOut</returns>
        ApiResponse<APIPeriodUsageOut> UpdateLimitWithHttpInfo (int? usageLimit, bool? hardOrSoft, string token);
        /// <summary>
        /// Update the default Stripe card associated with the current google auth session token.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="defautSourceId"></param>
        /// <param name="token"></param>
        /// <returns>APIKeyOut</returns>
        APIKeyOut UpdatePaymentDefault (string defautSourceId, string token);

        /// <summary>
        /// Update the default Stripe card associated with the current google auth session token.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="defautSourceId"></param>
        /// <param name="token"></param>
        /// <returns>ApiResponse of APIKeyOut</returns>
        ApiResponse<APIKeyOut> UpdatePaymentDefaultWithHttpInfo (string defautSourceId, string token);
        /// <summary>
        /// Get the user profile associated with the current google auth session token.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token"></param>
        /// <returns>APIKeyOut</returns>
        APIKeyOut UserInfo (string token);

        /// <summary>
        /// Get the user profile associated with the current google auth session token.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token"></param>
        /// <returns>ApiResponse of APIKeyOut</returns>
        ApiResponse<APIKeyOut> UserInfoWithHttpInfo (string token);
        /// <summary>
        /// Verifies an email, based on token sent to that email
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailToken"></param>
        /// <returns>APIKeyOut</returns>
        APIKeyOut VerifyEmail (string emailToken);

        /// <summary>
        /// Verifies an email, based on token sent to that email
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailToken"></param>
        /// <returns>ApiResponse of APIKeyOut</returns>
        ApiResponse<APIKeyOut> VerifyEmailWithHttpInfo (string emailToken);
        /// <summary>
        /// Verifies an email, based on token sent to that email
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailToken"></param>
        /// <returns>APIKeyOut</returns>
        APIKeyOut VerifyRemoveEmail (string emailToken);

        /// <summary>
        /// Verifies an email, based on token sent to that email
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailToken"></param>
        /// <returns>ApiResponse of APIKeyOut</returns>
        ApiResponse<APIKeyOut> VerifyRemoveEmailWithHttpInfo (string emailToken);
        /// <summary>
        /// Vetting of a source.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="source"></param>
        /// <param name="vetted"></param>
        /// <returns></returns>
        void Vet (string source, bool? vetted);

        /// <summary>
        /// Vetting of a source.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="source"></param>
        /// <param name="vetted"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> VetWithHttpInfo (string source, bool? vetted);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Add usage credits to an API Key.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="usageCredits"></param>
        /// <param name="userMessage"></param>
        /// <returns>Task of SystemMetricsOut</returns>
        System.Threading.Tasks.Task<SystemMetricsOut> AddCreditsAsync (string apiKey, long? usageCredits, string userMessage);

        /// <summary>
        /// Add usage credits to an API Key.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="usageCredits"></param>
        /// <param name="userMessage"></param>
        /// <returns>Task of ApiResponse (SystemMetricsOut)</returns>
        System.Threading.Tasks.Task<ApiResponse<SystemMetricsOut>> AddCreditsAsyncWithHttpInfo (string apiKey, long? usageCredits, string userMessage);
        /// <summary>
        /// Activate/deactivate anonymization for a source.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="source"></param>
        /// <param name="anonymized"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AnonymizeAsync (string source, bool? anonymized);

        /// <summary>
        /// Activate/deactivate anonymization for a source.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="source"></param>
        /// <param name="anonymized"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AnonymizeAsyncWithHttpInfo (string source, bool? anonymized);
        /// <summary>
        /// Print current API usage.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of APIPeriodUsageOut</returns>
        System.Threading.Tasks.Task<APIPeriodUsageOut> ApiUsageAsync ();

        /// <summary>
        /// Print current API usage.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (APIPeriodUsageOut)</returns>
        System.Threading.Tasks.Task<ApiResponse<APIPeriodUsageOut>> ApiUsageAsyncWithHttpInfo ();
        /// <summary>
        /// Print historical API usage.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of APIPeriodUsageOut</returns>
        System.Threading.Tasks.Task<APIPeriodUsageOut> ApiUsageHistoryAsync ();

        /// <summary>
        /// Print historical API usage.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (APIPeriodUsageOut)</returns>
        System.Threading.Tasks.Task<ApiResponse<APIPeriodUsageOut>> ApiUsageHistoryAsyncWithHttpInfo ();
        /// <summary>
        /// Print historical API usage (in an aggregated view, by service, by day/hour/min).
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of APIPeriodUsageOut</returns>
        System.Threading.Tasks.Task<APIPeriodUsageOut> ApiUsageHistoryAggregateAsync ();

        /// <summary>
        /// Print historical API usage (in an aggregated view, by service, by day/hour/min).
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (APIPeriodUsageOut)</returns>
        System.Threading.Tasks.Task<ApiResponse<APIPeriodUsageOut>> ApiUsageHistoryAggregateAsyncWithHttpInfo ();
        /// <summary>
        /// List all available plans in the user&#39;s preferred currency.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token"></param>
        /// <returns>Task of APIPlansOut</returns>
        System.Threading.Tasks.Task<APIPlansOut> AvailablePlansAsync (string token);

        /// <summary>
        /// List all available plans in the user&#39;s preferred currency.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token"></param>
        /// <returns>Task of ApiResponse (APIPlansOut)</returns>
        System.Threading.Tasks.Task<ApiResponse<APIPlansOut>> AvailablePlansAsyncWithHttpInfo (string token);
        /// <summary>
        /// List all available plans in the default currency (usd).
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of APIPlansOut</returns>
        System.Threading.Tasks.Task<APIPlansOut> AvailablePlans1Async ();

        /// <summary>
        /// List all available plans in the default currency (usd).
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (APIPlansOut)</returns>
        System.Threading.Tasks.Task<ApiResponse<APIPlansOut>> AvailablePlans1AsyncWithHttpInfo ();
        /// <summary>
        /// List of API services and usage cost in Units (default is 1&#x3D;ONE Unit).
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of APIPlansOut</returns>
        System.Threading.Tasks.Task<APIPlansOut> AvailableServicesAsync ();

        /// <summary>
        /// List of API services and usage cost in Units (default is 1&#x3D;ONE Unit).
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (APIPlansOut)</returns>
        System.Threading.Tasks.Task<ApiResponse<APIPlansOut>> AvailableServicesAsyncWithHttpInfo ();
        /// <summary>
        /// List possible currency options for billing (USD, EUR, GBP, ...)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of CurrenciesOut</returns>
        System.Threading.Tasks.Task<CurrenciesOut> BillingCurrenciesAsync ();

        /// <summary>
        /// List possible currency options for billing (USD, EUR, GBP, ...)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (CurrenciesOut)</returns>
        System.Threading.Tasks.Task<ApiResponse<CurrenciesOut>> BillingCurrenciesAsyncWithHttpInfo ();
        /// <summary>
        /// Read the history billing information (invoices paid via Stripe or manually).
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token"></param>
        /// <returns>Task of BillingHistoryOut</returns>
        System.Threading.Tasks.Task<BillingHistoryOut> BillingHistoryAsync (string token);

        /// <summary>
        /// Read the history billing information (invoices paid via Stripe or manually).
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token"></param>
        /// <returns>Task of ApiResponse (BillingHistoryOut)</returns>
        System.Threading.Tasks.Task<ApiResponse<BillingHistoryOut>> BillingHistoryAsyncWithHttpInfo (string token);
        /// <summary>
        /// Read the billing information (company name, address, phone, vat ID)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token"></param>
        /// <returns>Task of BillingInfoInOut</returns>
        System.Threading.Tasks.Task<BillingInfoInOut> BillingInfoAsync (string token);

        /// <summary>
        /// Read the billing information (company name, address, phone, vat ID)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token"></param>
        /// <returns>Task of ApiResponse (BillingInfoInOut)</returns>
        System.Threading.Tasks.Task<ApiResponse<BillingInfoInOut>> BillingInfoAsyncWithHttpInfo (string token);
        /// <summary>
        /// Create a Stripe Customer, based on a payment card token (from secure StripeJS) and email.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject"> (optional)</param>
        /// <returns>Task of APIKeyOut</returns>
        System.Threading.Tasks.Task<APIKeyOut> ChargeAsync (InlineObject inlineObject = null);

        /// <summary>
        /// Create a Stripe Customer, based on a payment card token (from secure StripeJS) and email.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject"> (optional)</param>
        /// <returns>Task of ApiResponse (APIKeyOut)</returns>
        System.Threading.Tasks.Task<ApiResponse<APIKeyOut>> ChargeAsyncWithHttpInfo (InlineObject inlineObject = null);
        /// <summary>
        /// Setting an API Key to a corporate status.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="corporate"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CorporateKeyAsync (string apiKey, bool? corporate);

        /// <summary>
        /// Setting an API Key to a corporate status.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="corporate"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CorporateKeyAsyncWithHttpInfo (string apiKey, bool? corporate);
        /// <summary>
        /// Update debug level for a classifier
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="logger"></param>
        /// <param name="level"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DebugLevelAsync (string logger, string level);

        /// <summary>
        /// Update debug level for a classifier
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="logger"></param>
        /// <param name="level"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DebugLevelAsyncWithHttpInfo (string logger, string level);
        /// <summary>
        /// Flush counters.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task FlushAsync ();

        /// <summary>
        /// Flush counters.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> FlushAsyncWithHttpInfo ();
        /// <summary>
        /// Invalidate system caches.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task InvalidateCacheAsync ();

        /// <summary>
        /// Invalidate system caches.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> InvalidateCacheAsyncWithHttpInfo ();
        /// <summary>
        /// Activate/deactivate learning from a source.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="source"></param>
        /// <param name="learnable"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task LearnableAsync (string source, bool? learnable);

        /// <summary>
        /// Activate/deactivate learning from a source.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="source"></param>
        /// <param name="learnable"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> LearnableAsyncWithHttpInfo (string source, bool? learnable);
        /// <summary>
        /// Get the overall API counter
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of SoftwareVersionOut</returns>
        System.Threading.Tasks.Task<SoftwareVersionOut> NamsorCounterAsync ();

        /// <summary>
        /// Get the overall API counter
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (SoftwareVersionOut)</returns>
        System.Threading.Tasks.Task<ApiResponse<SoftwareVersionOut>> NamsorCounterAsyncWithHttpInfo ();
        /// <summary>
        /// Get the Stripe payment information associated with the current google auth session token.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token"></param>
        /// <returns>Task of APIKeyOut</returns>
        System.Threading.Tasks.Task<APIKeyOut> PaymentInfoAsync (string token);

        /// <summary>
        /// Get the Stripe payment information associated with the current google auth session token.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token"></param>
        /// <returns>Task of ApiResponse (APIKeyOut)</returns>
        System.Threading.Tasks.Task<ApiResponse<APIKeyOut>> PaymentInfoAsyncWithHttpInfo (string token);
        /// <summary>
        /// Procure an API Key (sent via Email), based on an auth token. Keep your API Key secret.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token"></param>
        /// <returns>Task of APIKeyOut</returns>
        System.Threading.Tasks.Task<APIKeyOut> ProcureKeyAsync (string token);

        /// <summary>
        /// Procure an API Key (sent via Email), based on an auth token. Keep your API Key secret.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token"></param>
        /// <returns>Task of ApiResponse (APIKeyOut)</returns>
        System.Threading.Tasks.Task<ApiResponse<APIKeyOut>> ProcureKeyAsyncWithHttpInfo (string token);
        /// <summary>
        /// Redeploy UI from current dev branch.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="live"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RedeployUIAsync (bool? live);

        /// <summary>
        /// Redeploy UI from current dev branch.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="live"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RedeployUIAsyncWithHttpInfo (bool? live);
        /// <summary>
        /// Redeploy UI from current dev branch.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RedeployUI1Async ();

        /// <summary>
        /// Redeploy UI from current dev branch.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RedeployUI1AsyncWithHttpInfo ();
        /// <summary>
        /// Remove the user account.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token"></param>
        /// <returns>Task of APIPlanSubscriptionOut</returns>
        System.Threading.Tasks.Task<APIPlanSubscriptionOut> RemoveUserAccountAsync (string token);

        /// <summary>
        /// Remove the user account.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token"></param>
        /// <returns>Task of ApiResponse (APIPlanSubscriptionOut)</returns>
        System.Threading.Tasks.Task<ApiResponse<APIPlanSubscriptionOut>> RemoveUserAccountAsyncWithHttpInfo (string token);
        /// <summary>
        /// Remove (on behalf) a user account.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <returns>Task of APIPlanSubscriptionOut</returns>
        System.Threading.Tasks.Task<APIPlanSubscriptionOut> RemoveUserAccountOnBehalfAsync (string apiKey);

        /// <summary>
        /// Remove (on behalf) a user account.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <returns>Task of ApiResponse (APIPlanSubscriptionOut)</returns>
        System.Threading.Tasks.Task<ApiResponse<APIPlanSubscriptionOut>> RemoveUserAccountOnBehalfAsyncWithHttpInfo (string apiKey);
        /// <summary>
        /// Stop learning and shutdown system.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ShutdownAsync ();

        /// <summary>
        /// Stop learning and shutdown system.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ShutdownAsyncWithHttpInfo ();
        /// <summary>
        /// Get the current software version
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of SoftwareVersionOut</returns>
        System.Threading.Tasks.Task<SoftwareVersionOut> SoftwareVersionAsync ();

        /// <summary>
        /// Get the current software version
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (SoftwareVersionOut)</returns>
        System.Threading.Tasks.Task<ApiResponse<SoftwareVersionOut>> SoftwareVersionAsyncWithHttpInfo ();
        /// <summary>
        /// Print basic source statistics.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="source"></param>
        /// <returns>Task of SystemMetricsOut</returns>
        System.Threading.Tasks.Task<SystemMetricsOut> SourceStatsAsync (string source);

        /// <summary>
        /// Print basic source statistics.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="source"></param>
        /// <returns>Task of ApiResponse (SystemMetricsOut)</returns>
        System.Threading.Tasks.Task<ApiResponse<SystemMetricsOut>> SourceStatsAsyncWithHttpInfo (string source);
        /// <summary>
        /// Print basic system statistics.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of SystemMetricsOut</returns>
        System.Threading.Tasks.Task<SystemMetricsOut> StatsAsync ();

        /// <summary>
        /// Print basic system statistics.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (SystemMetricsOut)</returns>
        System.Threading.Tasks.Task<ApiResponse<SystemMetricsOut>> StatsAsyncWithHttpInfo ();
        /// <summary>
        /// Connects a Stripe Account.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope"> (optional)</param>
        /// <param name="code"> (optional)</param>
        /// <param name="error"> (optional)</param>
        /// <param name="errorDescription"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task StripeConnectAsync (string scope = null, string code = null, string error = null, string errorDescription = null);

        /// <summary>
        /// Connects a Stripe Account.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope"> (optional)</param>
        /// <param name="code"> (optional)</param>
        /// <param name="error"> (optional)</param>
        /// <param name="errorDescription"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> StripeConnectAsyncWithHttpInfo (string scope = null, string code = null, string error = null, string errorDescription = null);
        /// <summary>
        /// Subscribe to a give API plan, using the user&#39;s preferred or default currency.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="planName"></param>
        /// <param name="token"></param>
        /// <returns>Task of APIPlanSubscriptionOut</returns>
        System.Threading.Tasks.Task<APIPlanSubscriptionOut> SubscribePlanAsync (string planName, string token);

        /// <summary>
        /// Subscribe to a give API plan, using the user&#39;s preferred or default currency.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="planName"></param>
        /// <param name="token"></param>
        /// <returns>Task of ApiResponse (APIPlanSubscriptionOut)</returns>
        System.Threading.Tasks.Task<ApiResponse<APIPlanSubscriptionOut>> SubscribePlanAsyncWithHttpInfo (string planName, string token);
        /// <summary>
        /// Subscribe to a give API plan, using the user&#39;s preferred or default currency (admin only).
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="planName"></param>
        /// <param name="apiKey"></param>
        /// <returns>Task of APIPlanSubscriptionOut</returns>
        System.Threading.Tasks.Task<APIPlanSubscriptionOut> SubscribePlanOnBehalfAsync (string planName, string apiKey);

        /// <summary>
        /// Subscribe to a give API plan, using the user&#39;s preferred or default currency (admin only).
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="planName"></param>
        /// <param name="apiKey"></param>
        /// <returns>Task of ApiResponse (APIPlanSubscriptionOut)</returns>
        System.Threading.Tasks.Task<ApiResponse<APIPlanSubscriptionOut>> SubscribePlanOnBehalfAsyncWithHttpInfo (string planName, string apiKey);
        /// <summary>
        /// Sets or update the billing information (company name, address, phone, vat ID)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token"></param>
        /// <param name="billingInfoInOut"> (optional)</param>
        /// <returns>Task of BillingInfoInOut</returns>
        System.Threading.Tasks.Task<BillingInfoInOut> UpdateBillingInfoAsync (string token, BillingInfoInOut billingInfoInOut = null);

        /// <summary>
        /// Sets or update the billing information (company name, address, phone, vat ID)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token"></param>
        /// <param name="billingInfoInOut"> (optional)</param>
        /// <returns>Task of ApiResponse (BillingInfoInOut)</returns>
        System.Threading.Tasks.Task<ApiResponse<BillingInfoInOut>> UpdateBillingInfoAsyncWithHttpInfo (string token, BillingInfoInOut billingInfoInOut = null);
        /// <summary>
        /// Modifies the hard/soft limit on the API plan&#39;s overages (default is 0$ soft limit).
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="usageLimit"></param>
        /// <param name="hardOrSoft"></param>
        /// <param name="token"></param>
        /// <returns>Task of APIPeriodUsageOut</returns>
        System.Threading.Tasks.Task<APIPeriodUsageOut> UpdateLimitAsync (int? usageLimit, bool? hardOrSoft, string token);

        /// <summary>
        /// Modifies the hard/soft limit on the API plan&#39;s overages (default is 0$ soft limit).
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="usageLimit"></param>
        /// <param name="hardOrSoft"></param>
        /// <param name="token"></param>
        /// <returns>Task of ApiResponse (APIPeriodUsageOut)</returns>
        System.Threading.Tasks.Task<ApiResponse<APIPeriodUsageOut>> UpdateLimitAsyncWithHttpInfo (int? usageLimit, bool? hardOrSoft, string token);
        /// <summary>
        /// Update the default Stripe card associated with the current google auth session token.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="defautSourceId"></param>
        /// <param name="token"></param>
        /// <returns>Task of APIKeyOut</returns>
        System.Threading.Tasks.Task<APIKeyOut> UpdatePaymentDefaultAsync (string defautSourceId, string token);

        /// <summary>
        /// Update the default Stripe card associated with the current google auth session token.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="defautSourceId"></param>
        /// <param name="token"></param>
        /// <returns>Task of ApiResponse (APIKeyOut)</returns>
        System.Threading.Tasks.Task<ApiResponse<APIKeyOut>> UpdatePaymentDefaultAsyncWithHttpInfo (string defautSourceId, string token);
        /// <summary>
        /// Get the user profile associated with the current google auth session token.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token"></param>
        /// <returns>Task of APIKeyOut</returns>
        System.Threading.Tasks.Task<APIKeyOut> UserInfoAsync (string token);

        /// <summary>
        /// Get the user profile associated with the current google auth session token.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token"></param>
        /// <returns>Task of ApiResponse (APIKeyOut)</returns>
        System.Threading.Tasks.Task<ApiResponse<APIKeyOut>> UserInfoAsyncWithHttpInfo (string token);
        /// <summary>
        /// Verifies an email, based on token sent to that email
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailToken"></param>
        /// <returns>Task of APIKeyOut</returns>
        System.Threading.Tasks.Task<APIKeyOut> VerifyEmailAsync (string emailToken);

        /// <summary>
        /// Verifies an email, based on token sent to that email
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailToken"></param>
        /// <returns>Task of ApiResponse (APIKeyOut)</returns>
        System.Threading.Tasks.Task<ApiResponse<APIKeyOut>> VerifyEmailAsyncWithHttpInfo (string emailToken);
        /// <summary>
        /// Verifies an email, based on token sent to that email
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailToken"></param>
        /// <returns>Task of APIKeyOut</returns>
        System.Threading.Tasks.Task<APIKeyOut> VerifyRemoveEmailAsync (string emailToken);

        /// <summary>
        /// Verifies an email, based on token sent to that email
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailToken"></param>
        /// <returns>Task of ApiResponse (APIKeyOut)</returns>
        System.Threading.Tasks.Task<ApiResponse<APIKeyOut>> VerifyRemoveEmailAsyncWithHttpInfo (string emailToken);
        /// <summary>
        /// Vetting of a source.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="source"></param>
        /// <param name="vetted"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task VetAsync (string source, bool? vetted);

        /// <summary>
        /// Vetting of a source.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="source"></param>
        /// <param name="vetted"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> VetAsyncWithHttpInfo (string source, bool? vetted);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class AdminApi : IAdminApi
    {
        private Org.OpenAPITools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="AdminApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AdminApi(String basePath)
        {
            this.Configuration = new Org.OpenAPITools.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AdminApi"/> class
        /// </summary>
        /// <returns></returns>
        public AdminApi()
        {
            this.Configuration = Org.OpenAPITools.Client.Configuration.Default;

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AdminApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public AdminApi(Org.OpenAPITools.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Org.OpenAPITools.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.OpenAPITools.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.OpenAPITools.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Add usage credits to an API Key. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="usageCredits"></param>
        /// <param name="userMessage"></param>
        /// <returns>SystemMetricsOut</returns>
        public SystemMetricsOut AddCredits (string apiKey, long? usageCredits, string userMessage)
        {
             ApiResponse<SystemMetricsOut> localVarResponse = AddCreditsWithHttpInfo(apiKey, usageCredits, userMessage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Add usage credits to an API Key. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="usageCredits"></param>
        /// <param name="userMessage"></param>
        /// <returns>ApiResponse of SystemMetricsOut</returns>
        public ApiResponse< SystemMetricsOut > AddCreditsWithHttpInfo (string apiKey, long? usageCredits, string userMessage)
        {
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
                throw new ApiException(400, "Missing required parameter 'apiKey' when calling AdminApi->AddCredits");
            // verify the required parameter 'usageCredits' is set
            if (usageCredits == null)
                throw new ApiException(400, "Missing required parameter 'usageCredits' when calling AdminApi->AddCredits");
            // verify the required parameter 'userMessage' is set
            if (userMessage == null)
                throw new ApiException(400, "Missing required parameter 'userMessage' when calling AdminApi->AddCredits");

            var localVarPath = "/api2/json/addCredits/{apiKey}/{usageCredits}/{userMessage}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiKey != null) localVarPathParams.Add("apiKey", this.Configuration.ApiClient.ParameterToString(apiKey)); // path parameter
            if (usageCredits != null) localVarPathParams.Add("usageCredits", this.Configuration.ApiClient.ParameterToString(usageCredits)); // path parameter
            if (userMessage != null) localVarPathParams.Add("userMessage", this.Configuration.ApiClient.ParameterToString(userMessage)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarHeaderParams["X-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-API-KEY");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddCredits", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SystemMetricsOut>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SystemMetricsOut) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SystemMetricsOut)));
        }

        /// <summary>
        /// Add usage credits to an API Key. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="usageCredits"></param>
        /// <param name="userMessage"></param>
        /// <returns>Task of SystemMetricsOut</returns>
        public async System.Threading.Tasks.Task<SystemMetricsOut> AddCreditsAsync (string apiKey, long? usageCredits, string userMessage)
        {
             ApiResponse<SystemMetricsOut> localVarResponse = await AddCreditsAsyncWithHttpInfo(apiKey, usageCredits, userMessage);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Add usage credits to an API Key. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="usageCredits"></param>
        /// <param name="userMessage"></param>
        /// <returns>Task of ApiResponse (SystemMetricsOut)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SystemMetricsOut>> AddCreditsAsyncWithHttpInfo (string apiKey, long? usageCredits, string userMessage)
        {
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
                throw new ApiException(400, "Missing required parameter 'apiKey' when calling AdminApi->AddCredits");
            // verify the required parameter 'usageCredits' is set
            if (usageCredits == null)
                throw new ApiException(400, "Missing required parameter 'usageCredits' when calling AdminApi->AddCredits");
            // verify the required parameter 'userMessage' is set
            if (userMessage == null)
                throw new ApiException(400, "Missing required parameter 'userMessage' when calling AdminApi->AddCredits");

            var localVarPath = "/api2/json/addCredits/{apiKey}/{usageCredits}/{userMessage}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiKey != null) localVarPathParams.Add("apiKey", this.Configuration.ApiClient.ParameterToString(apiKey)); // path parameter
            if (usageCredits != null) localVarPathParams.Add("usageCredits", this.Configuration.ApiClient.ParameterToString(usageCredits)); // path parameter
            if (userMessage != null) localVarPathParams.Add("userMessage", this.Configuration.ApiClient.ParameterToString(userMessage)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarHeaderParams["X-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-API-KEY");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddCredits", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SystemMetricsOut>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SystemMetricsOut) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SystemMetricsOut)));
        }

        /// <summary>
        /// Activate/deactivate anonymization for a source. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="source"></param>
        /// <param name="anonymized"></param>
        /// <returns></returns>
        public void Anonymize (string source, bool? anonymized)
        {
             AnonymizeWithHttpInfo(source, anonymized);
        }

        /// <summary>
        /// Activate/deactivate anonymization for a source. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="source"></param>
        /// <param name="anonymized"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AnonymizeWithHttpInfo (string source, bool? anonymized)
        {
            // verify the required parameter 'source' is set
            if (source == null)
                throw new ApiException(400, "Missing required parameter 'source' when calling AdminApi->Anonymize");
            // verify the required parameter 'anonymized' is set
            if (anonymized == null)
                throw new ApiException(400, "Missing required parameter 'anonymized' when calling AdminApi->Anonymize");

            var localVarPath = "/api2/json/anonymize/{source}/{anonymized}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (source != null) localVarPathParams.Add("source", this.Configuration.ApiClient.ParameterToString(source)); // path parameter
            if (anonymized != null) localVarPathParams.Add("anonymized", this.Configuration.ApiClient.ParameterToString(anonymized)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarHeaderParams["X-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-API-KEY");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Anonymize", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Activate/deactivate anonymization for a source. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="source"></param>
        /// <param name="anonymized"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AnonymizeAsync (string source, bool? anonymized)
        {
             await AnonymizeAsyncWithHttpInfo(source, anonymized);

        }

        /// <summary>
        /// Activate/deactivate anonymization for a source. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="source"></param>
        /// <param name="anonymized"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AnonymizeAsyncWithHttpInfo (string source, bool? anonymized)
        {
            // verify the required parameter 'source' is set
            if (source == null)
                throw new ApiException(400, "Missing required parameter 'source' when calling AdminApi->Anonymize");
            // verify the required parameter 'anonymized' is set
            if (anonymized == null)
                throw new ApiException(400, "Missing required parameter 'anonymized' when calling AdminApi->Anonymize");

            var localVarPath = "/api2/json/anonymize/{source}/{anonymized}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (source != null) localVarPathParams.Add("source", this.Configuration.ApiClient.ParameterToString(source)); // path parameter
            if (anonymized != null) localVarPathParams.Add("anonymized", this.Configuration.ApiClient.ParameterToString(anonymized)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarHeaderParams["X-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-API-KEY");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Anonymize", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Print current API usage. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>APIPeriodUsageOut</returns>
        public APIPeriodUsageOut ApiUsage ()
        {
             ApiResponse<APIPeriodUsageOut> localVarResponse = ApiUsageWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Print current API usage. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of APIPeriodUsageOut</returns>
        public ApiResponse< APIPeriodUsageOut > ApiUsageWithHttpInfo ()
        {

            var localVarPath = "/api2/json/apiUsage";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarHeaderParams["X-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-API-KEY");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiUsage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<APIPeriodUsageOut>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (APIPeriodUsageOut) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(APIPeriodUsageOut)));
        }

        /// <summary>
        /// Print current API usage. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of APIPeriodUsageOut</returns>
        public async System.Threading.Tasks.Task<APIPeriodUsageOut> ApiUsageAsync ()
        {
             ApiResponse<APIPeriodUsageOut> localVarResponse = await ApiUsageAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Print current API usage. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (APIPeriodUsageOut)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<APIPeriodUsageOut>> ApiUsageAsyncWithHttpInfo ()
        {

            var localVarPath = "/api2/json/apiUsage";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarHeaderParams["X-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-API-KEY");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiUsage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<APIPeriodUsageOut>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (APIPeriodUsageOut) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(APIPeriodUsageOut)));
        }

        /// <summary>
        /// Print historical API usage. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>APIPeriodUsageOut</returns>
        public APIPeriodUsageOut ApiUsageHistory ()
        {
             ApiResponse<APIPeriodUsageOut> localVarResponse = ApiUsageHistoryWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Print historical API usage. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of APIPeriodUsageOut</returns>
        public ApiResponse< APIPeriodUsageOut > ApiUsageHistoryWithHttpInfo ()
        {

            var localVarPath = "/api2/json/apiUsageHistory";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarHeaderParams["X-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-API-KEY");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiUsageHistory", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<APIPeriodUsageOut>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (APIPeriodUsageOut) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(APIPeriodUsageOut)));
        }

        /// <summary>
        /// Print historical API usage. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of APIPeriodUsageOut</returns>
        public async System.Threading.Tasks.Task<APIPeriodUsageOut> ApiUsageHistoryAsync ()
        {
             ApiResponse<APIPeriodUsageOut> localVarResponse = await ApiUsageHistoryAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Print historical API usage. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (APIPeriodUsageOut)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<APIPeriodUsageOut>> ApiUsageHistoryAsyncWithHttpInfo ()
        {

            var localVarPath = "/api2/json/apiUsageHistory";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarHeaderParams["X-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-API-KEY");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiUsageHistory", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<APIPeriodUsageOut>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (APIPeriodUsageOut) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(APIPeriodUsageOut)));
        }

        /// <summary>
        /// Print historical API usage (in an aggregated view, by service, by day/hour/min). 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>APIPeriodUsageOut</returns>
        public APIPeriodUsageOut ApiUsageHistoryAggregate ()
        {
             ApiResponse<APIPeriodUsageOut> localVarResponse = ApiUsageHistoryAggregateWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Print historical API usage (in an aggregated view, by service, by day/hour/min). 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of APIPeriodUsageOut</returns>
        public ApiResponse< APIPeriodUsageOut > ApiUsageHistoryAggregateWithHttpInfo ()
        {

            var localVarPath = "/api2/json/apiUsageHistoryAggregate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarHeaderParams["X-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-API-KEY");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiUsageHistoryAggregate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<APIPeriodUsageOut>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (APIPeriodUsageOut) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(APIPeriodUsageOut)));
        }

        /// <summary>
        /// Print historical API usage (in an aggregated view, by service, by day/hour/min). 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of APIPeriodUsageOut</returns>
        public async System.Threading.Tasks.Task<APIPeriodUsageOut> ApiUsageHistoryAggregateAsync ()
        {
             ApiResponse<APIPeriodUsageOut> localVarResponse = await ApiUsageHistoryAggregateAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Print historical API usage (in an aggregated view, by service, by day/hour/min). 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (APIPeriodUsageOut)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<APIPeriodUsageOut>> ApiUsageHistoryAggregateAsyncWithHttpInfo ()
        {

            var localVarPath = "/api2/json/apiUsageHistoryAggregate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarHeaderParams["X-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-API-KEY");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiUsageHistoryAggregate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<APIPeriodUsageOut>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (APIPeriodUsageOut) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(APIPeriodUsageOut)));
        }

        /// <summary>
        /// List all available plans in the user&#39;s preferred currency. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token"></param>
        /// <returns>APIPlansOut</returns>
        public APIPlansOut AvailablePlans (string token)
        {
             ApiResponse<APIPlansOut> localVarResponse = AvailablePlansWithHttpInfo(token);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List all available plans in the user&#39;s preferred currency. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token"></param>
        /// <returns>ApiResponse of APIPlansOut</returns>
        public ApiResponse< APIPlansOut > AvailablePlansWithHttpInfo (string token)
        {
            // verify the required parameter 'token' is set
            if (token == null)
                throw new ApiException(400, "Missing required parameter 'token' when calling AdminApi->AvailablePlans");

            var localVarPath = "/api2/json/availablePlans/{token}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (token != null) localVarPathParams.Add("token", this.Configuration.ApiClient.ParameterToString(token)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarHeaderParams["X-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-API-KEY");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AvailablePlans", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<APIPlansOut>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (APIPlansOut) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(APIPlansOut)));
        }

        /// <summary>
        /// List all available plans in the user&#39;s preferred currency. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token"></param>
        /// <returns>Task of APIPlansOut</returns>
        public async System.Threading.Tasks.Task<APIPlansOut> AvailablePlansAsync (string token)
        {
             ApiResponse<APIPlansOut> localVarResponse = await AvailablePlansAsyncWithHttpInfo(token);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List all available plans in the user&#39;s preferred currency. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token"></param>
        /// <returns>Task of ApiResponse (APIPlansOut)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<APIPlansOut>> AvailablePlansAsyncWithHttpInfo (string token)
        {
            // verify the required parameter 'token' is set
            if (token == null)
                throw new ApiException(400, "Missing required parameter 'token' when calling AdminApi->AvailablePlans");

            var localVarPath = "/api2/json/availablePlans/{token}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (token != null) localVarPathParams.Add("token", this.Configuration.ApiClient.ParameterToString(token)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarHeaderParams["X-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-API-KEY");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AvailablePlans", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<APIPlansOut>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (APIPlansOut) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(APIPlansOut)));
        }

        /// <summary>
        /// List all available plans in the default currency (usd). 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>APIPlansOut</returns>
        public APIPlansOut AvailablePlans1 ()
        {
             ApiResponse<APIPlansOut> localVarResponse = AvailablePlans1WithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// List all available plans in the default currency (usd). 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of APIPlansOut</returns>
        public ApiResponse< APIPlansOut > AvailablePlans1WithHttpInfo ()
        {

            var localVarPath = "/api2/json/availablePlans";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarHeaderParams["X-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-API-KEY");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AvailablePlans1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<APIPlansOut>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (APIPlansOut) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(APIPlansOut)));
        }

        /// <summary>
        /// List all available plans in the default currency (usd). 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of APIPlansOut</returns>
        public async System.Threading.Tasks.Task<APIPlansOut> AvailablePlans1Async ()
        {
             ApiResponse<APIPlansOut> localVarResponse = await AvailablePlans1AsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// List all available plans in the default currency (usd). 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (APIPlansOut)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<APIPlansOut>> AvailablePlans1AsyncWithHttpInfo ()
        {

            var localVarPath = "/api2/json/availablePlans";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarHeaderParams["X-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-API-KEY");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AvailablePlans1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<APIPlansOut>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (APIPlansOut) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(APIPlansOut)));
        }

        /// <summary>
        /// List of API services and usage cost in Units (default is 1&#x3D;ONE Unit). 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>APIPlansOut</returns>
        public APIPlansOut AvailableServices ()
        {
             ApiResponse<APIPlansOut> localVarResponse = AvailableServicesWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// List of API services and usage cost in Units (default is 1&#x3D;ONE Unit). 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of APIPlansOut</returns>
        public ApiResponse< APIPlansOut > AvailableServicesWithHttpInfo ()
        {

            var localVarPath = "/api2/json/apiServices";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarHeaderParams["X-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-API-KEY");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AvailableServices", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<APIPlansOut>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (APIPlansOut) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(APIPlansOut)));
        }

        /// <summary>
        /// List of API services and usage cost in Units (default is 1&#x3D;ONE Unit). 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of APIPlansOut</returns>
        public async System.Threading.Tasks.Task<APIPlansOut> AvailableServicesAsync ()
        {
             ApiResponse<APIPlansOut> localVarResponse = await AvailableServicesAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// List of API services and usage cost in Units (default is 1&#x3D;ONE Unit). 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (APIPlansOut)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<APIPlansOut>> AvailableServicesAsyncWithHttpInfo ()
        {

            var localVarPath = "/api2/json/apiServices";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarHeaderParams["X-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-API-KEY");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AvailableServices", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<APIPlansOut>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (APIPlansOut) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(APIPlansOut)));
        }

        /// <summary>
        /// List possible currency options for billing (USD, EUR, GBP, ...) 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>CurrenciesOut</returns>
        public CurrenciesOut BillingCurrencies ()
        {
             ApiResponse<CurrenciesOut> localVarResponse = BillingCurrenciesWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// List possible currency options for billing (USD, EUR, GBP, ...) 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of CurrenciesOut</returns>
        public ApiResponse< CurrenciesOut > BillingCurrenciesWithHttpInfo ()
        {

            var localVarPath = "/api2/json/billingCurrencies";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarHeaderParams["X-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-API-KEY");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BillingCurrencies", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CurrenciesOut>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CurrenciesOut) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CurrenciesOut)));
        }

        /// <summary>
        /// List possible currency options for billing (USD, EUR, GBP, ...) 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of CurrenciesOut</returns>
        public async System.Threading.Tasks.Task<CurrenciesOut> BillingCurrenciesAsync ()
        {
             ApiResponse<CurrenciesOut> localVarResponse = await BillingCurrenciesAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// List possible currency options for billing (USD, EUR, GBP, ...) 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (CurrenciesOut)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CurrenciesOut>> BillingCurrenciesAsyncWithHttpInfo ()
        {

            var localVarPath = "/api2/json/billingCurrencies";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarHeaderParams["X-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-API-KEY");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BillingCurrencies", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CurrenciesOut>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CurrenciesOut) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CurrenciesOut)));
        }

        /// <summary>
        /// Read the history billing information (invoices paid via Stripe or manually). 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token"></param>
        /// <returns>BillingHistoryOut</returns>
        public BillingHistoryOut BillingHistory (string token)
        {
             ApiResponse<BillingHistoryOut> localVarResponse = BillingHistoryWithHttpInfo(token);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Read the history billing information (invoices paid via Stripe or manually). 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token"></param>
        /// <returns>ApiResponse of BillingHistoryOut</returns>
        public ApiResponse< BillingHistoryOut > BillingHistoryWithHttpInfo (string token)
        {
            // verify the required parameter 'token' is set
            if (token == null)
                throw new ApiException(400, "Missing required parameter 'token' when calling AdminApi->BillingHistory");

            var localVarPath = "/api2/json/billingHistory/{token}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (token != null) localVarPathParams.Add("token", this.Configuration.ApiClient.ParameterToString(token)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarHeaderParams["X-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-API-KEY");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BillingHistory", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BillingHistoryOut>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BillingHistoryOut) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BillingHistoryOut)));
        }

        /// <summary>
        /// Read the history billing information (invoices paid via Stripe or manually). 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token"></param>
        /// <returns>Task of BillingHistoryOut</returns>
        public async System.Threading.Tasks.Task<BillingHistoryOut> BillingHistoryAsync (string token)
        {
             ApiResponse<BillingHistoryOut> localVarResponse = await BillingHistoryAsyncWithHttpInfo(token);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Read the history billing information (invoices paid via Stripe or manually). 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token"></param>
        /// <returns>Task of ApiResponse (BillingHistoryOut)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BillingHistoryOut>> BillingHistoryAsyncWithHttpInfo (string token)
        {
            // verify the required parameter 'token' is set
            if (token == null)
                throw new ApiException(400, "Missing required parameter 'token' when calling AdminApi->BillingHistory");

            var localVarPath = "/api2/json/billingHistory/{token}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (token != null) localVarPathParams.Add("token", this.Configuration.ApiClient.ParameterToString(token)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarHeaderParams["X-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-API-KEY");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BillingHistory", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BillingHistoryOut>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BillingHistoryOut) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BillingHistoryOut)));
        }

        /// <summary>
        /// Read the billing information (company name, address, phone, vat ID) 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token"></param>
        /// <returns>BillingInfoInOut</returns>
        public BillingInfoInOut BillingInfo (string token)
        {
             ApiResponse<BillingInfoInOut> localVarResponse = BillingInfoWithHttpInfo(token);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Read the billing information (company name, address, phone, vat ID) 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token"></param>
        /// <returns>ApiResponse of BillingInfoInOut</returns>
        public ApiResponse< BillingInfoInOut > BillingInfoWithHttpInfo (string token)
        {
            // verify the required parameter 'token' is set
            if (token == null)
                throw new ApiException(400, "Missing required parameter 'token' when calling AdminApi->BillingInfo");

            var localVarPath = "/api2/json/billingInfo/{token}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (token != null) localVarPathParams.Add("token", this.Configuration.ApiClient.ParameterToString(token)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarHeaderParams["X-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-API-KEY");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BillingInfo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BillingInfoInOut>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BillingInfoInOut) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BillingInfoInOut)));
        }

        /// <summary>
        /// Read the billing information (company name, address, phone, vat ID) 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token"></param>
        /// <returns>Task of BillingInfoInOut</returns>
        public async System.Threading.Tasks.Task<BillingInfoInOut> BillingInfoAsync (string token)
        {
             ApiResponse<BillingInfoInOut> localVarResponse = await BillingInfoAsyncWithHttpInfo(token);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Read the billing information (company name, address, phone, vat ID) 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token"></param>
        /// <returns>Task of ApiResponse (BillingInfoInOut)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BillingInfoInOut>> BillingInfoAsyncWithHttpInfo (string token)
        {
            // verify the required parameter 'token' is set
            if (token == null)
                throw new ApiException(400, "Missing required parameter 'token' when calling AdminApi->BillingInfo");

            var localVarPath = "/api2/json/billingInfo/{token}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (token != null) localVarPathParams.Add("token", this.Configuration.ApiClient.ParameterToString(token)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarHeaderParams["X-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-API-KEY");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BillingInfo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BillingInfoInOut>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BillingInfoInOut) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BillingInfoInOut)));
        }

        /// <summary>
        /// Create a Stripe Customer, based on a payment card token (from secure StripeJS) and email. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject"> (optional)</param>
        /// <returns>APIKeyOut</returns>
        public APIKeyOut Charge (InlineObject inlineObject = null)
        {
             ApiResponse<APIKeyOut> localVarResponse = ChargeWithHttpInfo(inlineObject);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a Stripe Customer, based on a payment card token (from secure StripeJS) and email. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject"> (optional)</param>
        /// <returns>ApiResponse of APIKeyOut</returns>
        public ApiResponse< APIKeyOut > ChargeWithHttpInfo (InlineObject inlineObject = null)
        {

            var localVarPath = "/api2/json/charge";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (inlineObject != null && inlineObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(inlineObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = inlineObject; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarHeaderParams["X-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-API-KEY");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Charge", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<APIKeyOut>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (APIKeyOut) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(APIKeyOut)));
        }

        /// <summary>
        /// Create a Stripe Customer, based on a payment card token (from secure StripeJS) and email. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject"> (optional)</param>
        /// <returns>Task of APIKeyOut</returns>
        public async System.Threading.Tasks.Task<APIKeyOut> ChargeAsync (InlineObject inlineObject = null)
        {
             ApiResponse<APIKeyOut> localVarResponse = await ChargeAsyncWithHttpInfo(inlineObject);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a Stripe Customer, based on a payment card token (from secure StripeJS) and email. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject"> (optional)</param>
        /// <returns>Task of ApiResponse (APIKeyOut)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<APIKeyOut>> ChargeAsyncWithHttpInfo (InlineObject inlineObject = null)
        {

            var localVarPath = "/api2/json/charge";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (inlineObject != null && inlineObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(inlineObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = inlineObject; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarHeaderParams["X-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-API-KEY");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Charge", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<APIKeyOut>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (APIKeyOut) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(APIKeyOut)));
        }

        /// <summary>
        /// Setting an API Key to a corporate status. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="corporate"></param>
        /// <returns></returns>
        public void CorporateKey (string apiKey, bool? corporate)
        {
             CorporateKeyWithHttpInfo(apiKey, corporate);
        }

        /// <summary>
        /// Setting an API Key to a corporate status. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="corporate"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> CorporateKeyWithHttpInfo (string apiKey, bool? corporate)
        {
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
                throw new ApiException(400, "Missing required parameter 'apiKey' when calling AdminApi->CorporateKey");
            // verify the required parameter 'corporate' is set
            if (corporate == null)
                throw new ApiException(400, "Missing required parameter 'corporate' when calling AdminApi->CorporateKey");

            var localVarPath = "/api2/json/corporateKey/{apiKey}/{corporate}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiKey != null) localVarPathParams.Add("apiKey", this.Configuration.ApiClient.ParameterToString(apiKey)); // path parameter
            if (corporate != null) localVarPathParams.Add("corporate", this.Configuration.ApiClient.ParameterToString(corporate)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarHeaderParams["X-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-API-KEY");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CorporateKey", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Setting an API Key to a corporate status. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="corporate"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CorporateKeyAsync (string apiKey, bool? corporate)
        {
             await CorporateKeyAsyncWithHttpInfo(apiKey, corporate);

        }

        /// <summary>
        /// Setting an API Key to a corporate status. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="corporate"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CorporateKeyAsyncWithHttpInfo (string apiKey, bool? corporate)
        {
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
                throw new ApiException(400, "Missing required parameter 'apiKey' when calling AdminApi->CorporateKey");
            // verify the required parameter 'corporate' is set
            if (corporate == null)
                throw new ApiException(400, "Missing required parameter 'corporate' when calling AdminApi->CorporateKey");

            var localVarPath = "/api2/json/corporateKey/{apiKey}/{corporate}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiKey != null) localVarPathParams.Add("apiKey", this.Configuration.ApiClient.ParameterToString(apiKey)); // path parameter
            if (corporate != null) localVarPathParams.Add("corporate", this.Configuration.ApiClient.ParameterToString(corporate)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarHeaderParams["X-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-API-KEY");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CorporateKey", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update debug level for a classifier 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="logger"></param>
        /// <param name="level"></param>
        /// <returns></returns>
        public void DebugLevel (string logger, string level)
        {
             DebugLevelWithHttpInfo(logger, level);
        }

        /// <summary>
        /// Update debug level for a classifier 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="logger"></param>
        /// <param name="level"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DebugLevelWithHttpInfo (string logger, string level)
        {
            // verify the required parameter 'logger' is set
            if (logger == null)
                throw new ApiException(400, "Missing required parameter 'logger' when calling AdminApi->DebugLevel");
            // verify the required parameter 'level' is set
            if (level == null)
                throw new ApiException(400, "Missing required parameter 'level' when calling AdminApi->DebugLevel");

            var localVarPath = "/api2/json/debugLevel/{logger}/{level}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (logger != null) localVarPathParams.Add("logger", this.Configuration.ApiClient.ParameterToString(logger)); // path parameter
            if (level != null) localVarPathParams.Add("level", this.Configuration.ApiClient.ParameterToString(level)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarHeaderParams["X-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-API-KEY");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DebugLevel", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update debug level for a classifier 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="logger"></param>
        /// <param name="level"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DebugLevelAsync (string logger, string level)
        {
             await DebugLevelAsyncWithHttpInfo(logger, level);

        }

        /// <summary>
        /// Update debug level for a classifier 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="logger"></param>
        /// <param name="level"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DebugLevelAsyncWithHttpInfo (string logger, string level)
        {
            // verify the required parameter 'logger' is set
            if (logger == null)
                throw new ApiException(400, "Missing required parameter 'logger' when calling AdminApi->DebugLevel");
            // verify the required parameter 'level' is set
            if (level == null)
                throw new ApiException(400, "Missing required parameter 'level' when calling AdminApi->DebugLevel");

            var localVarPath = "/api2/json/debugLevel/{logger}/{level}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (logger != null) localVarPathParams.Add("logger", this.Configuration.ApiClient.ParameterToString(logger)); // path parameter
            if (level != null) localVarPathParams.Add("level", this.Configuration.ApiClient.ParameterToString(level)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarHeaderParams["X-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-API-KEY");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DebugLevel", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Flush counters. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        public void Flush ()
        {
             FlushWithHttpInfo();
        }

        /// <summary>
        /// Flush counters. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> FlushWithHttpInfo ()
        {

            var localVarPath = "/api2/json/flush";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarHeaderParams["X-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-API-KEY");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Flush", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Flush counters. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task FlushAsync ()
        {
             await FlushAsyncWithHttpInfo();

        }

        /// <summary>
        /// Flush counters. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> FlushAsyncWithHttpInfo ()
        {

            var localVarPath = "/api2/json/flush";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarHeaderParams["X-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-API-KEY");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Flush", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Invalidate system caches. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        public void InvalidateCache ()
        {
             InvalidateCacheWithHttpInfo();
        }

        /// <summary>
        /// Invalidate system caches. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> InvalidateCacheWithHttpInfo ()
        {

            var localVarPath = "/api2/json/invalidateCache";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarHeaderParams["X-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-API-KEY");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("InvalidateCache", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Invalidate system caches. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task InvalidateCacheAsync ()
        {
             await InvalidateCacheAsyncWithHttpInfo();

        }

        /// <summary>
        /// Invalidate system caches. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> InvalidateCacheAsyncWithHttpInfo ()
        {

            var localVarPath = "/api2/json/invalidateCache";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarHeaderParams["X-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-API-KEY");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("InvalidateCache", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Activate/deactivate learning from a source. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="source"></param>
        /// <param name="learnable"></param>
        /// <returns></returns>
        public void Learnable (string source, bool? learnable)
        {
             LearnableWithHttpInfo(source, learnable);
        }

        /// <summary>
        /// Activate/deactivate learning from a source. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="source"></param>
        /// <param name="learnable"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> LearnableWithHttpInfo (string source, bool? learnable)
        {
            // verify the required parameter 'source' is set
            if (source == null)
                throw new ApiException(400, "Missing required parameter 'source' when calling AdminApi->Learnable");
            // verify the required parameter 'learnable' is set
            if (learnable == null)
                throw new ApiException(400, "Missing required parameter 'learnable' when calling AdminApi->Learnable");

            var localVarPath = "/api2/json/learnable/{source}/{learnable}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (source != null) localVarPathParams.Add("source", this.Configuration.ApiClient.ParameterToString(source)); // path parameter
            if (learnable != null) localVarPathParams.Add("learnable", this.Configuration.ApiClient.ParameterToString(learnable)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarHeaderParams["X-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-API-KEY");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Learnable", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Activate/deactivate learning from a source. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="source"></param>
        /// <param name="learnable"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task LearnableAsync (string source, bool? learnable)
        {
             await LearnableAsyncWithHttpInfo(source, learnable);

        }

        /// <summary>
        /// Activate/deactivate learning from a source. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="source"></param>
        /// <param name="learnable"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> LearnableAsyncWithHttpInfo (string source, bool? learnable)
        {
            // verify the required parameter 'source' is set
            if (source == null)
                throw new ApiException(400, "Missing required parameter 'source' when calling AdminApi->Learnable");
            // verify the required parameter 'learnable' is set
            if (learnable == null)
                throw new ApiException(400, "Missing required parameter 'learnable' when calling AdminApi->Learnable");

            var localVarPath = "/api2/json/learnable/{source}/{learnable}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (source != null) localVarPathParams.Add("source", this.Configuration.ApiClient.ParameterToString(source)); // path parameter
            if (learnable != null) localVarPathParams.Add("learnable", this.Configuration.ApiClient.ParameterToString(learnable)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarHeaderParams["X-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-API-KEY");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Learnable", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get the overall API counter 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>SoftwareVersionOut</returns>
        public SoftwareVersionOut NamsorCounter ()
        {
             ApiResponse<SoftwareVersionOut> localVarResponse = NamsorCounterWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get the overall API counter 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of SoftwareVersionOut</returns>
        public ApiResponse< SoftwareVersionOut > NamsorCounterWithHttpInfo ()
        {

            var localVarPath = "/api2/json/namsorCounter";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarHeaderParams["X-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-API-KEY");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("NamsorCounter", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SoftwareVersionOut>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SoftwareVersionOut) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SoftwareVersionOut)));
        }

        /// <summary>
        /// Get the overall API counter 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of SoftwareVersionOut</returns>
        public async System.Threading.Tasks.Task<SoftwareVersionOut> NamsorCounterAsync ()
        {
             ApiResponse<SoftwareVersionOut> localVarResponse = await NamsorCounterAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get the overall API counter 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (SoftwareVersionOut)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SoftwareVersionOut>> NamsorCounterAsyncWithHttpInfo ()
        {

            var localVarPath = "/api2/json/namsorCounter";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarHeaderParams["X-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-API-KEY");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("NamsorCounter", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SoftwareVersionOut>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SoftwareVersionOut) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SoftwareVersionOut)));
        }

        /// <summary>
        /// Get the Stripe payment information associated with the current google auth session token. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token"></param>
        /// <returns>APIKeyOut</returns>
        public APIKeyOut PaymentInfo (string token)
        {
             ApiResponse<APIKeyOut> localVarResponse = PaymentInfoWithHttpInfo(token);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get the Stripe payment information associated with the current google auth session token. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token"></param>
        /// <returns>ApiResponse of APIKeyOut</returns>
        public ApiResponse< APIKeyOut > PaymentInfoWithHttpInfo (string token)
        {
            // verify the required parameter 'token' is set
            if (token == null)
                throw new ApiException(400, "Missing required parameter 'token' when calling AdminApi->PaymentInfo");

            var localVarPath = "/api2/json/paymentInfo/{token}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (token != null) localVarPathParams.Add("token", this.Configuration.ApiClient.ParameterToString(token)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarHeaderParams["X-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-API-KEY");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PaymentInfo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<APIKeyOut>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (APIKeyOut) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(APIKeyOut)));
        }

        /// <summary>
        /// Get the Stripe payment information associated with the current google auth session token. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token"></param>
        /// <returns>Task of APIKeyOut</returns>
        public async System.Threading.Tasks.Task<APIKeyOut> PaymentInfoAsync (string token)
        {
             ApiResponse<APIKeyOut> localVarResponse = await PaymentInfoAsyncWithHttpInfo(token);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get the Stripe payment information associated with the current google auth session token. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token"></param>
        /// <returns>Task of ApiResponse (APIKeyOut)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<APIKeyOut>> PaymentInfoAsyncWithHttpInfo (string token)
        {
            // verify the required parameter 'token' is set
            if (token == null)
                throw new ApiException(400, "Missing required parameter 'token' when calling AdminApi->PaymentInfo");

            var localVarPath = "/api2/json/paymentInfo/{token}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (token != null) localVarPathParams.Add("token", this.Configuration.ApiClient.ParameterToString(token)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarHeaderParams["X-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-API-KEY");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PaymentInfo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<APIKeyOut>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (APIKeyOut) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(APIKeyOut)));
        }

        /// <summary>
        /// Procure an API Key (sent via Email), based on an auth token. Keep your API Key secret. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token"></param>
        /// <returns>APIKeyOut</returns>
        public APIKeyOut ProcureKey (string token)
        {
             ApiResponse<APIKeyOut> localVarResponse = ProcureKeyWithHttpInfo(token);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Procure an API Key (sent via Email), based on an auth token. Keep your API Key secret. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token"></param>
        /// <returns>ApiResponse of APIKeyOut</returns>
        public ApiResponse< APIKeyOut > ProcureKeyWithHttpInfo (string token)
        {
            // verify the required parameter 'token' is set
            if (token == null)
                throw new ApiException(400, "Missing required parameter 'token' when calling AdminApi->ProcureKey");

            var localVarPath = "/api2/json/procureKey/{token}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (token != null) localVarPathParams.Add("token", this.Configuration.ApiClient.ParameterToString(token)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarHeaderParams["X-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-API-KEY");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProcureKey", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<APIKeyOut>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (APIKeyOut) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(APIKeyOut)));
        }

        /// <summary>
        /// Procure an API Key (sent via Email), based on an auth token. Keep your API Key secret. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token"></param>
        /// <returns>Task of APIKeyOut</returns>
        public async System.Threading.Tasks.Task<APIKeyOut> ProcureKeyAsync (string token)
        {
             ApiResponse<APIKeyOut> localVarResponse = await ProcureKeyAsyncWithHttpInfo(token);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Procure an API Key (sent via Email), based on an auth token. Keep your API Key secret. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token"></param>
        /// <returns>Task of ApiResponse (APIKeyOut)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<APIKeyOut>> ProcureKeyAsyncWithHttpInfo (string token)
        {
            // verify the required parameter 'token' is set
            if (token == null)
                throw new ApiException(400, "Missing required parameter 'token' when calling AdminApi->ProcureKey");

            var localVarPath = "/api2/json/procureKey/{token}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (token != null) localVarPathParams.Add("token", this.Configuration.ApiClient.ParameterToString(token)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarHeaderParams["X-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-API-KEY");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProcureKey", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<APIKeyOut>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (APIKeyOut) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(APIKeyOut)));
        }

        /// <summary>
        /// Redeploy UI from current dev branch. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="live"></param>
        /// <returns></returns>
        public void RedeployUI (bool? live)
        {
             RedeployUIWithHttpInfo(live);
        }

        /// <summary>
        /// Redeploy UI from current dev branch. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="live"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> RedeployUIWithHttpInfo (bool? live)
        {
            // verify the required parameter 'live' is set
            if (live == null)
                throw new ApiException(400, "Missing required parameter 'live' when calling AdminApi->RedeployUI");

            var localVarPath = "/api2/json/redeployUI/{live}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (live != null) localVarPathParams.Add("live", this.Configuration.ApiClient.ParameterToString(live)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarHeaderParams["X-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-API-KEY");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RedeployUI", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Redeploy UI from current dev branch. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="live"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RedeployUIAsync (bool? live)
        {
             await RedeployUIAsyncWithHttpInfo(live);

        }

        /// <summary>
        /// Redeploy UI from current dev branch. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="live"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> RedeployUIAsyncWithHttpInfo (bool? live)
        {
            // verify the required parameter 'live' is set
            if (live == null)
                throw new ApiException(400, "Missing required parameter 'live' when calling AdminApi->RedeployUI");

            var localVarPath = "/api2/json/redeployUI/{live}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (live != null) localVarPathParams.Add("live", this.Configuration.ApiClient.ParameterToString(live)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarHeaderParams["X-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-API-KEY");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RedeployUI", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Redeploy UI from current dev branch. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        public void RedeployUI1 ()
        {
             RedeployUI1WithHttpInfo();
        }

        /// <summary>
        /// Redeploy UI from current dev branch. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> RedeployUI1WithHttpInfo ()
        {

            var localVarPath = "/api2/json/redeployUI";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarHeaderParams["X-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-API-KEY");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RedeployUI1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Redeploy UI from current dev branch. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RedeployUI1Async ()
        {
             await RedeployUI1AsyncWithHttpInfo();

        }

        /// <summary>
        /// Redeploy UI from current dev branch. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> RedeployUI1AsyncWithHttpInfo ()
        {

            var localVarPath = "/api2/json/redeployUI";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarHeaderParams["X-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-API-KEY");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RedeployUI1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Remove the user account. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token"></param>
        /// <returns>APIPlanSubscriptionOut</returns>
        public APIPlanSubscriptionOut RemoveUserAccount (string token)
        {
             ApiResponse<APIPlanSubscriptionOut> localVarResponse = RemoveUserAccountWithHttpInfo(token);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Remove the user account. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token"></param>
        /// <returns>ApiResponse of APIPlanSubscriptionOut</returns>
        public ApiResponse< APIPlanSubscriptionOut > RemoveUserAccountWithHttpInfo (string token)
        {
            // verify the required parameter 'token' is set
            if (token == null)
                throw new ApiException(400, "Missing required parameter 'token' when calling AdminApi->RemoveUserAccount");

            var localVarPath = "/api2/json/removeUserAccount/{token}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (token != null) localVarPathParams.Add("token", this.Configuration.ApiClient.ParameterToString(token)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarHeaderParams["X-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-API-KEY");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RemoveUserAccount", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<APIPlanSubscriptionOut>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (APIPlanSubscriptionOut) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(APIPlanSubscriptionOut)));
        }

        /// <summary>
        /// Remove the user account. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token"></param>
        /// <returns>Task of APIPlanSubscriptionOut</returns>
        public async System.Threading.Tasks.Task<APIPlanSubscriptionOut> RemoveUserAccountAsync (string token)
        {
             ApiResponse<APIPlanSubscriptionOut> localVarResponse = await RemoveUserAccountAsyncWithHttpInfo(token);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Remove the user account. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token"></param>
        /// <returns>Task of ApiResponse (APIPlanSubscriptionOut)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<APIPlanSubscriptionOut>> RemoveUserAccountAsyncWithHttpInfo (string token)
        {
            // verify the required parameter 'token' is set
            if (token == null)
                throw new ApiException(400, "Missing required parameter 'token' when calling AdminApi->RemoveUserAccount");

            var localVarPath = "/api2/json/removeUserAccount/{token}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (token != null) localVarPathParams.Add("token", this.Configuration.ApiClient.ParameterToString(token)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarHeaderParams["X-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-API-KEY");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RemoveUserAccount", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<APIPlanSubscriptionOut>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (APIPlanSubscriptionOut) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(APIPlanSubscriptionOut)));
        }

        /// <summary>
        /// Remove (on behalf) a user account. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <returns>APIPlanSubscriptionOut</returns>
        public APIPlanSubscriptionOut RemoveUserAccountOnBehalf (string apiKey)
        {
             ApiResponse<APIPlanSubscriptionOut> localVarResponse = RemoveUserAccountOnBehalfWithHttpInfo(apiKey);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Remove (on behalf) a user account. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <returns>ApiResponse of APIPlanSubscriptionOut</returns>
        public ApiResponse< APIPlanSubscriptionOut > RemoveUserAccountOnBehalfWithHttpInfo (string apiKey)
        {
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
                throw new ApiException(400, "Missing required parameter 'apiKey' when calling AdminApi->RemoveUserAccountOnBehalf");

            var localVarPath = "/api2/json/removeUserAccountOnBehalf/{apiKey}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiKey != null) localVarPathParams.Add("apiKey", this.Configuration.ApiClient.ParameterToString(apiKey)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarHeaderParams["X-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-API-KEY");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RemoveUserAccountOnBehalf", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<APIPlanSubscriptionOut>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (APIPlanSubscriptionOut) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(APIPlanSubscriptionOut)));
        }

        /// <summary>
        /// Remove (on behalf) a user account. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <returns>Task of APIPlanSubscriptionOut</returns>
        public async System.Threading.Tasks.Task<APIPlanSubscriptionOut> RemoveUserAccountOnBehalfAsync (string apiKey)
        {
             ApiResponse<APIPlanSubscriptionOut> localVarResponse = await RemoveUserAccountOnBehalfAsyncWithHttpInfo(apiKey);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Remove (on behalf) a user account. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <returns>Task of ApiResponse (APIPlanSubscriptionOut)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<APIPlanSubscriptionOut>> RemoveUserAccountOnBehalfAsyncWithHttpInfo (string apiKey)
        {
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
                throw new ApiException(400, "Missing required parameter 'apiKey' when calling AdminApi->RemoveUserAccountOnBehalf");

            var localVarPath = "/api2/json/removeUserAccountOnBehalf/{apiKey}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiKey != null) localVarPathParams.Add("apiKey", this.Configuration.ApiClient.ParameterToString(apiKey)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarHeaderParams["X-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-API-KEY");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RemoveUserAccountOnBehalf", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<APIPlanSubscriptionOut>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (APIPlanSubscriptionOut) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(APIPlanSubscriptionOut)));
        }

        /// <summary>
        /// Stop learning and shutdown system. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        public void Shutdown ()
        {
             ShutdownWithHttpInfo();
        }

        /// <summary>
        /// Stop learning and shutdown system. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ShutdownWithHttpInfo ()
        {

            var localVarPath = "/api2/json/shutdown";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarHeaderParams["X-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-API-KEY");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Shutdown", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Stop learning and shutdown system. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ShutdownAsync ()
        {
             await ShutdownAsyncWithHttpInfo();

        }

        /// <summary>
        /// Stop learning and shutdown system. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ShutdownAsyncWithHttpInfo ()
        {

            var localVarPath = "/api2/json/shutdown";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarHeaderParams["X-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-API-KEY");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Shutdown", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get the current software version 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>SoftwareVersionOut</returns>
        public SoftwareVersionOut SoftwareVersion ()
        {
             ApiResponse<SoftwareVersionOut> localVarResponse = SoftwareVersionWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get the current software version 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of SoftwareVersionOut</returns>
        public ApiResponse< SoftwareVersionOut > SoftwareVersionWithHttpInfo ()
        {

            var localVarPath = "/api2/json/softwareVersion";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarHeaderParams["X-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-API-KEY");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SoftwareVersion", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SoftwareVersionOut>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SoftwareVersionOut) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SoftwareVersionOut)));
        }

        /// <summary>
        /// Get the current software version 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of SoftwareVersionOut</returns>
        public async System.Threading.Tasks.Task<SoftwareVersionOut> SoftwareVersionAsync ()
        {
             ApiResponse<SoftwareVersionOut> localVarResponse = await SoftwareVersionAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get the current software version 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (SoftwareVersionOut)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SoftwareVersionOut>> SoftwareVersionAsyncWithHttpInfo ()
        {

            var localVarPath = "/api2/json/softwareVersion";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarHeaderParams["X-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-API-KEY");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SoftwareVersion", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SoftwareVersionOut>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SoftwareVersionOut) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SoftwareVersionOut)));
        }

        /// <summary>
        /// Print basic source statistics. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="source"></param>
        /// <returns>SystemMetricsOut</returns>
        public SystemMetricsOut SourceStats (string source)
        {
             ApiResponse<SystemMetricsOut> localVarResponse = SourceStatsWithHttpInfo(source);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Print basic source statistics. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="source"></param>
        /// <returns>ApiResponse of SystemMetricsOut</returns>
        public ApiResponse< SystemMetricsOut > SourceStatsWithHttpInfo (string source)
        {
            // verify the required parameter 'source' is set
            if (source == null)
                throw new ApiException(400, "Missing required parameter 'source' when calling AdminApi->SourceStats");

            var localVarPath = "/api2/json/sourceStats/{source}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (source != null) localVarPathParams.Add("source", this.Configuration.ApiClient.ParameterToString(source)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarHeaderParams["X-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-API-KEY");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SourceStats", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SystemMetricsOut>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SystemMetricsOut) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SystemMetricsOut)));
        }

        /// <summary>
        /// Print basic source statistics. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="source"></param>
        /// <returns>Task of SystemMetricsOut</returns>
        public async System.Threading.Tasks.Task<SystemMetricsOut> SourceStatsAsync (string source)
        {
             ApiResponse<SystemMetricsOut> localVarResponse = await SourceStatsAsyncWithHttpInfo(source);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Print basic source statistics. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="source"></param>
        /// <returns>Task of ApiResponse (SystemMetricsOut)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SystemMetricsOut>> SourceStatsAsyncWithHttpInfo (string source)
        {
            // verify the required parameter 'source' is set
            if (source == null)
                throw new ApiException(400, "Missing required parameter 'source' when calling AdminApi->SourceStats");

            var localVarPath = "/api2/json/sourceStats/{source}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (source != null) localVarPathParams.Add("source", this.Configuration.ApiClient.ParameterToString(source)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarHeaderParams["X-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-API-KEY");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SourceStats", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SystemMetricsOut>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SystemMetricsOut) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SystemMetricsOut)));
        }

        /// <summary>
        /// Print basic system statistics. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>SystemMetricsOut</returns>
        public SystemMetricsOut Stats ()
        {
             ApiResponse<SystemMetricsOut> localVarResponse = StatsWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Print basic system statistics. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of SystemMetricsOut</returns>
        public ApiResponse< SystemMetricsOut > StatsWithHttpInfo ()
        {

            var localVarPath = "/api2/json/stats";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarHeaderParams["X-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-API-KEY");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Stats", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SystemMetricsOut>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SystemMetricsOut) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SystemMetricsOut)));
        }

        /// <summary>
        /// Print basic system statistics. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of SystemMetricsOut</returns>
        public async System.Threading.Tasks.Task<SystemMetricsOut> StatsAsync ()
        {
             ApiResponse<SystemMetricsOut> localVarResponse = await StatsAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Print basic system statistics. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (SystemMetricsOut)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SystemMetricsOut>> StatsAsyncWithHttpInfo ()
        {

            var localVarPath = "/api2/json/stats";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarHeaderParams["X-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-API-KEY");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Stats", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SystemMetricsOut>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SystemMetricsOut) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SystemMetricsOut)));
        }

        /// <summary>
        /// Connects a Stripe Account. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope"> (optional)</param>
        /// <param name="code"> (optional)</param>
        /// <param name="error"> (optional)</param>
        /// <param name="errorDescription"> (optional)</param>
        /// <returns></returns>
        public void StripeConnect (string scope = null, string code = null, string error = null, string errorDescription = null)
        {
             StripeConnectWithHttpInfo(scope, code, error, errorDescription);
        }

        /// <summary>
        /// Connects a Stripe Account. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope"> (optional)</param>
        /// <param name="code"> (optional)</param>
        /// <param name="error"> (optional)</param>
        /// <param name="errorDescription"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> StripeConnectWithHttpInfo (string scope = null, string code = null, string error = null, string errorDescription = null)
        {

            var localVarPath = "/api2/json/stripeConnect";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (scope != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "scope", scope)); // query parameter
            if (code != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "code", code)); // query parameter
            if (error != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "error", error)); // query parameter
            if (errorDescription != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "error_description", errorDescription)); // query parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarHeaderParams["X-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-API-KEY");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StripeConnect", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Connects a Stripe Account. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope"> (optional)</param>
        /// <param name="code"> (optional)</param>
        /// <param name="error"> (optional)</param>
        /// <param name="errorDescription"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task StripeConnectAsync (string scope = null, string code = null, string error = null, string errorDescription = null)
        {
             await StripeConnectAsyncWithHttpInfo(scope, code, error, errorDescription);

        }

        /// <summary>
        /// Connects a Stripe Account. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope"> (optional)</param>
        /// <param name="code"> (optional)</param>
        /// <param name="error"> (optional)</param>
        /// <param name="errorDescription"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> StripeConnectAsyncWithHttpInfo (string scope = null, string code = null, string error = null, string errorDescription = null)
        {

            var localVarPath = "/api2/json/stripeConnect";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (scope != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "scope", scope)); // query parameter
            if (code != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "code", code)); // query parameter
            if (error != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "error", error)); // query parameter
            if (errorDescription != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "error_description", errorDescription)); // query parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarHeaderParams["X-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-API-KEY");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StripeConnect", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Subscribe to a give API plan, using the user&#39;s preferred or default currency. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="planName"></param>
        /// <param name="token"></param>
        /// <returns>APIPlanSubscriptionOut</returns>
        public APIPlanSubscriptionOut SubscribePlan (string planName, string token)
        {
             ApiResponse<APIPlanSubscriptionOut> localVarResponse = SubscribePlanWithHttpInfo(planName, token);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Subscribe to a give API plan, using the user&#39;s preferred or default currency. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="planName"></param>
        /// <param name="token"></param>
        /// <returns>ApiResponse of APIPlanSubscriptionOut</returns>
        public ApiResponse< APIPlanSubscriptionOut > SubscribePlanWithHttpInfo (string planName, string token)
        {
            // verify the required parameter 'planName' is set
            if (planName == null)
                throw new ApiException(400, "Missing required parameter 'planName' when calling AdminApi->SubscribePlan");
            // verify the required parameter 'token' is set
            if (token == null)
                throw new ApiException(400, "Missing required parameter 'token' when calling AdminApi->SubscribePlan");

            var localVarPath = "/api2/json/subscribePlan/{planName}/{token}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (planName != null) localVarPathParams.Add("planName", this.Configuration.ApiClient.ParameterToString(planName)); // path parameter
            if (token != null) localVarPathParams.Add("token", this.Configuration.ApiClient.ParameterToString(token)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarHeaderParams["X-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-API-KEY");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SubscribePlan", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<APIPlanSubscriptionOut>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (APIPlanSubscriptionOut) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(APIPlanSubscriptionOut)));
        }

        /// <summary>
        /// Subscribe to a give API plan, using the user&#39;s preferred or default currency. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="planName"></param>
        /// <param name="token"></param>
        /// <returns>Task of APIPlanSubscriptionOut</returns>
        public async System.Threading.Tasks.Task<APIPlanSubscriptionOut> SubscribePlanAsync (string planName, string token)
        {
             ApiResponse<APIPlanSubscriptionOut> localVarResponse = await SubscribePlanAsyncWithHttpInfo(planName, token);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Subscribe to a give API plan, using the user&#39;s preferred or default currency. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="planName"></param>
        /// <param name="token"></param>
        /// <returns>Task of ApiResponse (APIPlanSubscriptionOut)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<APIPlanSubscriptionOut>> SubscribePlanAsyncWithHttpInfo (string planName, string token)
        {
            // verify the required parameter 'planName' is set
            if (planName == null)
                throw new ApiException(400, "Missing required parameter 'planName' when calling AdminApi->SubscribePlan");
            // verify the required parameter 'token' is set
            if (token == null)
                throw new ApiException(400, "Missing required parameter 'token' when calling AdminApi->SubscribePlan");

            var localVarPath = "/api2/json/subscribePlan/{planName}/{token}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (planName != null) localVarPathParams.Add("planName", this.Configuration.ApiClient.ParameterToString(planName)); // path parameter
            if (token != null) localVarPathParams.Add("token", this.Configuration.ApiClient.ParameterToString(token)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarHeaderParams["X-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-API-KEY");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SubscribePlan", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<APIPlanSubscriptionOut>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (APIPlanSubscriptionOut) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(APIPlanSubscriptionOut)));
        }

        /// <summary>
        /// Subscribe to a give API plan, using the user&#39;s preferred or default currency (admin only). 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="planName"></param>
        /// <param name="apiKey"></param>
        /// <returns>APIPlanSubscriptionOut</returns>
        public APIPlanSubscriptionOut SubscribePlanOnBehalf (string planName, string apiKey)
        {
             ApiResponse<APIPlanSubscriptionOut> localVarResponse = SubscribePlanOnBehalfWithHttpInfo(planName, apiKey);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Subscribe to a give API plan, using the user&#39;s preferred or default currency (admin only). 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="planName"></param>
        /// <param name="apiKey"></param>
        /// <returns>ApiResponse of APIPlanSubscriptionOut</returns>
        public ApiResponse< APIPlanSubscriptionOut > SubscribePlanOnBehalfWithHttpInfo (string planName, string apiKey)
        {
            // verify the required parameter 'planName' is set
            if (planName == null)
                throw new ApiException(400, "Missing required parameter 'planName' when calling AdminApi->SubscribePlanOnBehalf");
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
                throw new ApiException(400, "Missing required parameter 'apiKey' when calling AdminApi->SubscribePlanOnBehalf");

            var localVarPath = "/api2/json/subscribePlanOnBehalf/{planName}/{apiKey}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (planName != null) localVarPathParams.Add("planName", this.Configuration.ApiClient.ParameterToString(planName)); // path parameter
            if (apiKey != null) localVarPathParams.Add("apiKey", this.Configuration.ApiClient.ParameterToString(apiKey)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarHeaderParams["X-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-API-KEY");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SubscribePlanOnBehalf", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<APIPlanSubscriptionOut>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (APIPlanSubscriptionOut) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(APIPlanSubscriptionOut)));
        }

        /// <summary>
        /// Subscribe to a give API plan, using the user&#39;s preferred or default currency (admin only). 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="planName"></param>
        /// <param name="apiKey"></param>
        /// <returns>Task of APIPlanSubscriptionOut</returns>
        public async System.Threading.Tasks.Task<APIPlanSubscriptionOut> SubscribePlanOnBehalfAsync (string planName, string apiKey)
        {
             ApiResponse<APIPlanSubscriptionOut> localVarResponse = await SubscribePlanOnBehalfAsyncWithHttpInfo(planName, apiKey);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Subscribe to a give API plan, using the user&#39;s preferred or default currency (admin only). 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="planName"></param>
        /// <param name="apiKey"></param>
        /// <returns>Task of ApiResponse (APIPlanSubscriptionOut)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<APIPlanSubscriptionOut>> SubscribePlanOnBehalfAsyncWithHttpInfo (string planName, string apiKey)
        {
            // verify the required parameter 'planName' is set
            if (planName == null)
                throw new ApiException(400, "Missing required parameter 'planName' when calling AdminApi->SubscribePlanOnBehalf");
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
                throw new ApiException(400, "Missing required parameter 'apiKey' when calling AdminApi->SubscribePlanOnBehalf");

            var localVarPath = "/api2/json/subscribePlanOnBehalf/{planName}/{apiKey}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (planName != null) localVarPathParams.Add("planName", this.Configuration.ApiClient.ParameterToString(planName)); // path parameter
            if (apiKey != null) localVarPathParams.Add("apiKey", this.Configuration.ApiClient.ParameterToString(apiKey)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarHeaderParams["X-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-API-KEY");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SubscribePlanOnBehalf", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<APIPlanSubscriptionOut>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (APIPlanSubscriptionOut) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(APIPlanSubscriptionOut)));
        }

        /// <summary>
        /// Sets or update the billing information (company name, address, phone, vat ID) 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token"></param>
        /// <param name="billingInfoInOut"> (optional)</param>
        /// <returns>BillingInfoInOut</returns>
        public BillingInfoInOut UpdateBillingInfo (string token, BillingInfoInOut billingInfoInOut = null)
        {
             ApiResponse<BillingInfoInOut> localVarResponse = UpdateBillingInfoWithHttpInfo(token, billingInfoInOut);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Sets or update the billing information (company name, address, phone, vat ID) 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token"></param>
        /// <param name="billingInfoInOut"> (optional)</param>
        /// <returns>ApiResponse of BillingInfoInOut</returns>
        public ApiResponse< BillingInfoInOut > UpdateBillingInfoWithHttpInfo (string token, BillingInfoInOut billingInfoInOut = null)
        {
            // verify the required parameter 'token' is set
            if (token == null)
                throw new ApiException(400, "Missing required parameter 'token' when calling AdminApi->UpdateBillingInfo");

            var localVarPath = "/api2/json/updateBillingInfo/{token}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (token != null) localVarPathParams.Add("token", this.Configuration.ApiClient.ParameterToString(token)); // path parameter
            if (billingInfoInOut != null && billingInfoInOut.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(billingInfoInOut); // http body (model) parameter
            }
            else
            {
                localVarPostBody = billingInfoInOut; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarHeaderParams["X-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-API-KEY");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateBillingInfo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BillingInfoInOut>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BillingInfoInOut) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BillingInfoInOut)));
        }

        /// <summary>
        /// Sets or update the billing information (company name, address, phone, vat ID) 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token"></param>
        /// <param name="billingInfoInOut"> (optional)</param>
        /// <returns>Task of BillingInfoInOut</returns>
        public async System.Threading.Tasks.Task<BillingInfoInOut> UpdateBillingInfoAsync (string token, BillingInfoInOut billingInfoInOut = null)
        {
             ApiResponse<BillingInfoInOut> localVarResponse = await UpdateBillingInfoAsyncWithHttpInfo(token, billingInfoInOut);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Sets or update the billing information (company name, address, phone, vat ID) 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token"></param>
        /// <param name="billingInfoInOut"> (optional)</param>
        /// <returns>Task of ApiResponse (BillingInfoInOut)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BillingInfoInOut>> UpdateBillingInfoAsyncWithHttpInfo (string token, BillingInfoInOut billingInfoInOut = null)
        {
            // verify the required parameter 'token' is set
            if (token == null)
                throw new ApiException(400, "Missing required parameter 'token' when calling AdminApi->UpdateBillingInfo");

            var localVarPath = "/api2/json/updateBillingInfo/{token}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (token != null) localVarPathParams.Add("token", this.Configuration.ApiClient.ParameterToString(token)); // path parameter
            if (billingInfoInOut != null && billingInfoInOut.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(billingInfoInOut); // http body (model) parameter
            }
            else
            {
                localVarPostBody = billingInfoInOut; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarHeaderParams["X-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-API-KEY");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateBillingInfo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BillingInfoInOut>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BillingInfoInOut) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BillingInfoInOut)));
        }

        /// <summary>
        /// Modifies the hard/soft limit on the API plan&#39;s overages (default is 0$ soft limit). 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="usageLimit"></param>
        /// <param name="hardOrSoft"></param>
        /// <param name="token"></param>
        /// <returns>APIPeriodUsageOut</returns>
        public APIPeriodUsageOut UpdateLimit (int? usageLimit, bool? hardOrSoft, string token)
        {
             ApiResponse<APIPeriodUsageOut> localVarResponse = UpdateLimitWithHttpInfo(usageLimit, hardOrSoft, token);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Modifies the hard/soft limit on the API plan&#39;s overages (default is 0$ soft limit). 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="usageLimit"></param>
        /// <param name="hardOrSoft"></param>
        /// <param name="token"></param>
        /// <returns>ApiResponse of APIPeriodUsageOut</returns>
        public ApiResponse< APIPeriodUsageOut > UpdateLimitWithHttpInfo (int? usageLimit, bool? hardOrSoft, string token)
        {
            // verify the required parameter 'usageLimit' is set
            if (usageLimit == null)
                throw new ApiException(400, "Missing required parameter 'usageLimit' when calling AdminApi->UpdateLimit");
            // verify the required parameter 'hardOrSoft' is set
            if (hardOrSoft == null)
                throw new ApiException(400, "Missing required parameter 'hardOrSoft' when calling AdminApi->UpdateLimit");
            // verify the required parameter 'token' is set
            if (token == null)
                throw new ApiException(400, "Missing required parameter 'token' when calling AdminApi->UpdateLimit");

            var localVarPath = "/api2/json/updateLimit/{usageLimit}/{hardOrSoft}/{token}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (usageLimit != null) localVarPathParams.Add("usageLimit", this.Configuration.ApiClient.ParameterToString(usageLimit)); // path parameter
            if (hardOrSoft != null) localVarPathParams.Add("hardOrSoft", this.Configuration.ApiClient.ParameterToString(hardOrSoft)); // path parameter
            if (token != null) localVarPathParams.Add("token", this.Configuration.ApiClient.ParameterToString(token)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarHeaderParams["X-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-API-KEY");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateLimit", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<APIPeriodUsageOut>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (APIPeriodUsageOut) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(APIPeriodUsageOut)));
        }

        /// <summary>
        /// Modifies the hard/soft limit on the API plan&#39;s overages (default is 0$ soft limit). 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="usageLimit"></param>
        /// <param name="hardOrSoft"></param>
        /// <param name="token"></param>
        /// <returns>Task of APIPeriodUsageOut</returns>
        public async System.Threading.Tasks.Task<APIPeriodUsageOut> UpdateLimitAsync (int? usageLimit, bool? hardOrSoft, string token)
        {
             ApiResponse<APIPeriodUsageOut> localVarResponse = await UpdateLimitAsyncWithHttpInfo(usageLimit, hardOrSoft, token);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Modifies the hard/soft limit on the API plan&#39;s overages (default is 0$ soft limit). 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="usageLimit"></param>
        /// <param name="hardOrSoft"></param>
        /// <param name="token"></param>
        /// <returns>Task of ApiResponse (APIPeriodUsageOut)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<APIPeriodUsageOut>> UpdateLimitAsyncWithHttpInfo (int? usageLimit, bool? hardOrSoft, string token)
        {
            // verify the required parameter 'usageLimit' is set
            if (usageLimit == null)
                throw new ApiException(400, "Missing required parameter 'usageLimit' when calling AdminApi->UpdateLimit");
            // verify the required parameter 'hardOrSoft' is set
            if (hardOrSoft == null)
                throw new ApiException(400, "Missing required parameter 'hardOrSoft' when calling AdminApi->UpdateLimit");
            // verify the required parameter 'token' is set
            if (token == null)
                throw new ApiException(400, "Missing required parameter 'token' when calling AdminApi->UpdateLimit");

            var localVarPath = "/api2/json/updateLimit/{usageLimit}/{hardOrSoft}/{token}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (usageLimit != null) localVarPathParams.Add("usageLimit", this.Configuration.ApiClient.ParameterToString(usageLimit)); // path parameter
            if (hardOrSoft != null) localVarPathParams.Add("hardOrSoft", this.Configuration.ApiClient.ParameterToString(hardOrSoft)); // path parameter
            if (token != null) localVarPathParams.Add("token", this.Configuration.ApiClient.ParameterToString(token)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarHeaderParams["X-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-API-KEY");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateLimit", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<APIPeriodUsageOut>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (APIPeriodUsageOut) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(APIPeriodUsageOut)));
        }

        /// <summary>
        /// Update the default Stripe card associated with the current google auth session token. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="defautSourceId"></param>
        /// <param name="token"></param>
        /// <returns>APIKeyOut</returns>
        public APIKeyOut UpdatePaymentDefault (string defautSourceId, string token)
        {
             ApiResponse<APIKeyOut> localVarResponse = UpdatePaymentDefaultWithHttpInfo(defautSourceId, token);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update the default Stripe card associated with the current google auth session token. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="defautSourceId"></param>
        /// <param name="token"></param>
        /// <returns>ApiResponse of APIKeyOut</returns>
        public ApiResponse< APIKeyOut > UpdatePaymentDefaultWithHttpInfo (string defautSourceId, string token)
        {
            // verify the required parameter 'defautSourceId' is set
            if (defautSourceId == null)
                throw new ApiException(400, "Missing required parameter 'defautSourceId' when calling AdminApi->UpdatePaymentDefault");
            // verify the required parameter 'token' is set
            if (token == null)
                throw new ApiException(400, "Missing required parameter 'token' when calling AdminApi->UpdatePaymentDefault");

            var localVarPath = "/api2/json/updatePaymentDefault/{defautSourceId}/{token}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (defautSourceId != null) localVarPathParams.Add("defautSourceId", this.Configuration.ApiClient.ParameterToString(defautSourceId)); // path parameter
            if (token != null) localVarPathParams.Add("token", this.Configuration.ApiClient.ParameterToString(token)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarHeaderParams["X-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-API-KEY");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdatePaymentDefault", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<APIKeyOut>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (APIKeyOut) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(APIKeyOut)));
        }

        /// <summary>
        /// Update the default Stripe card associated with the current google auth session token. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="defautSourceId"></param>
        /// <param name="token"></param>
        /// <returns>Task of APIKeyOut</returns>
        public async System.Threading.Tasks.Task<APIKeyOut> UpdatePaymentDefaultAsync (string defautSourceId, string token)
        {
             ApiResponse<APIKeyOut> localVarResponse = await UpdatePaymentDefaultAsyncWithHttpInfo(defautSourceId, token);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update the default Stripe card associated with the current google auth session token. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="defautSourceId"></param>
        /// <param name="token"></param>
        /// <returns>Task of ApiResponse (APIKeyOut)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<APIKeyOut>> UpdatePaymentDefaultAsyncWithHttpInfo (string defautSourceId, string token)
        {
            // verify the required parameter 'defautSourceId' is set
            if (defautSourceId == null)
                throw new ApiException(400, "Missing required parameter 'defautSourceId' when calling AdminApi->UpdatePaymentDefault");
            // verify the required parameter 'token' is set
            if (token == null)
                throw new ApiException(400, "Missing required parameter 'token' when calling AdminApi->UpdatePaymentDefault");

            var localVarPath = "/api2/json/updatePaymentDefault/{defautSourceId}/{token}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (defautSourceId != null) localVarPathParams.Add("defautSourceId", this.Configuration.ApiClient.ParameterToString(defautSourceId)); // path parameter
            if (token != null) localVarPathParams.Add("token", this.Configuration.ApiClient.ParameterToString(token)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarHeaderParams["X-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-API-KEY");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdatePaymentDefault", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<APIKeyOut>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (APIKeyOut) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(APIKeyOut)));
        }

        /// <summary>
        /// Get the user profile associated with the current google auth session token. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token"></param>
        /// <returns>APIKeyOut</returns>
        public APIKeyOut UserInfo (string token)
        {
             ApiResponse<APIKeyOut> localVarResponse = UserInfoWithHttpInfo(token);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get the user profile associated with the current google auth session token. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token"></param>
        /// <returns>ApiResponse of APIKeyOut</returns>
        public ApiResponse< APIKeyOut > UserInfoWithHttpInfo (string token)
        {
            // verify the required parameter 'token' is set
            if (token == null)
                throw new ApiException(400, "Missing required parameter 'token' when calling AdminApi->UserInfo");

            var localVarPath = "/api2/json/userInfo/{token}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (token != null) localVarPathParams.Add("token", this.Configuration.ApiClient.ParameterToString(token)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarHeaderParams["X-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-API-KEY");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UserInfo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<APIKeyOut>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (APIKeyOut) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(APIKeyOut)));
        }

        /// <summary>
        /// Get the user profile associated with the current google auth session token. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token"></param>
        /// <returns>Task of APIKeyOut</returns>
        public async System.Threading.Tasks.Task<APIKeyOut> UserInfoAsync (string token)
        {
             ApiResponse<APIKeyOut> localVarResponse = await UserInfoAsyncWithHttpInfo(token);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get the user profile associated with the current google auth session token. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token"></param>
        /// <returns>Task of ApiResponse (APIKeyOut)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<APIKeyOut>> UserInfoAsyncWithHttpInfo (string token)
        {
            // verify the required parameter 'token' is set
            if (token == null)
                throw new ApiException(400, "Missing required parameter 'token' when calling AdminApi->UserInfo");

            var localVarPath = "/api2/json/userInfo/{token}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (token != null) localVarPathParams.Add("token", this.Configuration.ApiClient.ParameterToString(token)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarHeaderParams["X-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-API-KEY");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UserInfo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<APIKeyOut>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (APIKeyOut) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(APIKeyOut)));
        }

        /// <summary>
        /// Verifies an email, based on token sent to that email 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailToken"></param>
        /// <returns>APIKeyOut</returns>
        public APIKeyOut VerifyEmail (string emailToken)
        {
             ApiResponse<APIKeyOut> localVarResponse = VerifyEmailWithHttpInfo(emailToken);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Verifies an email, based on token sent to that email 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailToken"></param>
        /// <returns>ApiResponse of APIKeyOut</returns>
        public ApiResponse< APIKeyOut > VerifyEmailWithHttpInfo (string emailToken)
        {
            // verify the required parameter 'emailToken' is set
            if (emailToken == null)
                throw new ApiException(400, "Missing required parameter 'emailToken' when calling AdminApi->VerifyEmail");

            var localVarPath = "/api2/json/verifyEmail/{emailToken}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (emailToken != null) localVarPathParams.Add("emailToken", this.Configuration.ApiClient.ParameterToString(emailToken)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarHeaderParams["X-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-API-KEY");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("VerifyEmail", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<APIKeyOut>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (APIKeyOut) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(APIKeyOut)));
        }

        /// <summary>
        /// Verifies an email, based on token sent to that email 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailToken"></param>
        /// <returns>Task of APIKeyOut</returns>
        public async System.Threading.Tasks.Task<APIKeyOut> VerifyEmailAsync (string emailToken)
        {
             ApiResponse<APIKeyOut> localVarResponse = await VerifyEmailAsyncWithHttpInfo(emailToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Verifies an email, based on token sent to that email 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailToken"></param>
        /// <returns>Task of ApiResponse (APIKeyOut)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<APIKeyOut>> VerifyEmailAsyncWithHttpInfo (string emailToken)
        {
            // verify the required parameter 'emailToken' is set
            if (emailToken == null)
                throw new ApiException(400, "Missing required parameter 'emailToken' when calling AdminApi->VerifyEmail");

            var localVarPath = "/api2/json/verifyEmail/{emailToken}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (emailToken != null) localVarPathParams.Add("emailToken", this.Configuration.ApiClient.ParameterToString(emailToken)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarHeaderParams["X-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-API-KEY");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("VerifyEmail", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<APIKeyOut>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (APIKeyOut) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(APIKeyOut)));
        }

        /// <summary>
        /// Verifies an email, based on token sent to that email 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailToken"></param>
        /// <returns>APIKeyOut</returns>
        public APIKeyOut VerifyRemoveEmail (string emailToken)
        {
             ApiResponse<APIKeyOut> localVarResponse = VerifyRemoveEmailWithHttpInfo(emailToken);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Verifies an email, based on token sent to that email 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailToken"></param>
        /// <returns>ApiResponse of APIKeyOut</returns>
        public ApiResponse< APIKeyOut > VerifyRemoveEmailWithHttpInfo (string emailToken)
        {
            // verify the required parameter 'emailToken' is set
            if (emailToken == null)
                throw new ApiException(400, "Missing required parameter 'emailToken' when calling AdminApi->VerifyRemoveEmail");

            var localVarPath = "/api2/json/verifyRemoveEmail/{emailToken}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (emailToken != null) localVarPathParams.Add("emailToken", this.Configuration.ApiClient.ParameterToString(emailToken)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarHeaderParams["X-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-API-KEY");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("VerifyRemoveEmail", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<APIKeyOut>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (APIKeyOut) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(APIKeyOut)));
        }

        /// <summary>
        /// Verifies an email, based on token sent to that email 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailToken"></param>
        /// <returns>Task of APIKeyOut</returns>
        public async System.Threading.Tasks.Task<APIKeyOut> VerifyRemoveEmailAsync (string emailToken)
        {
             ApiResponse<APIKeyOut> localVarResponse = await VerifyRemoveEmailAsyncWithHttpInfo(emailToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Verifies an email, based on token sent to that email 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailToken"></param>
        /// <returns>Task of ApiResponse (APIKeyOut)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<APIKeyOut>> VerifyRemoveEmailAsyncWithHttpInfo (string emailToken)
        {
            // verify the required parameter 'emailToken' is set
            if (emailToken == null)
                throw new ApiException(400, "Missing required parameter 'emailToken' when calling AdminApi->VerifyRemoveEmail");

            var localVarPath = "/api2/json/verifyRemoveEmail/{emailToken}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (emailToken != null) localVarPathParams.Add("emailToken", this.Configuration.ApiClient.ParameterToString(emailToken)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarHeaderParams["X-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-API-KEY");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("VerifyRemoveEmail", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<APIKeyOut>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (APIKeyOut) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(APIKeyOut)));
        }

        /// <summary>
        /// Vetting of a source. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="source"></param>
        /// <param name="vetted"></param>
        /// <returns></returns>
        public void Vet (string source, bool? vetted)
        {
             VetWithHttpInfo(source, vetted);
        }

        /// <summary>
        /// Vetting of a source. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="source"></param>
        /// <param name="vetted"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> VetWithHttpInfo (string source, bool? vetted)
        {
            // verify the required parameter 'source' is set
            if (source == null)
                throw new ApiException(400, "Missing required parameter 'source' when calling AdminApi->Vet");
            // verify the required parameter 'vetted' is set
            if (vetted == null)
                throw new ApiException(400, "Missing required parameter 'vetted' when calling AdminApi->Vet");

            var localVarPath = "/api2/json/vetting/{source}/{vetted}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (source != null) localVarPathParams.Add("source", this.Configuration.ApiClient.ParameterToString(source)); // path parameter
            if (vetted != null) localVarPathParams.Add("vetted", this.Configuration.ApiClient.ParameterToString(vetted)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarHeaderParams["X-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-API-KEY");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Vet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Vetting of a source. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="source"></param>
        /// <param name="vetted"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task VetAsync (string source, bool? vetted)
        {
             await VetAsyncWithHttpInfo(source, vetted);

        }

        /// <summary>
        /// Vetting of a source. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="source"></param>
        /// <param name="vetted"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> VetAsyncWithHttpInfo (string source, bool? vetted)
        {
            // verify the required parameter 'source' is set
            if (source == null)
                throw new ApiException(400, "Missing required parameter 'source' when calling AdminApi->Vet");
            // verify the required parameter 'vetted' is set
            if (vetted == null)
                throw new ApiException(400, "Missing required parameter 'vetted' when calling AdminApi->Vet");

            var localVarPath = "/api2/json/vetting/{source}/{vetted}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (source != null) localVarPathParams.Add("source", this.Configuration.ApiClient.ParameterToString(source)); // path parameter
            if (vetted != null) localVarPathParams.Add("vetted", this.Configuration.ApiClient.ParameterToString(vetted)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarHeaderParams["X-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-API-KEY");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Vet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

    }
}
