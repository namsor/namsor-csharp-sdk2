/* 
 * NamSor API v2
 *
 * NamSor API v2 : enpoints to process personal names (gender, cultural origin or ethnicity) in all alphabets or languages. Use GET methods for small tests, but prefer POST methods for higher throughput (batch processing of up to 100 names at a time). Need something you can't find here? We have many more features coming soon. Let us know, we'll do our best to add it! 
 *
 * OpenAPI spec version: 2.0.8
 * Contact: contact@namsor.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.com.namsor.sdk2.model;

namespace Org.OpenAPITools.com.namsor.sdk2.api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPersonalApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer the likely country of residence of a personal full name, or one surname. Assumes names as they are in the country of residence OR the country of origin.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personalNameFull"></param>
        /// <returns>PersonalNameGeoOut</returns>
        PersonalNameGeoOut Country (string personalNameFull);

        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer the likely country of residence of a personal full name, or one surname. Assumes names as they are in the country of residence OR the country of origin.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personalNameFull"></param>
        /// <returns>ApiResponse of PersonalNameGeoOut</returns>
        ApiResponse<PersonalNameGeoOut> CountryWithHttpInfo (string personalNameFull);
        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer the likely country of residence of up to 100 personal full names, or surnames. Assumes names as they are in the country of residence OR the country of origin.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchPersonalNameIn">A list of personal names (optional)</param>
        /// <returns>BatchPersonalNameGeoOut</returns>
        BatchPersonalNameGeoOut CountryBatch (BatchPersonalNameIn batchPersonalNameIn = null);

        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer the likely country of residence of up to 100 personal full names, or surnames. Assumes names as they are in the country of residence OR the country of origin.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchPersonalNameIn">A list of personal names (optional)</param>
        /// <returns>ApiResponse of BatchPersonalNameGeoOut</returns>
        ApiResponse<BatchPersonalNameGeoOut> CountryBatchWithHttpInfo (BatchPersonalNameIn batchPersonalNameIn = null);
        /// <summary>
        /// [USES 20 UNITS PER NAME] Infer the likely ethnicity/diaspora of a personal name, given a country of residence ISO2 code (ex. US, CA, AU, NZ etc.)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countryIso2"></param>
        /// <param name="firstName"></param>
        /// <param name="lastName"></param>
        /// <returns>FirstLastNameDiasporaedOut</returns>
        FirstLastNameDiasporaedOut Diaspora (string countryIso2, string firstName, string lastName);

        /// <summary>
        /// [USES 20 UNITS PER NAME] Infer the likely ethnicity/diaspora of a personal name, given a country of residence ISO2 code (ex. US, CA, AU, NZ etc.)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countryIso2"></param>
        /// <param name="firstName"></param>
        /// <param name="lastName"></param>
        /// <returns>ApiResponse of FirstLastNameDiasporaedOut</returns>
        ApiResponse<FirstLastNameDiasporaedOut> DiasporaWithHttpInfo (string countryIso2, string firstName, string lastName);
        /// <summary>
        /// [USES 20 UNITS PER NAME] Infer the likely ethnicity/diaspora of up to 100 personal names, given a country of residence ISO2 code (ex. US, CA, AU, NZ etc.)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchFirstLastNameGeoIn">A list of personal names (optional)</param>
        /// <returns>BatchFirstLastNameDiasporaedOut</returns>
        BatchFirstLastNameDiasporaedOut DiasporaBatch (BatchFirstLastNameGeoIn batchFirstLastNameGeoIn = null);

        /// <summary>
        /// [USES 20 UNITS PER NAME] Infer the likely ethnicity/diaspora of up to 100 personal names, given a country of residence ISO2 code (ex. US, CA, AU, NZ etc.)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchFirstLastNameGeoIn">A list of personal names (optional)</param>
        /// <returns>ApiResponse of BatchFirstLastNameDiasporaedOut</returns>
        ApiResponse<BatchFirstLastNameDiasporaedOut> DiasporaBatchWithHttpInfo (BatchFirstLastNameGeoIn batchFirstLastNameGeoIn = null);
        /// <summary>
        /// Infer the likely gender of a name.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firstName"></param>
        /// <param name="lastName"></param>
        /// <returns>FirstLastNameGenderedOut</returns>
        FirstLastNameGenderedOut Gender (string firstName, string lastName);

        /// <summary>
        /// Infer the likely gender of a name.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firstName"></param>
        /// <param name="lastName"></param>
        /// <returns>ApiResponse of FirstLastNameGenderedOut</returns>
        ApiResponse<FirstLastNameGenderedOut> GenderWithHttpInfo (string firstName, string lastName);
        /// <summary>
        /// Infer the likely gender of up to 100 names, detecting automatically the cultural context.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchFirstLastNameIn">A list of personal names (optional)</param>
        /// <returns>BatchFirstLastNameGenderedOut</returns>
        BatchFirstLastNameGenderedOut GenderBatch (BatchFirstLastNameIn batchFirstLastNameIn = null);

        /// <summary>
        /// Infer the likely gender of up to 100 names, detecting automatically the cultural context.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchFirstLastNameIn">A list of personal names (optional)</param>
        /// <returns>ApiResponse of BatchFirstLastNameGenderedOut</returns>
        ApiResponse<BatchFirstLastNameGenderedOut> GenderBatchWithHttpInfo (BatchFirstLastNameIn batchFirstLastNameIn = null);
        /// <summary>
        /// Infer the likely gender of a full name, ex. John H. Smith
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fullName"></param>
        /// <returns>PersonalNameGenderedOut</returns>
        PersonalNameGenderedOut GenderFull (string fullName);

        /// <summary>
        /// Infer the likely gender of a full name, ex. John H. Smith
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fullName"></param>
        /// <returns>ApiResponse of PersonalNameGenderedOut</returns>
        ApiResponse<PersonalNameGenderedOut> GenderFullWithHttpInfo (string fullName);
        /// <summary>
        /// Infer the likely gender of up to 100 full names, detecting automatically the cultural context.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchPersonalNameIn">A list of personal names (optional)</param>
        /// <returns>BatchPersonalNameGenderedOut</returns>
        BatchPersonalNameGenderedOut GenderFullBatch (BatchPersonalNameIn batchPersonalNameIn = null);

        /// <summary>
        /// Infer the likely gender of up to 100 full names, detecting automatically the cultural context.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchPersonalNameIn">A list of personal names (optional)</param>
        /// <returns>ApiResponse of BatchPersonalNameGenderedOut</returns>
        ApiResponse<BatchPersonalNameGenderedOut> GenderFullBatchWithHttpInfo (BatchPersonalNameIn batchPersonalNameIn = null);
        /// <summary>
        /// Infer the likely gender of a full name, given a local context (ISO2 country code).
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fullName"></param>
        /// <param name="countryIso2"></param>
        /// <returns>PersonalNameGenderedOut</returns>
        PersonalNameGenderedOut GenderFullGeo (string fullName, string countryIso2);

        /// <summary>
        /// Infer the likely gender of a full name, given a local context (ISO2 country code).
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fullName"></param>
        /// <param name="countryIso2"></param>
        /// <returns>ApiResponse of PersonalNameGenderedOut</returns>
        ApiResponse<PersonalNameGenderedOut> GenderFullGeoWithHttpInfo (string fullName, string countryIso2);
        /// <summary>
        /// Infer the likely gender of up to 100 full names, with a given cultural context (country ISO2 code).
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchPersonalNameGeoIn">A list of personal names, with a country ISO2 code (optional)</param>
        /// <returns>BatchPersonalNameGenderedOut</returns>
        BatchPersonalNameGenderedOut GenderFullGeoBatch (BatchPersonalNameGeoIn batchPersonalNameGeoIn = null);

        /// <summary>
        /// Infer the likely gender of up to 100 full names, with a given cultural context (country ISO2 code).
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchPersonalNameGeoIn">A list of personal names, with a country ISO2 code (optional)</param>
        /// <returns>ApiResponse of BatchPersonalNameGenderedOut</returns>
        ApiResponse<BatchPersonalNameGenderedOut> GenderFullGeoBatchWithHttpInfo (BatchPersonalNameGeoIn batchPersonalNameGeoIn = null);
        /// <summary>
        /// Infer the likely gender of a name, given a local context (ISO2 country code).
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firstName"></param>
        /// <param name="lastName"></param>
        /// <param name="countryIso2"></param>
        /// <returns>FirstLastNameGenderedOut</returns>
        FirstLastNameGenderedOut GenderGeo (string firstName, string lastName, string countryIso2);

        /// <summary>
        /// Infer the likely gender of a name, given a local context (ISO2 country code).
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firstName"></param>
        /// <param name="lastName"></param>
        /// <param name="countryIso2"></param>
        /// <returns>ApiResponse of FirstLastNameGenderedOut</returns>
        ApiResponse<FirstLastNameGenderedOut> GenderGeoWithHttpInfo (string firstName, string lastName, string countryIso2);
        /// <summary>
        /// Infer the likely gender of up to 100 names, each given a local context (ISO2 country code).
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchFirstLastNameGeoIn">A list of names, with country code. (optional)</param>
        /// <returns>BatchFirstLastNameGenderedOut</returns>
        BatchFirstLastNameGenderedOut GenderGeoBatch (BatchFirstLastNameGeoIn batchFirstLastNameGeoIn = null);

        /// <summary>
        /// Infer the likely gender of up to 100 names, each given a local context (ISO2 country code).
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchFirstLastNameGeoIn">A list of names, with country code. (optional)</param>
        /// <returns>ApiResponse of BatchFirstLastNameGenderedOut</returns>
        ApiResponse<BatchFirstLastNameGenderedOut> GenderGeoBatchWithHttpInfo (BatchFirstLastNameGeoIn batchFirstLastNameGeoIn = null);
        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer the likely country of origin of a personal name. Assumes names as they are in the country of origin. For US, CA, AU, NZ and other melting-pots : use &#39;diaspora&#39; instead.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firstName"></param>
        /// <param name="lastName"></param>
        /// <returns>FirstLastNameOriginedOut</returns>
        FirstLastNameOriginedOut Origin (string firstName, string lastName);

        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer the likely country of origin of a personal name. Assumes names as they are in the country of origin. For US, CA, AU, NZ and other melting-pots : use &#39;diaspora&#39; instead.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firstName"></param>
        /// <param name="lastName"></param>
        /// <returns>ApiResponse of FirstLastNameOriginedOut</returns>
        ApiResponse<FirstLastNameOriginedOut> OriginWithHttpInfo (string firstName, string lastName);
        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer the likely country of origin of up to 100 names, detecting automatically the cultural context.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchFirstLastNameIn">A list of personal names (optional)</param>
        /// <returns>BatchFirstLastNameOriginedOut</returns>
        BatchFirstLastNameOriginedOut OriginBatch (BatchFirstLastNameIn batchFirstLastNameIn = null);

        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer the likely country of origin of up to 100 names, detecting automatically the cultural context.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchFirstLastNameIn">A list of personal names (optional)</param>
        /// <returns>ApiResponse of BatchFirstLastNameOriginedOut</returns>
        ApiResponse<BatchFirstLastNameOriginedOut> OriginBatchWithHttpInfo (BatchFirstLastNameIn batchFirstLastNameIn = null);
        /// <summary>
        /// Infer the likely first/last name structure of a name, ex. John Smith or SMITH, John or SMITH; John. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nameFull"></param>
        /// <returns>PersonalNameParsedOut</returns>
        PersonalNameParsedOut ParseName (string nameFull);

        /// <summary>
        /// Infer the likely first/last name structure of a name, ex. John Smith or SMITH, John or SMITH; John. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nameFull"></param>
        /// <returns>ApiResponse of PersonalNameParsedOut</returns>
        ApiResponse<PersonalNameParsedOut> ParseNameWithHttpInfo (string nameFull);
        /// <summary>
        /// Infer the likely first/last name structure of a name, ex. John Smith or SMITH, John or SMITH; John.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchPersonalNameIn">A list of personal names (optional)</param>
        /// <returns>BatchPersonalNameParsedOut</returns>
        BatchPersonalNameParsedOut ParseNameBatch (BatchPersonalNameIn batchPersonalNameIn = null);

        /// <summary>
        /// Infer the likely first/last name structure of a name, ex. John Smith or SMITH, John or SMITH; John.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchPersonalNameIn">A list of personal names (optional)</param>
        /// <returns>ApiResponse of BatchPersonalNameParsedOut</returns>
        ApiResponse<BatchPersonalNameParsedOut> ParseNameBatchWithHttpInfo (BatchPersonalNameIn batchPersonalNameIn = null);
        /// <summary>
        /// Infer the likely first/last name structure of a name, ex. John Smith or SMITH, John or SMITH; John. For better accuracy, provide a geographic context.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nameFull"></param>
        /// <param name="countryIso2"></param>
        /// <returns>PersonalNameParsedOut</returns>
        PersonalNameParsedOut ParseNameGeo (string nameFull, string countryIso2);

        /// <summary>
        /// Infer the likely first/last name structure of a name, ex. John Smith or SMITH, John or SMITH; John. For better accuracy, provide a geographic context.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nameFull"></param>
        /// <param name="countryIso2"></param>
        /// <returns>ApiResponse of PersonalNameParsedOut</returns>
        ApiResponse<PersonalNameParsedOut> ParseNameGeoWithHttpInfo (string nameFull, string countryIso2);
        /// <summary>
        /// Infer the likely first/last name structure of a name, ex. John Smith or SMITH, John or SMITH; John. Giving a local context improves precision. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchPersonalNameGeoIn">A list of personal names (optional)</param>
        /// <returns>BatchPersonalNameParsedOut</returns>
        BatchPersonalNameParsedOut ParseNameGeoBatch (BatchPersonalNameGeoIn batchPersonalNameGeoIn = null);

        /// <summary>
        /// Infer the likely first/last name structure of a name, ex. John Smith or SMITH, John or SMITH; John. Giving a local context improves precision. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchPersonalNameGeoIn">A list of personal names (optional)</param>
        /// <returns>ApiResponse of BatchPersonalNameParsedOut</returns>
        ApiResponse<BatchPersonalNameParsedOut> ParseNameGeoBatchWithHttpInfo (BatchPersonalNameGeoIn batchPersonalNameGeoIn = null);
        /// <summary>
        /// Infer the likely gender of up to 100 fully parsed names, detecting automatically the cultural context.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchParsedFullNameIn">A list of personal names (optional)</param>
        /// <returns>BatchFirstLastNameGenderedOut</returns>
        BatchFirstLastNameGenderedOut ParsedGenderBatch (BatchParsedFullNameIn batchParsedFullNameIn = null);

        /// <summary>
        /// Infer the likely gender of up to 100 fully parsed names, detecting automatically the cultural context.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchParsedFullNameIn">A list of personal names (optional)</param>
        /// <returns>ApiResponse of BatchFirstLastNameGenderedOut</returns>
        ApiResponse<BatchFirstLastNameGenderedOut> ParsedGenderBatchWithHttpInfo (BatchParsedFullNameIn batchParsedFullNameIn = null);
        /// <summary>
        /// Infer the likely gender of up to 100 fully parsed names, detecting automatically the cultural context.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchParsedFullNameGeoIn">A list of personal names (optional)</param>
        /// <returns>BatchFirstLastNameGenderedOut</returns>
        BatchFirstLastNameGenderedOut ParsedGenderGeoBatch (BatchParsedFullNameGeoIn batchParsedFullNameGeoIn = null);

        /// <summary>
        /// Infer the likely gender of up to 100 fully parsed names, detecting automatically the cultural context.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchParsedFullNameGeoIn">A list of personal names (optional)</param>
        /// <returns>ApiResponse of BatchFirstLastNameGenderedOut</returns>
        ApiResponse<BatchFirstLastNameGenderedOut> ParsedGenderGeoBatchWithHttpInfo (BatchParsedFullNameGeoIn batchParsedFullNameGeoIn = null);
        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer a US resident&#39;s likely race/ethnicity according to US Census taxonomy W_NL (white, non latino), HL (hispano latino),  A (asian, non latino), B_NL (black, non latino).
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firstName"></param>
        /// <param name="lastName"></param>
        /// <returns>FirstLastNameUSRaceEthnicityOut</returns>
        FirstLastNameUSRaceEthnicityOut UsRaceEthnicity (string firstName, string lastName);

        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer a US resident&#39;s likely race/ethnicity according to US Census taxonomy W_NL (white, non latino), HL (hispano latino),  A (asian, non latino), B_NL (black, non latino).
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firstName"></param>
        /// <param name="lastName"></param>
        /// <returns>ApiResponse of FirstLastNameUSRaceEthnicityOut</returns>
        ApiResponse<FirstLastNameUSRaceEthnicityOut> UsRaceEthnicityWithHttpInfo (string firstName, string lastName);
        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer up-to 100 US resident&#39;s likely race/ethnicity according to US Census taxonomy.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchFirstLastNameGeoIn">A list of personal names (optional)</param>
        /// <returns>BatchFirstLastNameUSRaceEthnicityOut</returns>
        BatchFirstLastNameUSRaceEthnicityOut UsRaceEthnicityBatch (BatchFirstLastNameGeoIn batchFirstLastNameGeoIn = null);

        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer up-to 100 US resident&#39;s likely race/ethnicity according to US Census taxonomy.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchFirstLastNameGeoIn">A list of personal names (optional)</param>
        /// <returns>ApiResponse of BatchFirstLastNameUSRaceEthnicityOut</returns>
        ApiResponse<BatchFirstLastNameUSRaceEthnicityOut> UsRaceEthnicityBatchWithHttpInfo (BatchFirstLastNameGeoIn batchFirstLastNameGeoIn = null);
        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer a US resident&#39;s likely race/ethnicity according to US Census taxonomy, using (optional) ZIP5 code info. Output is W_NL (white, non latino), HL (hispano latino),  A (asian, non latino), B_NL (black, non latino).
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firstName"></param>
        /// <param name="lastName"></param>
        /// <param name="zip5Code"></param>
        /// <returns>FirstLastNameUSRaceEthnicityOut</returns>
        FirstLastNameUSRaceEthnicityOut UsRaceEthnicityZIP5 (string firstName, string lastName, string zip5Code);

        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer a US resident&#39;s likely race/ethnicity according to US Census taxonomy, using (optional) ZIP5 code info. Output is W_NL (white, non latino), HL (hispano latino),  A (asian, non latino), B_NL (black, non latino).
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firstName"></param>
        /// <param name="lastName"></param>
        /// <param name="zip5Code"></param>
        /// <returns>ApiResponse of FirstLastNameUSRaceEthnicityOut</returns>
        ApiResponse<FirstLastNameUSRaceEthnicityOut> UsRaceEthnicityZIP5WithHttpInfo (string firstName, string lastName, string zip5Code);
        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer up-to 100 US resident&#39;s likely race/ethnicity according to US Census taxonomy, with (optional) ZIP code.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchFirstLastNameGeoZippedIn">A list of personal names (optional)</param>
        /// <returns>BatchFirstLastNameUSRaceEthnicityOut</returns>
        BatchFirstLastNameUSRaceEthnicityOut UsZipRaceEthnicityBatch (BatchFirstLastNameGeoZippedIn batchFirstLastNameGeoZippedIn = null);

        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer up-to 100 US resident&#39;s likely race/ethnicity according to US Census taxonomy, with (optional) ZIP code.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchFirstLastNameGeoZippedIn">A list of personal names (optional)</param>
        /// <returns>ApiResponse of BatchFirstLastNameUSRaceEthnicityOut</returns>
        ApiResponse<BatchFirstLastNameUSRaceEthnicityOut> UsZipRaceEthnicityBatchWithHttpInfo (BatchFirstLastNameGeoZippedIn batchFirstLastNameGeoZippedIn = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer the likely country of residence of a personal full name, or one surname. Assumes names as they are in the country of residence OR the country of origin.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personalNameFull"></param>
        /// <returns>Task of PersonalNameGeoOut</returns>
        System.Threading.Tasks.Task<PersonalNameGeoOut> CountryAsync (string personalNameFull);

        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer the likely country of residence of a personal full name, or one surname. Assumes names as they are in the country of residence OR the country of origin.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personalNameFull"></param>
        /// <returns>Task of ApiResponse (PersonalNameGeoOut)</returns>
        System.Threading.Tasks.Task<ApiResponse<PersonalNameGeoOut>> CountryAsyncWithHttpInfo (string personalNameFull);
        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer the likely country of residence of up to 100 personal full names, or surnames. Assumes names as they are in the country of residence OR the country of origin.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchPersonalNameIn">A list of personal names (optional)</param>
        /// <returns>Task of BatchPersonalNameGeoOut</returns>
        System.Threading.Tasks.Task<BatchPersonalNameGeoOut> CountryBatchAsync (BatchPersonalNameIn batchPersonalNameIn = null);

        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer the likely country of residence of up to 100 personal full names, or surnames. Assumes names as they are in the country of residence OR the country of origin.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchPersonalNameIn">A list of personal names (optional)</param>
        /// <returns>Task of ApiResponse (BatchPersonalNameGeoOut)</returns>
        System.Threading.Tasks.Task<ApiResponse<BatchPersonalNameGeoOut>> CountryBatchAsyncWithHttpInfo (BatchPersonalNameIn batchPersonalNameIn = null);
        /// <summary>
        /// [USES 20 UNITS PER NAME] Infer the likely ethnicity/diaspora of a personal name, given a country of residence ISO2 code (ex. US, CA, AU, NZ etc.)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countryIso2"></param>
        /// <param name="firstName"></param>
        /// <param name="lastName"></param>
        /// <returns>Task of FirstLastNameDiasporaedOut</returns>
        System.Threading.Tasks.Task<FirstLastNameDiasporaedOut> DiasporaAsync (string countryIso2, string firstName, string lastName);

        /// <summary>
        /// [USES 20 UNITS PER NAME] Infer the likely ethnicity/diaspora of a personal name, given a country of residence ISO2 code (ex. US, CA, AU, NZ etc.)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countryIso2"></param>
        /// <param name="firstName"></param>
        /// <param name="lastName"></param>
        /// <returns>Task of ApiResponse (FirstLastNameDiasporaedOut)</returns>
        System.Threading.Tasks.Task<ApiResponse<FirstLastNameDiasporaedOut>> DiasporaAsyncWithHttpInfo (string countryIso2, string firstName, string lastName);
        /// <summary>
        /// [USES 20 UNITS PER NAME] Infer the likely ethnicity/diaspora of up to 100 personal names, given a country of residence ISO2 code (ex. US, CA, AU, NZ etc.)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchFirstLastNameGeoIn">A list of personal names (optional)</param>
        /// <returns>Task of BatchFirstLastNameDiasporaedOut</returns>
        System.Threading.Tasks.Task<BatchFirstLastNameDiasporaedOut> DiasporaBatchAsync (BatchFirstLastNameGeoIn batchFirstLastNameGeoIn = null);

        /// <summary>
        /// [USES 20 UNITS PER NAME] Infer the likely ethnicity/diaspora of up to 100 personal names, given a country of residence ISO2 code (ex. US, CA, AU, NZ etc.)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchFirstLastNameGeoIn">A list of personal names (optional)</param>
        /// <returns>Task of ApiResponse (BatchFirstLastNameDiasporaedOut)</returns>
        System.Threading.Tasks.Task<ApiResponse<BatchFirstLastNameDiasporaedOut>> DiasporaBatchAsyncWithHttpInfo (BatchFirstLastNameGeoIn batchFirstLastNameGeoIn = null);
        /// <summary>
        /// Infer the likely gender of a name.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firstName"></param>
        /// <param name="lastName"></param>
        /// <returns>Task of FirstLastNameGenderedOut</returns>
        System.Threading.Tasks.Task<FirstLastNameGenderedOut> GenderAsync (string firstName, string lastName);

        /// <summary>
        /// Infer the likely gender of a name.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firstName"></param>
        /// <param name="lastName"></param>
        /// <returns>Task of ApiResponse (FirstLastNameGenderedOut)</returns>
        System.Threading.Tasks.Task<ApiResponse<FirstLastNameGenderedOut>> GenderAsyncWithHttpInfo (string firstName, string lastName);
        /// <summary>
        /// Infer the likely gender of up to 100 names, detecting automatically the cultural context.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchFirstLastNameIn">A list of personal names (optional)</param>
        /// <returns>Task of BatchFirstLastNameGenderedOut</returns>
        System.Threading.Tasks.Task<BatchFirstLastNameGenderedOut> GenderBatchAsync (BatchFirstLastNameIn batchFirstLastNameIn = null);

        /// <summary>
        /// Infer the likely gender of up to 100 names, detecting automatically the cultural context.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchFirstLastNameIn">A list of personal names (optional)</param>
        /// <returns>Task of ApiResponse (BatchFirstLastNameGenderedOut)</returns>
        System.Threading.Tasks.Task<ApiResponse<BatchFirstLastNameGenderedOut>> GenderBatchAsyncWithHttpInfo (BatchFirstLastNameIn batchFirstLastNameIn = null);
        /// <summary>
        /// Infer the likely gender of a full name, ex. John H. Smith
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fullName"></param>
        /// <returns>Task of PersonalNameGenderedOut</returns>
        System.Threading.Tasks.Task<PersonalNameGenderedOut> GenderFullAsync (string fullName);

        /// <summary>
        /// Infer the likely gender of a full name, ex. John H. Smith
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fullName"></param>
        /// <returns>Task of ApiResponse (PersonalNameGenderedOut)</returns>
        System.Threading.Tasks.Task<ApiResponse<PersonalNameGenderedOut>> GenderFullAsyncWithHttpInfo (string fullName);
        /// <summary>
        /// Infer the likely gender of up to 100 full names, detecting automatically the cultural context.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchPersonalNameIn">A list of personal names (optional)</param>
        /// <returns>Task of BatchPersonalNameGenderedOut</returns>
        System.Threading.Tasks.Task<BatchPersonalNameGenderedOut> GenderFullBatchAsync (BatchPersonalNameIn batchPersonalNameIn = null);

        /// <summary>
        /// Infer the likely gender of up to 100 full names, detecting automatically the cultural context.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchPersonalNameIn">A list of personal names (optional)</param>
        /// <returns>Task of ApiResponse (BatchPersonalNameGenderedOut)</returns>
        System.Threading.Tasks.Task<ApiResponse<BatchPersonalNameGenderedOut>> GenderFullBatchAsyncWithHttpInfo (BatchPersonalNameIn batchPersonalNameIn = null);
        /// <summary>
        /// Infer the likely gender of a full name, given a local context (ISO2 country code).
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fullName"></param>
        /// <param name="countryIso2"></param>
        /// <returns>Task of PersonalNameGenderedOut</returns>
        System.Threading.Tasks.Task<PersonalNameGenderedOut> GenderFullGeoAsync (string fullName, string countryIso2);

        /// <summary>
        /// Infer the likely gender of a full name, given a local context (ISO2 country code).
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fullName"></param>
        /// <param name="countryIso2"></param>
        /// <returns>Task of ApiResponse (PersonalNameGenderedOut)</returns>
        System.Threading.Tasks.Task<ApiResponse<PersonalNameGenderedOut>> GenderFullGeoAsyncWithHttpInfo (string fullName, string countryIso2);
        /// <summary>
        /// Infer the likely gender of up to 100 full names, with a given cultural context (country ISO2 code).
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchPersonalNameGeoIn">A list of personal names, with a country ISO2 code (optional)</param>
        /// <returns>Task of BatchPersonalNameGenderedOut</returns>
        System.Threading.Tasks.Task<BatchPersonalNameGenderedOut> GenderFullGeoBatchAsync (BatchPersonalNameGeoIn batchPersonalNameGeoIn = null);

        /// <summary>
        /// Infer the likely gender of up to 100 full names, with a given cultural context (country ISO2 code).
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchPersonalNameGeoIn">A list of personal names, with a country ISO2 code (optional)</param>
        /// <returns>Task of ApiResponse (BatchPersonalNameGenderedOut)</returns>
        System.Threading.Tasks.Task<ApiResponse<BatchPersonalNameGenderedOut>> GenderFullGeoBatchAsyncWithHttpInfo (BatchPersonalNameGeoIn batchPersonalNameGeoIn = null);
        /// <summary>
        /// Infer the likely gender of a name, given a local context (ISO2 country code).
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firstName"></param>
        /// <param name="lastName"></param>
        /// <param name="countryIso2"></param>
        /// <returns>Task of FirstLastNameGenderedOut</returns>
        System.Threading.Tasks.Task<FirstLastNameGenderedOut> GenderGeoAsync (string firstName, string lastName, string countryIso2);

        /// <summary>
        /// Infer the likely gender of a name, given a local context (ISO2 country code).
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firstName"></param>
        /// <param name="lastName"></param>
        /// <param name="countryIso2"></param>
        /// <returns>Task of ApiResponse (FirstLastNameGenderedOut)</returns>
        System.Threading.Tasks.Task<ApiResponse<FirstLastNameGenderedOut>> GenderGeoAsyncWithHttpInfo (string firstName, string lastName, string countryIso2);
        /// <summary>
        /// Infer the likely gender of up to 100 names, each given a local context (ISO2 country code).
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchFirstLastNameGeoIn">A list of names, with country code. (optional)</param>
        /// <returns>Task of BatchFirstLastNameGenderedOut</returns>
        System.Threading.Tasks.Task<BatchFirstLastNameGenderedOut> GenderGeoBatchAsync (BatchFirstLastNameGeoIn batchFirstLastNameGeoIn = null);

        /// <summary>
        /// Infer the likely gender of up to 100 names, each given a local context (ISO2 country code).
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchFirstLastNameGeoIn">A list of names, with country code. (optional)</param>
        /// <returns>Task of ApiResponse (BatchFirstLastNameGenderedOut)</returns>
        System.Threading.Tasks.Task<ApiResponse<BatchFirstLastNameGenderedOut>> GenderGeoBatchAsyncWithHttpInfo (BatchFirstLastNameGeoIn batchFirstLastNameGeoIn = null);
        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer the likely country of origin of a personal name. Assumes names as they are in the country of origin. For US, CA, AU, NZ and other melting-pots : use &#39;diaspora&#39; instead.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firstName"></param>
        /// <param name="lastName"></param>
        /// <returns>Task of FirstLastNameOriginedOut</returns>
        System.Threading.Tasks.Task<FirstLastNameOriginedOut> OriginAsync (string firstName, string lastName);

        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer the likely country of origin of a personal name. Assumes names as they are in the country of origin. For US, CA, AU, NZ and other melting-pots : use &#39;diaspora&#39; instead.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firstName"></param>
        /// <param name="lastName"></param>
        /// <returns>Task of ApiResponse (FirstLastNameOriginedOut)</returns>
        System.Threading.Tasks.Task<ApiResponse<FirstLastNameOriginedOut>> OriginAsyncWithHttpInfo (string firstName, string lastName);
        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer the likely country of origin of up to 100 names, detecting automatically the cultural context.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchFirstLastNameIn">A list of personal names (optional)</param>
        /// <returns>Task of BatchFirstLastNameOriginedOut</returns>
        System.Threading.Tasks.Task<BatchFirstLastNameOriginedOut> OriginBatchAsync (BatchFirstLastNameIn batchFirstLastNameIn = null);

        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer the likely country of origin of up to 100 names, detecting automatically the cultural context.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchFirstLastNameIn">A list of personal names (optional)</param>
        /// <returns>Task of ApiResponse (BatchFirstLastNameOriginedOut)</returns>
        System.Threading.Tasks.Task<ApiResponse<BatchFirstLastNameOriginedOut>> OriginBatchAsyncWithHttpInfo (BatchFirstLastNameIn batchFirstLastNameIn = null);
        /// <summary>
        /// Infer the likely first/last name structure of a name, ex. John Smith or SMITH, John or SMITH; John. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nameFull"></param>
        /// <returns>Task of PersonalNameParsedOut</returns>
        System.Threading.Tasks.Task<PersonalNameParsedOut> ParseNameAsync (string nameFull);

        /// <summary>
        /// Infer the likely first/last name structure of a name, ex. John Smith or SMITH, John or SMITH; John. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nameFull"></param>
        /// <returns>Task of ApiResponse (PersonalNameParsedOut)</returns>
        System.Threading.Tasks.Task<ApiResponse<PersonalNameParsedOut>> ParseNameAsyncWithHttpInfo (string nameFull);
        /// <summary>
        /// Infer the likely first/last name structure of a name, ex. John Smith or SMITH, John or SMITH; John.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchPersonalNameIn">A list of personal names (optional)</param>
        /// <returns>Task of BatchPersonalNameParsedOut</returns>
        System.Threading.Tasks.Task<BatchPersonalNameParsedOut> ParseNameBatchAsync (BatchPersonalNameIn batchPersonalNameIn = null);

        /// <summary>
        /// Infer the likely first/last name structure of a name, ex. John Smith or SMITH, John or SMITH; John.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchPersonalNameIn">A list of personal names (optional)</param>
        /// <returns>Task of ApiResponse (BatchPersonalNameParsedOut)</returns>
        System.Threading.Tasks.Task<ApiResponse<BatchPersonalNameParsedOut>> ParseNameBatchAsyncWithHttpInfo (BatchPersonalNameIn batchPersonalNameIn = null);
        /// <summary>
        /// Infer the likely first/last name structure of a name, ex. John Smith or SMITH, John or SMITH; John. For better accuracy, provide a geographic context.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nameFull"></param>
        /// <param name="countryIso2"></param>
        /// <returns>Task of PersonalNameParsedOut</returns>
        System.Threading.Tasks.Task<PersonalNameParsedOut> ParseNameGeoAsync (string nameFull, string countryIso2);

        /// <summary>
        /// Infer the likely first/last name structure of a name, ex. John Smith or SMITH, John or SMITH; John. For better accuracy, provide a geographic context.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nameFull"></param>
        /// <param name="countryIso2"></param>
        /// <returns>Task of ApiResponse (PersonalNameParsedOut)</returns>
        System.Threading.Tasks.Task<ApiResponse<PersonalNameParsedOut>> ParseNameGeoAsyncWithHttpInfo (string nameFull, string countryIso2);
        /// <summary>
        /// Infer the likely first/last name structure of a name, ex. John Smith or SMITH, John or SMITH; John. Giving a local context improves precision. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchPersonalNameGeoIn">A list of personal names (optional)</param>
        /// <returns>Task of BatchPersonalNameParsedOut</returns>
        System.Threading.Tasks.Task<BatchPersonalNameParsedOut> ParseNameGeoBatchAsync (BatchPersonalNameGeoIn batchPersonalNameGeoIn = null);

        /// <summary>
        /// Infer the likely first/last name structure of a name, ex. John Smith or SMITH, John or SMITH; John. Giving a local context improves precision. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchPersonalNameGeoIn">A list of personal names (optional)</param>
        /// <returns>Task of ApiResponse (BatchPersonalNameParsedOut)</returns>
        System.Threading.Tasks.Task<ApiResponse<BatchPersonalNameParsedOut>> ParseNameGeoBatchAsyncWithHttpInfo (BatchPersonalNameGeoIn batchPersonalNameGeoIn = null);
        /// <summary>
        /// Infer the likely gender of up to 100 fully parsed names, detecting automatically the cultural context.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchParsedFullNameIn">A list of personal names (optional)</param>
        /// <returns>Task of BatchFirstLastNameGenderedOut</returns>
        System.Threading.Tasks.Task<BatchFirstLastNameGenderedOut> ParsedGenderBatchAsync (BatchParsedFullNameIn batchParsedFullNameIn = null);

        /// <summary>
        /// Infer the likely gender of up to 100 fully parsed names, detecting automatically the cultural context.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchParsedFullNameIn">A list of personal names (optional)</param>
        /// <returns>Task of ApiResponse (BatchFirstLastNameGenderedOut)</returns>
        System.Threading.Tasks.Task<ApiResponse<BatchFirstLastNameGenderedOut>> ParsedGenderBatchAsyncWithHttpInfo (BatchParsedFullNameIn batchParsedFullNameIn = null);
        /// <summary>
        /// Infer the likely gender of up to 100 fully parsed names, detecting automatically the cultural context.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchParsedFullNameGeoIn">A list of personal names (optional)</param>
        /// <returns>Task of BatchFirstLastNameGenderedOut</returns>
        System.Threading.Tasks.Task<BatchFirstLastNameGenderedOut> ParsedGenderGeoBatchAsync (BatchParsedFullNameGeoIn batchParsedFullNameGeoIn = null);

        /// <summary>
        /// Infer the likely gender of up to 100 fully parsed names, detecting automatically the cultural context.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchParsedFullNameGeoIn">A list of personal names (optional)</param>
        /// <returns>Task of ApiResponse (BatchFirstLastNameGenderedOut)</returns>
        System.Threading.Tasks.Task<ApiResponse<BatchFirstLastNameGenderedOut>> ParsedGenderGeoBatchAsyncWithHttpInfo (BatchParsedFullNameGeoIn batchParsedFullNameGeoIn = null);
        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer a US resident&#39;s likely race/ethnicity according to US Census taxonomy W_NL (white, non latino), HL (hispano latino),  A (asian, non latino), B_NL (black, non latino).
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firstName"></param>
        /// <param name="lastName"></param>
        /// <returns>Task of FirstLastNameUSRaceEthnicityOut</returns>
        System.Threading.Tasks.Task<FirstLastNameUSRaceEthnicityOut> UsRaceEthnicityAsync (string firstName, string lastName);

        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer a US resident&#39;s likely race/ethnicity according to US Census taxonomy W_NL (white, non latino), HL (hispano latino),  A (asian, non latino), B_NL (black, non latino).
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firstName"></param>
        /// <param name="lastName"></param>
        /// <returns>Task of ApiResponse (FirstLastNameUSRaceEthnicityOut)</returns>
        System.Threading.Tasks.Task<ApiResponse<FirstLastNameUSRaceEthnicityOut>> UsRaceEthnicityAsyncWithHttpInfo (string firstName, string lastName);
        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer up-to 100 US resident&#39;s likely race/ethnicity according to US Census taxonomy.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchFirstLastNameGeoIn">A list of personal names (optional)</param>
        /// <returns>Task of BatchFirstLastNameUSRaceEthnicityOut</returns>
        System.Threading.Tasks.Task<BatchFirstLastNameUSRaceEthnicityOut> UsRaceEthnicityBatchAsync (BatchFirstLastNameGeoIn batchFirstLastNameGeoIn = null);

        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer up-to 100 US resident&#39;s likely race/ethnicity according to US Census taxonomy.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchFirstLastNameGeoIn">A list of personal names (optional)</param>
        /// <returns>Task of ApiResponse (BatchFirstLastNameUSRaceEthnicityOut)</returns>
        System.Threading.Tasks.Task<ApiResponse<BatchFirstLastNameUSRaceEthnicityOut>> UsRaceEthnicityBatchAsyncWithHttpInfo (BatchFirstLastNameGeoIn batchFirstLastNameGeoIn = null);
        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer a US resident&#39;s likely race/ethnicity according to US Census taxonomy, using (optional) ZIP5 code info. Output is W_NL (white, non latino), HL (hispano latino),  A (asian, non latino), B_NL (black, non latino).
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firstName"></param>
        /// <param name="lastName"></param>
        /// <param name="zip5Code"></param>
        /// <returns>Task of FirstLastNameUSRaceEthnicityOut</returns>
        System.Threading.Tasks.Task<FirstLastNameUSRaceEthnicityOut> UsRaceEthnicityZIP5Async (string firstName, string lastName, string zip5Code);

        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer a US resident&#39;s likely race/ethnicity according to US Census taxonomy, using (optional) ZIP5 code info. Output is W_NL (white, non latino), HL (hispano latino),  A (asian, non latino), B_NL (black, non latino).
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firstName"></param>
        /// <param name="lastName"></param>
        /// <param name="zip5Code"></param>
        /// <returns>Task of ApiResponse (FirstLastNameUSRaceEthnicityOut)</returns>
        System.Threading.Tasks.Task<ApiResponse<FirstLastNameUSRaceEthnicityOut>> UsRaceEthnicityZIP5AsyncWithHttpInfo (string firstName, string lastName, string zip5Code);
        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer up-to 100 US resident&#39;s likely race/ethnicity according to US Census taxonomy, with (optional) ZIP code.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchFirstLastNameGeoZippedIn">A list of personal names (optional)</param>
        /// <returns>Task of BatchFirstLastNameUSRaceEthnicityOut</returns>
        System.Threading.Tasks.Task<BatchFirstLastNameUSRaceEthnicityOut> UsZipRaceEthnicityBatchAsync (BatchFirstLastNameGeoZippedIn batchFirstLastNameGeoZippedIn = null);

        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer up-to 100 US resident&#39;s likely race/ethnicity according to US Census taxonomy, with (optional) ZIP code.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchFirstLastNameGeoZippedIn">A list of personal names (optional)</param>
        /// <returns>Task of ApiResponse (BatchFirstLastNameUSRaceEthnicityOut)</returns>
        System.Threading.Tasks.Task<ApiResponse<BatchFirstLastNameUSRaceEthnicityOut>> UsZipRaceEthnicityBatchAsyncWithHttpInfo (BatchFirstLastNameGeoZippedIn batchFirstLastNameGeoZippedIn = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class PersonalApi : IPersonalApi
    {
        private Org.OpenAPITools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="PersonalApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PersonalApi(String basePath)
        {
            this.Configuration = new Org.OpenAPITools.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PersonalApi"/> class
        /// </summary>
        /// <returns></returns>
        public PersonalApi()
        {
            this.Configuration = Org.OpenAPITools.Client.Configuration.Default;

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PersonalApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public PersonalApi(Org.OpenAPITools.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Org.OpenAPITools.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.OpenAPITools.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.OpenAPITools.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer the likely country of residence of a personal full name, or one surname. Assumes names as they are in the country of residence OR the country of origin. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personalNameFull"></param>
        /// <returns>PersonalNameGeoOut</returns>
        public PersonalNameGeoOut Country (string personalNameFull)
        {
             ApiResponse<PersonalNameGeoOut> localVarResponse = CountryWithHttpInfo(personalNameFull);
             return localVarResponse.Data;
        }

        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer the likely country of residence of a personal full name, or one surname. Assumes names as they are in the country of residence OR the country of origin. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personalNameFull"></param>
        /// <returns>ApiResponse of PersonalNameGeoOut</returns>
        public ApiResponse< PersonalNameGeoOut > CountryWithHttpInfo (string personalNameFull)
        {
            // verify the required parameter 'personalNameFull' is set
            if (personalNameFull == null)
                throw new ApiException(400, "Missing required parameter 'personalNameFull' when calling PersonalApi->Country");

            var localVarPath = "/api2/json/country/{personalNameFull}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (personalNameFull != null) localVarPathParams.Add("personalNameFull", this.Configuration.ApiClient.ParameterToString(personalNameFull)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarHeaderParams["X-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-API-KEY");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Country", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PersonalNameGeoOut>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PersonalNameGeoOut) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PersonalNameGeoOut)));
        }

        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer the likely country of residence of a personal full name, or one surname. Assumes names as they are in the country of residence OR the country of origin. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personalNameFull"></param>
        /// <returns>Task of PersonalNameGeoOut</returns>
        public async System.Threading.Tasks.Task<PersonalNameGeoOut> CountryAsync (string personalNameFull)
        {
             ApiResponse<PersonalNameGeoOut> localVarResponse = await CountryAsyncWithHttpInfo(personalNameFull);
             return localVarResponse.Data;

        }

        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer the likely country of residence of a personal full name, or one surname. Assumes names as they are in the country of residence OR the country of origin. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personalNameFull"></param>
        /// <returns>Task of ApiResponse (PersonalNameGeoOut)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PersonalNameGeoOut>> CountryAsyncWithHttpInfo (string personalNameFull)
        {
            // verify the required parameter 'personalNameFull' is set
            if (personalNameFull == null)
                throw new ApiException(400, "Missing required parameter 'personalNameFull' when calling PersonalApi->Country");

            var localVarPath = "/api2/json/country/{personalNameFull}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (personalNameFull != null) localVarPathParams.Add("personalNameFull", this.Configuration.ApiClient.ParameterToString(personalNameFull)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarHeaderParams["X-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-API-KEY");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Country", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PersonalNameGeoOut>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PersonalNameGeoOut) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PersonalNameGeoOut)));
        }

        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer the likely country of residence of up to 100 personal full names, or surnames. Assumes names as they are in the country of residence OR the country of origin. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchPersonalNameIn">A list of personal names (optional)</param>
        /// <returns>BatchPersonalNameGeoOut</returns>
        public BatchPersonalNameGeoOut CountryBatch (BatchPersonalNameIn batchPersonalNameIn = null)
        {
             ApiResponse<BatchPersonalNameGeoOut> localVarResponse = CountryBatchWithHttpInfo(batchPersonalNameIn);
             return localVarResponse.Data;
        }

        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer the likely country of residence of up to 100 personal full names, or surnames. Assumes names as they are in the country of residence OR the country of origin. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchPersonalNameIn">A list of personal names (optional)</param>
        /// <returns>ApiResponse of BatchPersonalNameGeoOut</returns>
        public ApiResponse< BatchPersonalNameGeoOut > CountryBatchWithHttpInfo (BatchPersonalNameIn batchPersonalNameIn = null)
        {

            var localVarPath = "/api2/json/countryBatch";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (batchPersonalNameIn != null && batchPersonalNameIn.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(batchPersonalNameIn); // http body (model) parameter
            }
            else
            {
                localVarPostBody = batchPersonalNameIn; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarHeaderParams["X-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-API-KEY");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CountryBatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BatchPersonalNameGeoOut>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BatchPersonalNameGeoOut) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BatchPersonalNameGeoOut)));
        }

        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer the likely country of residence of up to 100 personal full names, or surnames. Assumes names as they are in the country of residence OR the country of origin. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchPersonalNameIn">A list of personal names (optional)</param>
        /// <returns>Task of BatchPersonalNameGeoOut</returns>
        public async System.Threading.Tasks.Task<BatchPersonalNameGeoOut> CountryBatchAsync (BatchPersonalNameIn batchPersonalNameIn = null)
        {
             ApiResponse<BatchPersonalNameGeoOut> localVarResponse = await CountryBatchAsyncWithHttpInfo(batchPersonalNameIn);
             return localVarResponse.Data;

        }

        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer the likely country of residence of up to 100 personal full names, or surnames. Assumes names as they are in the country of residence OR the country of origin. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchPersonalNameIn">A list of personal names (optional)</param>
        /// <returns>Task of ApiResponse (BatchPersonalNameGeoOut)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BatchPersonalNameGeoOut>> CountryBatchAsyncWithHttpInfo (BatchPersonalNameIn batchPersonalNameIn = null)
        {

            var localVarPath = "/api2/json/countryBatch";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (batchPersonalNameIn != null && batchPersonalNameIn.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(batchPersonalNameIn); // http body (model) parameter
            }
            else
            {
                localVarPostBody = batchPersonalNameIn; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarHeaderParams["X-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-API-KEY");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CountryBatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BatchPersonalNameGeoOut>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BatchPersonalNameGeoOut) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BatchPersonalNameGeoOut)));
        }

        /// <summary>
        /// [USES 20 UNITS PER NAME] Infer the likely ethnicity/diaspora of a personal name, given a country of residence ISO2 code (ex. US, CA, AU, NZ etc.) 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countryIso2"></param>
        /// <param name="firstName"></param>
        /// <param name="lastName"></param>
        /// <returns>FirstLastNameDiasporaedOut</returns>
        public FirstLastNameDiasporaedOut Diaspora (string countryIso2, string firstName, string lastName)
        {
             ApiResponse<FirstLastNameDiasporaedOut> localVarResponse = DiasporaWithHttpInfo(countryIso2, firstName, lastName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// [USES 20 UNITS PER NAME] Infer the likely ethnicity/diaspora of a personal name, given a country of residence ISO2 code (ex. US, CA, AU, NZ etc.) 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countryIso2"></param>
        /// <param name="firstName"></param>
        /// <param name="lastName"></param>
        /// <returns>ApiResponse of FirstLastNameDiasporaedOut</returns>
        public ApiResponse< FirstLastNameDiasporaedOut > DiasporaWithHttpInfo (string countryIso2, string firstName, string lastName)
        {
            // verify the required parameter 'countryIso2' is set
            if (countryIso2 == null)
                throw new ApiException(400, "Missing required parameter 'countryIso2' when calling PersonalApi->Diaspora");
            // verify the required parameter 'firstName' is set
            if (firstName == null)
                throw new ApiException(400, "Missing required parameter 'firstName' when calling PersonalApi->Diaspora");
            // verify the required parameter 'lastName' is set
            if (lastName == null)
                throw new ApiException(400, "Missing required parameter 'lastName' when calling PersonalApi->Diaspora");

            var localVarPath = "/api2/json/diaspora/{countryIso2}/{firstName}/{lastName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (countryIso2 != null) localVarPathParams.Add("countryIso2", this.Configuration.ApiClient.ParameterToString(countryIso2)); // path parameter
            if (firstName != null) localVarPathParams.Add("firstName", this.Configuration.ApiClient.ParameterToString(firstName)); // path parameter
            if (lastName != null) localVarPathParams.Add("lastName", this.Configuration.ApiClient.ParameterToString(lastName)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarHeaderParams["X-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-API-KEY");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Diaspora", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FirstLastNameDiasporaedOut>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FirstLastNameDiasporaedOut) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FirstLastNameDiasporaedOut)));
        }

        /// <summary>
        /// [USES 20 UNITS PER NAME] Infer the likely ethnicity/diaspora of a personal name, given a country of residence ISO2 code (ex. US, CA, AU, NZ etc.) 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countryIso2"></param>
        /// <param name="firstName"></param>
        /// <param name="lastName"></param>
        /// <returns>Task of FirstLastNameDiasporaedOut</returns>
        public async System.Threading.Tasks.Task<FirstLastNameDiasporaedOut> DiasporaAsync (string countryIso2, string firstName, string lastName)
        {
             ApiResponse<FirstLastNameDiasporaedOut> localVarResponse = await DiasporaAsyncWithHttpInfo(countryIso2, firstName, lastName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// [USES 20 UNITS PER NAME] Infer the likely ethnicity/diaspora of a personal name, given a country of residence ISO2 code (ex. US, CA, AU, NZ etc.) 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countryIso2"></param>
        /// <param name="firstName"></param>
        /// <param name="lastName"></param>
        /// <returns>Task of ApiResponse (FirstLastNameDiasporaedOut)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FirstLastNameDiasporaedOut>> DiasporaAsyncWithHttpInfo (string countryIso2, string firstName, string lastName)
        {
            // verify the required parameter 'countryIso2' is set
            if (countryIso2 == null)
                throw new ApiException(400, "Missing required parameter 'countryIso2' when calling PersonalApi->Diaspora");
            // verify the required parameter 'firstName' is set
            if (firstName == null)
                throw new ApiException(400, "Missing required parameter 'firstName' when calling PersonalApi->Diaspora");
            // verify the required parameter 'lastName' is set
            if (lastName == null)
                throw new ApiException(400, "Missing required parameter 'lastName' when calling PersonalApi->Diaspora");

            var localVarPath = "/api2/json/diaspora/{countryIso2}/{firstName}/{lastName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (countryIso2 != null) localVarPathParams.Add("countryIso2", this.Configuration.ApiClient.ParameterToString(countryIso2)); // path parameter
            if (firstName != null) localVarPathParams.Add("firstName", this.Configuration.ApiClient.ParameterToString(firstName)); // path parameter
            if (lastName != null) localVarPathParams.Add("lastName", this.Configuration.ApiClient.ParameterToString(lastName)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarHeaderParams["X-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-API-KEY");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Diaspora", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FirstLastNameDiasporaedOut>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FirstLastNameDiasporaedOut) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FirstLastNameDiasporaedOut)));
        }

        /// <summary>
        /// [USES 20 UNITS PER NAME] Infer the likely ethnicity/diaspora of up to 100 personal names, given a country of residence ISO2 code (ex. US, CA, AU, NZ etc.) 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchFirstLastNameGeoIn">A list of personal names (optional)</param>
        /// <returns>BatchFirstLastNameDiasporaedOut</returns>
        public BatchFirstLastNameDiasporaedOut DiasporaBatch (BatchFirstLastNameGeoIn batchFirstLastNameGeoIn = null)
        {
             ApiResponse<BatchFirstLastNameDiasporaedOut> localVarResponse = DiasporaBatchWithHttpInfo(batchFirstLastNameGeoIn);
             return localVarResponse.Data;
        }

        /// <summary>
        /// [USES 20 UNITS PER NAME] Infer the likely ethnicity/diaspora of up to 100 personal names, given a country of residence ISO2 code (ex. US, CA, AU, NZ etc.) 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchFirstLastNameGeoIn">A list of personal names (optional)</param>
        /// <returns>ApiResponse of BatchFirstLastNameDiasporaedOut</returns>
        public ApiResponse< BatchFirstLastNameDiasporaedOut > DiasporaBatchWithHttpInfo (BatchFirstLastNameGeoIn batchFirstLastNameGeoIn = null)
        {

            var localVarPath = "/api2/json/diasporaBatch";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (batchFirstLastNameGeoIn != null && batchFirstLastNameGeoIn.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(batchFirstLastNameGeoIn); // http body (model) parameter
            }
            else
            {
                localVarPostBody = batchFirstLastNameGeoIn; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarHeaderParams["X-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-API-KEY");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DiasporaBatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BatchFirstLastNameDiasporaedOut>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BatchFirstLastNameDiasporaedOut) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BatchFirstLastNameDiasporaedOut)));
        }

        /// <summary>
        /// [USES 20 UNITS PER NAME] Infer the likely ethnicity/diaspora of up to 100 personal names, given a country of residence ISO2 code (ex. US, CA, AU, NZ etc.) 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchFirstLastNameGeoIn">A list of personal names (optional)</param>
        /// <returns>Task of BatchFirstLastNameDiasporaedOut</returns>
        public async System.Threading.Tasks.Task<BatchFirstLastNameDiasporaedOut> DiasporaBatchAsync (BatchFirstLastNameGeoIn batchFirstLastNameGeoIn = null)
        {
             ApiResponse<BatchFirstLastNameDiasporaedOut> localVarResponse = await DiasporaBatchAsyncWithHttpInfo(batchFirstLastNameGeoIn);
             return localVarResponse.Data;

        }

        /// <summary>
        /// [USES 20 UNITS PER NAME] Infer the likely ethnicity/diaspora of up to 100 personal names, given a country of residence ISO2 code (ex. US, CA, AU, NZ etc.) 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchFirstLastNameGeoIn">A list of personal names (optional)</param>
        /// <returns>Task of ApiResponse (BatchFirstLastNameDiasporaedOut)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BatchFirstLastNameDiasporaedOut>> DiasporaBatchAsyncWithHttpInfo (BatchFirstLastNameGeoIn batchFirstLastNameGeoIn = null)
        {

            var localVarPath = "/api2/json/diasporaBatch";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (batchFirstLastNameGeoIn != null && batchFirstLastNameGeoIn.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(batchFirstLastNameGeoIn); // http body (model) parameter
            }
            else
            {
                localVarPostBody = batchFirstLastNameGeoIn; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarHeaderParams["X-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-API-KEY");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DiasporaBatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BatchFirstLastNameDiasporaedOut>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BatchFirstLastNameDiasporaedOut) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BatchFirstLastNameDiasporaedOut)));
        }

        /// <summary>
        /// Infer the likely gender of a name. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firstName"></param>
        /// <param name="lastName"></param>
        /// <returns>FirstLastNameGenderedOut</returns>
        public FirstLastNameGenderedOut Gender (string firstName, string lastName)
        {
             ApiResponse<FirstLastNameGenderedOut> localVarResponse = GenderWithHttpInfo(firstName, lastName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Infer the likely gender of a name. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firstName"></param>
        /// <param name="lastName"></param>
        /// <returns>ApiResponse of FirstLastNameGenderedOut</returns>
        public ApiResponse< FirstLastNameGenderedOut > GenderWithHttpInfo (string firstName, string lastName)
        {
            // verify the required parameter 'firstName' is set
            if (firstName == null)
                throw new ApiException(400, "Missing required parameter 'firstName' when calling PersonalApi->Gender");
            // verify the required parameter 'lastName' is set
            if (lastName == null)
                throw new ApiException(400, "Missing required parameter 'lastName' when calling PersonalApi->Gender");

            var localVarPath = "/api2/json/gender/{firstName}/{lastName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (firstName != null) localVarPathParams.Add("firstName", this.Configuration.ApiClient.ParameterToString(firstName)); // path parameter
            if (lastName != null) localVarPathParams.Add("lastName", this.Configuration.ApiClient.ParameterToString(lastName)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarHeaderParams["X-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-API-KEY");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Gender", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FirstLastNameGenderedOut>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FirstLastNameGenderedOut) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FirstLastNameGenderedOut)));
        }

        /// <summary>
        /// Infer the likely gender of a name. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firstName"></param>
        /// <param name="lastName"></param>
        /// <returns>Task of FirstLastNameGenderedOut</returns>
        public async System.Threading.Tasks.Task<FirstLastNameGenderedOut> GenderAsync (string firstName, string lastName)
        {
             ApiResponse<FirstLastNameGenderedOut> localVarResponse = await GenderAsyncWithHttpInfo(firstName, lastName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Infer the likely gender of a name. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firstName"></param>
        /// <param name="lastName"></param>
        /// <returns>Task of ApiResponse (FirstLastNameGenderedOut)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FirstLastNameGenderedOut>> GenderAsyncWithHttpInfo (string firstName, string lastName)
        {
            // verify the required parameter 'firstName' is set
            if (firstName == null)
                throw new ApiException(400, "Missing required parameter 'firstName' when calling PersonalApi->Gender");
            // verify the required parameter 'lastName' is set
            if (lastName == null)
                throw new ApiException(400, "Missing required parameter 'lastName' when calling PersonalApi->Gender");

            var localVarPath = "/api2/json/gender/{firstName}/{lastName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (firstName != null) localVarPathParams.Add("firstName", this.Configuration.ApiClient.ParameterToString(firstName)); // path parameter
            if (lastName != null) localVarPathParams.Add("lastName", this.Configuration.ApiClient.ParameterToString(lastName)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarHeaderParams["X-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-API-KEY");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Gender", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FirstLastNameGenderedOut>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FirstLastNameGenderedOut) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FirstLastNameGenderedOut)));
        }

        /// <summary>
        /// Infer the likely gender of up to 100 names, detecting automatically the cultural context. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchFirstLastNameIn">A list of personal names (optional)</param>
        /// <returns>BatchFirstLastNameGenderedOut</returns>
        public BatchFirstLastNameGenderedOut GenderBatch (BatchFirstLastNameIn batchFirstLastNameIn = null)
        {
             ApiResponse<BatchFirstLastNameGenderedOut> localVarResponse = GenderBatchWithHttpInfo(batchFirstLastNameIn);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Infer the likely gender of up to 100 names, detecting automatically the cultural context. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchFirstLastNameIn">A list of personal names (optional)</param>
        /// <returns>ApiResponse of BatchFirstLastNameGenderedOut</returns>
        public ApiResponse< BatchFirstLastNameGenderedOut > GenderBatchWithHttpInfo (BatchFirstLastNameIn batchFirstLastNameIn = null)
        {

            var localVarPath = "/api2/json/genderBatch";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (batchFirstLastNameIn != null && batchFirstLastNameIn.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(batchFirstLastNameIn); // http body (model) parameter
            }
            else
            {
                localVarPostBody = batchFirstLastNameIn; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarHeaderParams["X-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-API-KEY");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GenderBatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BatchFirstLastNameGenderedOut>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BatchFirstLastNameGenderedOut) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BatchFirstLastNameGenderedOut)));
        }

        /// <summary>
        /// Infer the likely gender of up to 100 names, detecting automatically the cultural context. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchFirstLastNameIn">A list of personal names (optional)</param>
        /// <returns>Task of BatchFirstLastNameGenderedOut</returns>
        public async System.Threading.Tasks.Task<BatchFirstLastNameGenderedOut> GenderBatchAsync (BatchFirstLastNameIn batchFirstLastNameIn = null)
        {
             ApiResponse<BatchFirstLastNameGenderedOut> localVarResponse = await GenderBatchAsyncWithHttpInfo(batchFirstLastNameIn);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Infer the likely gender of up to 100 names, detecting automatically the cultural context. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchFirstLastNameIn">A list of personal names (optional)</param>
        /// <returns>Task of ApiResponse (BatchFirstLastNameGenderedOut)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BatchFirstLastNameGenderedOut>> GenderBatchAsyncWithHttpInfo (BatchFirstLastNameIn batchFirstLastNameIn = null)
        {

            var localVarPath = "/api2/json/genderBatch";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (batchFirstLastNameIn != null && batchFirstLastNameIn.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(batchFirstLastNameIn); // http body (model) parameter
            }
            else
            {
                localVarPostBody = batchFirstLastNameIn; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarHeaderParams["X-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-API-KEY");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GenderBatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BatchFirstLastNameGenderedOut>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BatchFirstLastNameGenderedOut) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BatchFirstLastNameGenderedOut)));
        }

        /// <summary>
        /// Infer the likely gender of a full name, ex. John H. Smith 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fullName"></param>
        /// <returns>PersonalNameGenderedOut</returns>
        public PersonalNameGenderedOut GenderFull (string fullName)
        {
             ApiResponse<PersonalNameGenderedOut> localVarResponse = GenderFullWithHttpInfo(fullName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Infer the likely gender of a full name, ex. John H. Smith 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fullName"></param>
        /// <returns>ApiResponse of PersonalNameGenderedOut</returns>
        public ApiResponse< PersonalNameGenderedOut > GenderFullWithHttpInfo (string fullName)
        {
            // verify the required parameter 'fullName' is set
            if (fullName == null)
                throw new ApiException(400, "Missing required parameter 'fullName' when calling PersonalApi->GenderFull");

            var localVarPath = "/api2/json/genderFull/{fullName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fullName != null) localVarPathParams.Add("fullName", this.Configuration.ApiClient.ParameterToString(fullName)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarHeaderParams["X-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-API-KEY");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GenderFull", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PersonalNameGenderedOut>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PersonalNameGenderedOut) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PersonalNameGenderedOut)));
        }

        /// <summary>
        /// Infer the likely gender of a full name, ex. John H. Smith 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fullName"></param>
        /// <returns>Task of PersonalNameGenderedOut</returns>
        public async System.Threading.Tasks.Task<PersonalNameGenderedOut> GenderFullAsync (string fullName)
        {
             ApiResponse<PersonalNameGenderedOut> localVarResponse = await GenderFullAsyncWithHttpInfo(fullName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Infer the likely gender of a full name, ex. John H. Smith 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fullName"></param>
        /// <returns>Task of ApiResponse (PersonalNameGenderedOut)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PersonalNameGenderedOut>> GenderFullAsyncWithHttpInfo (string fullName)
        {
            // verify the required parameter 'fullName' is set
            if (fullName == null)
                throw new ApiException(400, "Missing required parameter 'fullName' when calling PersonalApi->GenderFull");

            var localVarPath = "/api2/json/genderFull/{fullName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fullName != null) localVarPathParams.Add("fullName", this.Configuration.ApiClient.ParameterToString(fullName)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarHeaderParams["X-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-API-KEY");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GenderFull", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PersonalNameGenderedOut>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PersonalNameGenderedOut) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PersonalNameGenderedOut)));
        }

        /// <summary>
        /// Infer the likely gender of up to 100 full names, detecting automatically the cultural context. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchPersonalNameIn">A list of personal names (optional)</param>
        /// <returns>BatchPersonalNameGenderedOut</returns>
        public BatchPersonalNameGenderedOut GenderFullBatch (BatchPersonalNameIn batchPersonalNameIn = null)
        {
             ApiResponse<BatchPersonalNameGenderedOut> localVarResponse = GenderFullBatchWithHttpInfo(batchPersonalNameIn);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Infer the likely gender of up to 100 full names, detecting automatically the cultural context. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchPersonalNameIn">A list of personal names (optional)</param>
        /// <returns>ApiResponse of BatchPersonalNameGenderedOut</returns>
        public ApiResponse< BatchPersonalNameGenderedOut > GenderFullBatchWithHttpInfo (BatchPersonalNameIn batchPersonalNameIn = null)
        {

            var localVarPath = "/api2/json/genderFullBatch";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (batchPersonalNameIn != null && batchPersonalNameIn.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(batchPersonalNameIn); // http body (model) parameter
            }
            else
            {
                localVarPostBody = batchPersonalNameIn; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarHeaderParams["X-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-API-KEY");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GenderFullBatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BatchPersonalNameGenderedOut>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BatchPersonalNameGenderedOut) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BatchPersonalNameGenderedOut)));
        }

        /// <summary>
        /// Infer the likely gender of up to 100 full names, detecting automatically the cultural context. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchPersonalNameIn">A list of personal names (optional)</param>
        /// <returns>Task of BatchPersonalNameGenderedOut</returns>
        public async System.Threading.Tasks.Task<BatchPersonalNameGenderedOut> GenderFullBatchAsync (BatchPersonalNameIn batchPersonalNameIn = null)
        {
             ApiResponse<BatchPersonalNameGenderedOut> localVarResponse = await GenderFullBatchAsyncWithHttpInfo(batchPersonalNameIn);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Infer the likely gender of up to 100 full names, detecting automatically the cultural context. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchPersonalNameIn">A list of personal names (optional)</param>
        /// <returns>Task of ApiResponse (BatchPersonalNameGenderedOut)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BatchPersonalNameGenderedOut>> GenderFullBatchAsyncWithHttpInfo (BatchPersonalNameIn batchPersonalNameIn = null)
        {

            var localVarPath = "/api2/json/genderFullBatch";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (batchPersonalNameIn != null && batchPersonalNameIn.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(batchPersonalNameIn); // http body (model) parameter
            }
            else
            {
                localVarPostBody = batchPersonalNameIn; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarHeaderParams["X-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-API-KEY");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GenderFullBatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BatchPersonalNameGenderedOut>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BatchPersonalNameGenderedOut) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BatchPersonalNameGenderedOut)));
        }

        /// <summary>
        /// Infer the likely gender of a full name, given a local context (ISO2 country code). 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fullName"></param>
        /// <param name="countryIso2"></param>
        /// <returns>PersonalNameGenderedOut</returns>
        public PersonalNameGenderedOut GenderFullGeo (string fullName, string countryIso2)
        {
             ApiResponse<PersonalNameGenderedOut> localVarResponse = GenderFullGeoWithHttpInfo(fullName, countryIso2);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Infer the likely gender of a full name, given a local context (ISO2 country code). 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fullName"></param>
        /// <param name="countryIso2"></param>
        /// <returns>ApiResponse of PersonalNameGenderedOut</returns>
        public ApiResponse< PersonalNameGenderedOut > GenderFullGeoWithHttpInfo (string fullName, string countryIso2)
        {
            // verify the required parameter 'fullName' is set
            if (fullName == null)
                throw new ApiException(400, "Missing required parameter 'fullName' when calling PersonalApi->GenderFullGeo");
            // verify the required parameter 'countryIso2' is set
            if (countryIso2 == null)
                throw new ApiException(400, "Missing required parameter 'countryIso2' when calling PersonalApi->GenderFullGeo");

            var localVarPath = "/api2/json/genderFullGeo/{fullName}/{countryIso2}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fullName != null) localVarPathParams.Add("fullName", this.Configuration.ApiClient.ParameterToString(fullName)); // path parameter
            if (countryIso2 != null) localVarPathParams.Add("countryIso2", this.Configuration.ApiClient.ParameterToString(countryIso2)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarHeaderParams["X-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-API-KEY");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GenderFullGeo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PersonalNameGenderedOut>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PersonalNameGenderedOut) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PersonalNameGenderedOut)));
        }

        /// <summary>
        /// Infer the likely gender of a full name, given a local context (ISO2 country code). 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fullName"></param>
        /// <param name="countryIso2"></param>
        /// <returns>Task of PersonalNameGenderedOut</returns>
        public async System.Threading.Tasks.Task<PersonalNameGenderedOut> GenderFullGeoAsync (string fullName, string countryIso2)
        {
             ApiResponse<PersonalNameGenderedOut> localVarResponse = await GenderFullGeoAsyncWithHttpInfo(fullName, countryIso2);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Infer the likely gender of a full name, given a local context (ISO2 country code). 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fullName"></param>
        /// <param name="countryIso2"></param>
        /// <returns>Task of ApiResponse (PersonalNameGenderedOut)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PersonalNameGenderedOut>> GenderFullGeoAsyncWithHttpInfo (string fullName, string countryIso2)
        {
            // verify the required parameter 'fullName' is set
            if (fullName == null)
                throw new ApiException(400, "Missing required parameter 'fullName' when calling PersonalApi->GenderFullGeo");
            // verify the required parameter 'countryIso2' is set
            if (countryIso2 == null)
                throw new ApiException(400, "Missing required parameter 'countryIso2' when calling PersonalApi->GenderFullGeo");

            var localVarPath = "/api2/json/genderFullGeo/{fullName}/{countryIso2}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fullName != null) localVarPathParams.Add("fullName", this.Configuration.ApiClient.ParameterToString(fullName)); // path parameter
            if (countryIso2 != null) localVarPathParams.Add("countryIso2", this.Configuration.ApiClient.ParameterToString(countryIso2)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarHeaderParams["X-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-API-KEY");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GenderFullGeo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PersonalNameGenderedOut>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PersonalNameGenderedOut) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PersonalNameGenderedOut)));
        }

        /// <summary>
        /// Infer the likely gender of up to 100 full names, with a given cultural context (country ISO2 code). 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchPersonalNameGeoIn">A list of personal names, with a country ISO2 code (optional)</param>
        /// <returns>BatchPersonalNameGenderedOut</returns>
        public BatchPersonalNameGenderedOut GenderFullGeoBatch (BatchPersonalNameGeoIn batchPersonalNameGeoIn = null)
        {
             ApiResponse<BatchPersonalNameGenderedOut> localVarResponse = GenderFullGeoBatchWithHttpInfo(batchPersonalNameGeoIn);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Infer the likely gender of up to 100 full names, with a given cultural context (country ISO2 code). 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchPersonalNameGeoIn">A list of personal names, with a country ISO2 code (optional)</param>
        /// <returns>ApiResponse of BatchPersonalNameGenderedOut</returns>
        public ApiResponse< BatchPersonalNameGenderedOut > GenderFullGeoBatchWithHttpInfo (BatchPersonalNameGeoIn batchPersonalNameGeoIn = null)
        {

            var localVarPath = "/api2/json/genderFullGeoBatch";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (batchPersonalNameGeoIn != null && batchPersonalNameGeoIn.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(batchPersonalNameGeoIn); // http body (model) parameter
            }
            else
            {
                localVarPostBody = batchPersonalNameGeoIn; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarHeaderParams["X-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-API-KEY");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GenderFullGeoBatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BatchPersonalNameGenderedOut>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BatchPersonalNameGenderedOut) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BatchPersonalNameGenderedOut)));
        }

        /// <summary>
        /// Infer the likely gender of up to 100 full names, with a given cultural context (country ISO2 code). 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchPersonalNameGeoIn">A list of personal names, with a country ISO2 code (optional)</param>
        /// <returns>Task of BatchPersonalNameGenderedOut</returns>
        public async System.Threading.Tasks.Task<BatchPersonalNameGenderedOut> GenderFullGeoBatchAsync (BatchPersonalNameGeoIn batchPersonalNameGeoIn = null)
        {
             ApiResponse<BatchPersonalNameGenderedOut> localVarResponse = await GenderFullGeoBatchAsyncWithHttpInfo(batchPersonalNameGeoIn);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Infer the likely gender of up to 100 full names, with a given cultural context (country ISO2 code). 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchPersonalNameGeoIn">A list of personal names, with a country ISO2 code (optional)</param>
        /// <returns>Task of ApiResponse (BatchPersonalNameGenderedOut)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BatchPersonalNameGenderedOut>> GenderFullGeoBatchAsyncWithHttpInfo (BatchPersonalNameGeoIn batchPersonalNameGeoIn = null)
        {

            var localVarPath = "/api2/json/genderFullGeoBatch";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (batchPersonalNameGeoIn != null && batchPersonalNameGeoIn.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(batchPersonalNameGeoIn); // http body (model) parameter
            }
            else
            {
                localVarPostBody = batchPersonalNameGeoIn; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarHeaderParams["X-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-API-KEY");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GenderFullGeoBatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BatchPersonalNameGenderedOut>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BatchPersonalNameGenderedOut) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BatchPersonalNameGenderedOut)));
        }

        /// <summary>
        /// Infer the likely gender of a name, given a local context (ISO2 country code). 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firstName"></param>
        /// <param name="lastName"></param>
        /// <param name="countryIso2"></param>
        /// <returns>FirstLastNameGenderedOut</returns>
        public FirstLastNameGenderedOut GenderGeo (string firstName, string lastName, string countryIso2)
        {
             ApiResponse<FirstLastNameGenderedOut> localVarResponse = GenderGeoWithHttpInfo(firstName, lastName, countryIso2);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Infer the likely gender of a name, given a local context (ISO2 country code). 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firstName"></param>
        /// <param name="lastName"></param>
        /// <param name="countryIso2"></param>
        /// <returns>ApiResponse of FirstLastNameGenderedOut</returns>
        public ApiResponse< FirstLastNameGenderedOut > GenderGeoWithHttpInfo (string firstName, string lastName, string countryIso2)
        {
            // verify the required parameter 'firstName' is set
            if (firstName == null)
                throw new ApiException(400, "Missing required parameter 'firstName' when calling PersonalApi->GenderGeo");
            // verify the required parameter 'lastName' is set
            if (lastName == null)
                throw new ApiException(400, "Missing required parameter 'lastName' when calling PersonalApi->GenderGeo");
            // verify the required parameter 'countryIso2' is set
            if (countryIso2 == null)
                throw new ApiException(400, "Missing required parameter 'countryIso2' when calling PersonalApi->GenderGeo");

            var localVarPath = "/api2/json/genderGeo/{firstName}/{lastName}/{countryIso2}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (firstName != null) localVarPathParams.Add("firstName", this.Configuration.ApiClient.ParameterToString(firstName)); // path parameter
            if (lastName != null) localVarPathParams.Add("lastName", this.Configuration.ApiClient.ParameterToString(lastName)); // path parameter
            if (countryIso2 != null) localVarPathParams.Add("countryIso2", this.Configuration.ApiClient.ParameterToString(countryIso2)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarHeaderParams["X-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-API-KEY");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GenderGeo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FirstLastNameGenderedOut>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FirstLastNameGenderedOut) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FirstLastNameGenderedOut)));
        }

        /// <summary>
        /// Infer the likely gender of a name, given a local context (ISO2 country code). 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firstName"></param>
        /// <param name="lastName"></param>
        /// <param name="countryIso2"></param>
        /// <returns>Task of FirstLastNameGenderedOut</returns>
        public async System.Threading.Tasks.Task<FirstLastNameGenderedOut> GenderGeoAsync (string firstName, string lastName, string countryIso2)
        {
             ApiResponse<FirstLastNameGenderedOut> localVarResponse = await GenderGeoAsyncWithHttpInfo(firstName, lastName, countryIso2);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Infer the likely gender of a name, given a local context (ISO2 country code). 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firstName"></param>
        /// <param name="lastName"></param>
        /// <param name="countryIso2"></param>
        /// <returns>Task of ApiResponse (FirstLastNameGenderedOut)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FirstLastNameGenderedOut>> GenderGeoAsyncWithHttpInfo (string firstName, string lastName, string countryIso2)
        {
            // verify the required parameter 'firstName' is set
            if (firstName == null)
                throw new ApiException(400, "Missing required parameter 'firstName' when calling PersonalApi->GenderGeo");
            // verify the required parameter 'lastName' is set
            if (lastName == null)
                throw new ApiException(400, "Missing required parameter 'lastName' when calling PersonalApi->GenderGeo");
            // verify the required parameter 'countryIso2' is set
            if (countryIso2 == null)
                throw new ApiException(400, "Missing required parameter 'countryIso2' when calling PersonalApi->GenderGeo");

            var localVarPath = "/api2/json/genderGeo/{firstName}/{lastName}/{countryIso2}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (firstName != null) localVarPathParams.Add("firstName", this.Configuration.ApiClient.ParameterToString(firstName)); // path parameter
            if (lastName != null) localVarPathParams.Add("lastName", this.Configuration.ApiClient.ParameterToString(lastName)); // path parameter
            if (countryIso2 != null) localVarPathParams.Add("countryIso2", this.Configuration.ApiClient.ParameterToString(countryIso2)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarHeaderParams["X-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-API-KEY");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GenderGeo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FirstLastNameGenderedOut>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FirstLastNameGenderedOut) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FirstLastNameGenderedOut)));
        }

        /// <summary>
        /// Infer the likely gender of up to 100 names, each given a local context (ISO2 country code). 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchFirstLastNameGeoIn">A list of names, with country code. (optional)</param>
        /// <returns>BatchFirstLastNameGenderedOut</returns>
        public BatchFirstLastNameGenderedOut GenderGeoBatch (BatchFirstLastNameGeoIn batchFirstLastNameGeoIn = null)
        {
             ApiResponse<BatchFirstLastNameGenderedOut> localVarResponse = GenderGeoBatchWithHttpInfo(batchFirstLastNameGeoIn);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Infer the likely gender of up to 100 names, each given a local context (ISO2 country code). 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchFirstLastNameGeoIn">A list of names, with country code. (optional)</param>
        /// <returns>ApiResponse of BatchFirstLastNameGenderedOut</returns>
        public ApiResponse< BatchFirstLastNameGenderedOut > GenderGeoBatchWithHttpInfo (BatchFirstLastNameGeoIn batchFirstLastNameGeoIn = null)
        {

            var localVarPath = "/api2/json/genderGeoBatch";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (batchFirstLastNameGeoIn != null && batchFirstLastNameGeoIn.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(batchFirstLastNameGeoIn); // http body (model) parameter
            }
            else
            {
                localVarPostBody = batchFirstLastNameGeoIn; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarHeaderParams["X-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-API-KEY");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GenderGeoBatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BatchFirstLastNameGenderedOut>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BatchFirstLastNameGenderedOut) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BatchFirstLastNameGenderedOut)));
        }

        /// <summary>
        /// Infer the likely gender of up to 100 names, each given a local context (ISO2 country code). 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchFirstLastNameGeoIn">A list of names, with country code. (optional)</param>
        /// <returns>Task of BatchFirstLastNameGenderedOut</returns>
        public async System.Threading.Tasks.Task<BatchFirstLastNameGenderedOut> GenderGeoBatchAsync (BatchFirstLastNameGeoIn batchFirstLastNameGeoIn = null)
        {
             ApiResponse<BatchFirstLastNameGenderedOut> localVarResponse = await GenderGeoBatchAsyncWithHttpInfo(batchFirstLastNameGeoIn);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Infer the likely gender of up to 100 names, each given a local context (ISO2 country code). 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchFirstLastNameGeoIn">A list of names, with country code. (optional)</param>
        /// <returns>Task of ApiResponse (BatchFirstLastNameGenderedOut)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BatchFirstLastNameGenderedOut>> GenderGeoBatchAsyncWithHttpInfo (BatchFirstLastNameGeoIn batchFirstLastNameGeoIn = null)
        {

            var localVarPath = "/api2/json/genderGeoBatch";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (batchFirstLastNameGeoIn != null && batchFirstLastNameGeoIn.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(batchFirstLastNameGeoIn); // http body (model) parameter
            }
            else
            {
                localVarPostBody = batchFirstLastNameGeoIn; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarHeaderParams["X-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-API-KEY");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GenderGeoBatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BatchFirstLastNameGenderedOut>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BatchFirstLastNameGenderedOut) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BatchFirstLastNameGenderedOut)));
        }

        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer the likely country of origin of a personal name. Assumes names as they are in the country of origin. For US, CA, AU, NZ and other melting-pots : use &#39;diaspora&#39; instead. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firstName"></param>
        /// <param name="lastName"></param>
        /// <returns>FirstLastNameOriginedOut</returns>
        public FirstLastNameOriginedOut Origin (string firstName, string lastName)
        {
             ApiResponse<FirstLastNameOriginedOut> localVarResponse = OriginWithHttpInfo(firstName, lastName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer the likely country of origin of a personal name. Assumes names as they are in the country of origin. For US, CA, AU, NZ and other melting-pots : use &#39;diaspora&#39; instead. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firstName"></param>
        /// <param name="lastName"></param>
        /// <returns>ApiResponse of FirstLastNameOriginedOut</returns>
        public ApiResponse< FirstLastNameOriginedOut > OriginWithHttpInfo (string firstName, string lastName)
        {
            // verify the required parameter 'firstName' is set
            if (firstName == null)
                throw new ApiException(400, "Missing required parameter 'firstName' when calling PersonalApi->Origin");
            // verify the required parameter 'lastName' is set
            if (lastName == null)
                throw new ApiException(400, "Missing required parameter 'lastName' when calling PersonalApi->Origin");

            var localVarPath = "/api2/json/origin/{firstName}/{lastName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (firstName != null) localVarPathParams.Add("firstName", this.Configuration.ApiClient.ParameterToString(firstName)); // path parameter
            if (lastName != null) localVarPathParams.Add("lastName", this.Configuration.ApiClient.ParameterToString(lastName)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarHeaderParams["X-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-API-KEY");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Origin", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FirstLastNameOriginedOut>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FirstLastNameOriginedOut) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FirstLastNameOriginedOut)));
        }

        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer the likely country of origin of a personal name. Assumes names as they are in the country of origin. For US, CA, AU, NZ and other melting-pots : use &#39;diaspora&#39; instead. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firstName"></param>
        /// <param name="lastName"></param>
        /// <returns>Task of FirstLastNameOriginedOut</returns>
        public async System.Threading.Tasks.Task<FirstLastNameOriginedOut> OriginAsync (string firstName, string lastName)
        {
             ApiResponse<FirstLastNameOriginedOut> localVarResponse = await OriginAsyncWithHttpInfo(firstName, lastName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer the likely country of origin of a personal name. Assumes names as they are in the country of origin. For US, CA, AU, NZ and other melting-pots : use &#39;diaspora&#39; instead. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firstName"></param>
        /// <param name="lastName"></param>
        /// <returns>Task of ApiResponse (FirstLastNameOriginedOut)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FirstLastNameOriginedOut>> OriginAsyncWithHttpInfo (string firstName, string lastName)
        {
            // verify the required parameter 'firstName' is set
            if (firstName == null)
                throw new ApiException(400, "Missing required parameter 'firstName' when calling PersonalApi->Origin");
            // verify the required parameter 'lastName' is set
            if (lastName == null)
                throw new ApiException(400, "Missing required parameter 'lastName' when calling PersonalApi->Origin");

            var localVarPath = "/api2/json/origin/{firstName}/{lastName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (firstName != null) localVarPathParams.Add("firstName", this.Configuration.ApiClient.ParameterToString(firstName)); // path parameter
            if (lastName != null) localVarPathParams.Add("lastName", this.Configuration.ApiClient.ParameterToString(lastName)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarHeaderParams["X-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-API-KEY");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Origin", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FirstLastNameOriginedOut>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FirstLastNameOriginedOut) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FirstLastNameOriginedOut)));
        }

        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer the likely country of origin of up to 100 names, detecting automatically the cultural context. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchFirstLastNameIn">A list of personal names (optional)</param>
        /// <returns>BatchFirstLastNameOriginedOut</returns>
        public BatchFirstLastNameOriginedOut OriginBatch (BatchFirstLastNameIn batchFirstLastNameIn = null)
        {
             ApiResponse<BatchFirstLastNameOriginedOut> localVarResponse = OriginBatchWithHttpInfo(batchFirstLastNameIn);
             return localVarResponse.Data;
        }

        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer the likely country of origin of up to 100 names, detecting automatically the cultural context. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchFirstLastNameIn">A list of personal names (optional)</param>
        /// <returns>ApiResponse of BatchFirstLastNameOriginedOut</returns>
        public ApiResponse< BatchFirstLastNameOriginedOut > OriginBatchWithHttpInfo (BatchFirstLastNameIn batchFirstLastNameIn = null)
        {

            var localVarPath = "/api2/json/originBatch";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (batchFirstLastNameIn != null && batchFirstLastNameIn.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(batchFirstLastNameIn); // http body (model) parameter
            }
            else
            {
                localVarPostBody = batchFirstLastNameIn; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarHeaderParams["X-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-API-KEY");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OriginBatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BatchFirstLastNameOriginedOut>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BatchFirstLastNameOriginedOut) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BatchFirstLastNameOriginedOut)));
        }

        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer the likely country of origin of up to 100 names, detecting automatically the cultural context. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchFirstLastNameIn">A list of personal names (optional)</param>
        /// <returns>Task of BatchFirstLastNameOriginedOut</returns>
        public async System.Threading.Tasks.Task<BatchFirstLastNameOriginedOut> OriginBatchAsync (BatchFirstLastNameIn batchFirstLastNameIn = null)
        {
             ApiResponse<BatchFirstLastNameOriginedOut> localVarResponse = await OriginBatchAsyncWithHttpInfo(batchFirstLastNameIn);
             return localVarResponse.Data;

        }

        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer the likely country of origin of up to 100 names, detecting automatically the cultural context. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchFirstLastNameIn">A list of personal names (optional)</param>
        /// <returns>Task of ApiResponse (BatchFirstLastNameOriginedOut)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BatchFirstLastNameOriginedOut>> OriginBatchAsyncWithHttpInfo (BatchFirstLastNameIn batchFirstLastNameIn = null)
        {

            var localVarPath = "/api2/json/originBatch";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (batchFirstLastNameIn != null && batchFirstLastNameIn.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(batchFirstLastNameIn); // http body (model) parameter
            }
            else
            {
                localVarPostBody = batchFirstLastNameIn; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarHeaderParams["X-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-API-KEY");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OriginBatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BatchFirstLastNameOriginedOut>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BatchFirstLastNameOriginedOut) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BatchFirstLastNameOriginedOut)));
        }

        /// <summary>
        /// Infer the likely first/last name structure of a name, ex. John Smith or SMITH, John or SMITH; John.  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nameFull"></param>
        /// <returns>PersonalNameParsedOut</returns>
        public PersonalNameParsedOut ParseName (string nameFull)
        {
             ApiResponse<PersonalNameParsedOut> localVarResponse = ParseNameWithHttpInfo(nameFull);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Infer the likely first/last name structure of a name, ex. John Smith or SMITH, John or SMITH; John.  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nameFull"></param>
        /// <returns>ApiResponse of PersonalNameParsedOut</returns>
        public ApiResponse< PersonalNameParsedOut > ParseNameWithHttpInfo (string nameFull)
        {
            // verify the required parameter 'nameFull' is set
            if (nameFull == null)
                throw new ApiException(400, "Missing required parameter 'nameFull' when calling PersonalApi->ParseName");

            var localVarPath = "/api2/json/parseName/{nameFull}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (nameFull != null) localVarPathParams.Add("nameFull", this.Configuration.ApiClient.ParameterToString(nameFull)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarHeaderParams["X-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-API-KEY");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ParseName", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PersonalNameParsedOut>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PersonalNameParsedOut) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PersonalNameParsedOut)));
        }

        /// <summary>
        /// Infer the likely first/last name structure of a name, ex. John Smith or SMITH, John or SMITH; John.  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nameFull"></param>
        /// <returns>Task of PersonalNameParsedOut</returns>
        public async System.Threading.Tasks.Task<PersonalNameParsedOut> ParseNameAsync (string nameFull)
        {
             ApiResponse<PersonalNameParsedOut> localVarResponse = await ParseNameAsyncWithHttpInfo(nameFull);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Infer the likely first/last name structure of a name, ex. John Smith or SMITH, John or SMITH; John.  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nameFull"></param>
        /// <returns>Task of ApiResponse (PersonalNameParsedOut)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PersonalNameParsedOut>> ParseNameAsyncWithHttpInfo (string nameFull)
        {
            // verify the required parameter 'nameFull' is set
            if (nameFull == null)
                throw new ApiException(400, "Missing required parameter 'nameFull' when calling PersonalApi->ParseName");

            var localVarPath = "/api2/json/parseName/{nameFull}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (nameFull != null) localVarPathParams.Add("nameFull", this.Configuration.ApiClient.ParameterToString(nameFull)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarHeaderParams["X-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-API-KEY");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ParseName", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PersonalNameParsedOut>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PersonalNameParsedOut) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PersonalNameParsedOut)));
        }

        /// <summary>
        /// Infer the likely first/last name structure of a name, ex. John Smith or SMITH, John or SMITH; John. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchPersonalNameIn">A list of personal names (optional)</param>
        /// <returns>BatchPersonalNameParsedOut</returns>
        public BatchPersonalNameParsedOut ParseNameBatch (BatchPersonalNameIn batchPersonalNameIn = null)
        {
             ApiResponse<BatchPersonalNameParsedOut> localVarResponse = ParseNameBatchWithHttpInfo(batchPersonalNameIn);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Infer the likely first/last name structure of a name, ex. John Smith or SMITH, John or SMITH; John. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchPersonalNameIn">A list of personal names (optional)</param>
        /// <returns>ApiResponse of BatchPersonalNameParsedOut</returns>
        public ApiResponse< BatchPersonalNameParsedOut > ParseNameBatchWithHttpInfo (BatchPersonalNameIn batchPersonalNameIn = null)
        {

            var localVarPath = "/api2/json/parseNameBatch";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (batchPersonalNameIn != null && batchPersonalNameIn.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(batchPersonalNameIn); // http body (model) parameter
            }
            else
            {
                localVarPostBody = batchPersonalNameIn; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarHeaderParams["X-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-API-KEY");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ParseNameBatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BatchPersonalNameParsedOut>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BatchPersonalNameParsedOut) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BatchPersonalNameParsedOut)));
        }

        /// <summary>
        /// Infer the likely first/last name structure of a name, ex. John Smith or SMITH, John or SMITH; John. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchPersonalNameIn">A list of personal names (optional)</param>
        /// <returns>Task of BatchPersonalNameParsedOut</returns>
        public async System.Threading.Tasks.Task<BatchPersonalNameParsedOut> ParseNameBatchAsync (BatchPersonalNameIn batchPersonalNameIn = null)
        {
             ApiResponse<BatchPersonalNameParsedOut> localVarResponse = await ParseNameBatchAsyncWithHttpInfo(batchPersonalNameIn);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Infer the likely first/last name structure of a name, ex. John Smith or SMITH, John or SMITH; John. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchPersonalNameIn">A list of personal names (optional)</param>
        /// <returns>Task of ApiResponse (BatchPersonalNameParsedOut)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BatchPersonalNameParsedOut>> ParseNameBatchAsyncWithHttpInfo (BatchPersonalNameIn batchPersonalNameIn = null)
        {

            var localVarPath = "/api2/json/parseNameBatch";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (batchPersonalNameIn != null && batchPersonalNameIn.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(batchPersonalNameIn); // http body (model) parameter
            }
            else
            {
                localVarPostBody = batchPersonalNameIn; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarHeaderParams["X-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-API-KEY");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ParseNameBatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BatchPersonalNameParsedOut>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BatchPersonalNameParsedOut) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BatchPersonalNameParsedOut)));
        }

        /// <summary>
        /// Infer the likely first/last name structure of a name, ex. John Smith or SMITH, John or SMITH; John. For better accuracy, provide a geographic context. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nameFull"></param>
        /// <param name="countryIso2"></param>
        /// <returns>PersonalNameParsedOut</returns>
        public PersonalNameParsedOut ParseNameGeo (string nameFull, string countryIso2)
        {
             ApiResponse<PersonalNameParsedOut> localVarResponse = ParseNameGeoWithHttpInfo(nameFull, countryIso2);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Infer the likely first/last name structure of a name, ex. John Smith or SMITH, John or SMITH; John. For better accuracy, provide a geographic context. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nameFull"></param>
        /// <param name="countryIso2"></param>
        /// <returns>ApiResponse of PersonalNameParsedOut</returns>
        public ApiResponse< PersonalNameParsedOut > ParseNameGeoWithHttpInfo (string nameFull, string countryIso2)
        {
            // verify the required parameter 'nameFull' is set
            if (nameFull == null)
                throw new ApiException(400, "Missing required parameter 'nameFull' when calling PersonalApi->ParseNameGeo");
            // verify the required parameter 'countryIso2' is set
            if (countryIso2 == null)
                throw new ApiException(400, "Missing required parameter 'countryIso2' when calling PersonalApi->ParseNameGeo");

            var localVarPath = "/api2/json/parseName/{nameFull}/{countryIso2}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (nameFull != null) localVarPathParams.Add("nameFull", this.Configuration.ApiClient.ParameterToString(nameFull)); // path parameter
            if (countryIso2 != null) localVarPathParams.Add("countryIso2", this.Configuration.ApiClient.ParameterToString(countryIso2)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarHeaderParams["X-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-API-KEY");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ParseNameGeo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PersonalNameParsedOut>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PersonalNameParsedOut) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PersonalNameParsedOut)));
        }

        /// <summary>
        /// Infer the likely first/last name structure of a name, ex. John Smith or SMITH, John or SMITH; John. For better accuracy, provide a geographic context. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nameFull"></param>
        /// <param name="countryIso2"></param>
        /// <returns>Task of PersonalNameParsedOut</returns>
        public async System.Threading.Tasks.Task<PersonalNameParsedOut> ParseNameGeoAsync (string nameFull, string countryIso2)
        {
             ApiResponse<PersonalNameParsedOut> localVarResponse = await ParseNameGeoAsyncWithHttpInfo(nameFull, countryIso2);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Infer the likely first/last name structure of a name, ex. John Smith or SMITH, John or SMITH; John. For better accuracy, provide a geographic context. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nameFull"></param>
        /// <param name="countryIso2"></param>
        /// <returns>Task of ApiResponse (PersonalNameParsedOut)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PersonalNameParsedOut>> ParseNameGeoAsyncWithHttpInfo (string nameFull, string countryIso2)
        {
            // verify the required parameter 'nameFull' is set
            if (nameFull == null)
                throw new ApiException(400, "Missing required parameter 'nameFull' when calling PersonalApi->ParseNameGeo");
            // verify the required parameter 'countryIso2' is set
            if (countryIso2 == null)
                throw new ApiException(400, "Missing required parameter 'countryIso2' when calling PersonalApi->ParseNameGeo");

            var localVarPath = "/api2/json/parseName/{nameFull}/{countryIso2}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (nameFull != null) localVarPathParams.Add("nameFull", this.Configuration.ApiClient.ParameterToString(nameFull)); // path parameter
            if (countryIso2 != null) localVarPathParams.Add("countryIso2", this.Configuration.ApiClient.ParameterToString(countryIso2)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarHeaderParams["X-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-API-KEY");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ParseNameGeo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PersonalNameParsedOut>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PersonalNameParsedOut) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PersonalNameParsedOut)));
        }

        /// <summary>
        /// Infer the likely first/last name structure of a name, ex. John Smith or SMITH, John or SMITH; John. Giving a local context improves precision.  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchPersonalNameGeoIn">A list of personal names (optional)</param>
        /// <returns>BatchPersonalNameParsedOut</returns>
        public BatchPersonalNameParsedOut ParseNameGeoBatch (BatchPersonalNameGeoIn batchPersonalNameGeoIn = null)
        {
             ApiResponse<BatchPersonalNameParsedOut> localVarResponse = ParseNameGeoBatchWithHttpInfo(batchPersonalNameGeoIn);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Infer the likely first/last name structure of a name, ex. John Smith or SMITH, John or SMITH; John. Giving a local context improves precision.  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchPersonalNameGeoIn">A list of personal names (optional)</param>
        /// <returns>ApiResponse of BatchPersonalNameParsedOut</returns>
        public ApiResponse< BatchPersonalNameParsedOut > ParseNameGeoBatchWithHttpInfo (BatchPersonalNameGeoIn batchPersonalNameGeoIn = null)
        {

            var localVarPath = "/api2/json/parseNameGeoBatch";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (batchPersonalNameGeoIn != null && batchPersonalNameGeoIn.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(batchPersonalNameGeoIn); // http body (model) parameter
            }
            else
            {
                localVarPostBody = batchPersonalNameGeoIn; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarHeaderParams["X-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-API-KEY");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ParseNameGeoBatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BatchPersonalNameParsedOut>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BatchPersonalNameParsedOut) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BatchPersonalNameParsedOut)));
        }

        /// <summary>
        /// Infer the likely first/last name structure of a name, ex. John Smith or SMITH, John or SMITH; John. Giving a local context improves precision.  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchPersonalNameGeoIn">A list of personal names (optional)</param>
        /// <returns>Task of BatchPersonalNameParsedOut</returns>
        public async System.Threading.Tasks.Task<BatchPersonalNameParsedOut> ParseNameGeoBatchAsync (BatchPersonalNameGeoIn batchPersonalNameGeoIn = null)
        {
             ApiResponse<BatchPersonalNameParsedOut> localVarResponse = await ParseNameGeoBatchAsyncWithHttpInfo(batchPersonalNameGeoIn);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Infer the likely first/last name structure of a name, ex. John Smith or SMITH, John or SMITH; John. Giving a local context improves precision.  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchPersonalNameGeoIn">A list of personal names (optional)</param>
        /// <returns>Task of ApiResponse (BatchPersonalNameParsedOut)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BatchPersonalNameParsedOut>> ParseNameGeoBatchAsyncWithHttpInfo (BatchPersonalNameGeoIn batchPersonalNameGeoIn = null)
        {

            var localVarPath = "/api2/json/parseNameGeoBatch";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (batchPersonalNameGeoIn != null && batchPersonalNameGeoIn.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(batchPersonalNameGeoIn); // http body (model) parameter
            }
            else
            {
                localVarPostBody = batchPersonalNameGeoIn; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarHeaderParams["X-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-API-KEY");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ParseNameGeoBatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BatchPersonalNameParsedOut>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BatchPersonalNameParsedOut) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BatchPersonalNameParsedOut)));
        }

        /// <summary>
        /// Infer the likely gender of up to 100 fully parsed names, detecting automatically the cultural context. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchParsedFullNameIn">A list of personal names (optional)</param>
        /// <returns>BatchFirstLastNameGenderedOut</returns>
        public BatchFirstLastNameGenderedOut ParsedGenderBatch (BatchParsedFullNameIn batchParsedFullNameIn = null)
        {
             ApiResponse<BatchFirstLastNameGenderedOut> localVarResponse = ParsedGenderBatchWithHttpInfo(batchParsedFullNameIn);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Infer the likely gender of up to 100 fully parsed names, detecting automatically the cultural context. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchParsedFullNameIn">A list of personal names (optional)</param>
        /// <returns>ApiResponse of BatchFirstLastNameGenderedOut</returns>
        public ApiResponse< BatchFirstLastNameGenderedOut > ParsedGenderBatchWithHttpInfo (BatchParsedFullNameIn batchParsedFullNameIn = null)
        {

            var localVarPath = "/api2/json/parsedGenderBatch";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (batchParsedFullNameIn != null && batchParsedFullNameIn.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(batchParsedFullNameIn); // http body (model) parameter
            }
            else
            {
                localVarPostBody = batchParsedFullNameIn; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarHeaderParams["X-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-API-KEY");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ParsedGenderBatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BatchFirstLastNameGenderedOut>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BatchFirstLastNameGenderedOut) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BatchFirstLastNameGenderedOut)));
        }

        /// <summary>
        /// Infer the likely gender of up to 100 fully parsed names, detecting automatically the cultural context. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchParsedFullNameIn">A list of personal names (optional)</param>
        /// <returns>Task of BatchFirstLastNameGenderedOut</returns>
        public async System.Threading.Tasks.Task<BatchFirstLastNameGenderedOut> ParsedGenderBatchAsync (BatchParsedFullNameIn batchParsedFullNameIn = null)
        {
             ApiResponse<BatchFirstLastNameGenderedOut> localVarResponse = await ParsedGenderBatchAsyncWithHttpInfo(batchParsedFullNameIn);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Infer the likely gender of up to 100 fully parsed names, detecting automatically the cultural context. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchParsedFullNameIn">A list of personal names (optional)</param>
        /// <returns>Task of ApiResponse (BatchFirstLastNameGenderedOut)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BatchFirstLastNameGenderedOut>> ParsedGenderBatchAsyncWithHttpInfo (BatchParsedFullNameIn batchParsedFullNameIn = null)
        {

            var localVarPath = "/api2/json/parsedGenderBatch";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (batchParsedFullNameIn != null && batchParsedFullNameIn.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(batchParsedFullNameIn); // http body (model) parameter
            }
            else
            {
                localVarPostBody = batchParsedFullNameIn; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarHeaderParams["X-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-API-KEY");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ParsedGenderBatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BatchFirstLastNameGenderedOut>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BatchFirstLastNameGenderedOut) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BatchFirstLastNameGenderedOut)));
        }

        /// <summary>
        /// Infer the likely gender of up to 100 fully parsed names, detecting automatically the cultural context. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchParsedFullNameGeoIn">A list of personal names (optional)</param>
        /// <returns>BatchFirstLastNameGenderedOut</returns>
        public BatchFirstLastNameGenderedOut ParsedGenderGeoBatch (BatchParsedFullNameGeoIn batchParsedFullNameGeoIn = null)
        {
             ApiResponse<BatchFirstLastNameGenderedOut> localVarResponse = ParsedGenderGeoBatchWithHttpInfo(batchParsedFullNameGeoIn);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Infer the likely gender of up to 100 fully parsed names, detecting automatically the cultural context. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchParsedFullNameGeoIn">A list of personal names (optional)</param>
        /// <returns>ApiResponse of BatchFirstLastNameGenderedOut</returns>
        public ApiResponse< BatchFirstLastNameGenderedOut > ParsedGenderGeoBatchWithHttpInfo (BatchParsedFullNameGeoIn batchParsedFullNameGeoIn = null)
        {

            var localVarPath = "/api2/json/parsedGenderGeoBatch";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (batchParsedFullNameGeoIn != null && batchParsedFullNameGeoIn.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(batchParsedFullNameGeoIn); // http body (model) parameter
            }
            else
            {
                localVarPostBody = batchParsedFullNameGeoIn; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarHeaderParams["X-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-API-KEY");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ParsedGenderGeoBatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BatchFirstLastNameGenderedOut>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BatchFirstLastNameGenderedOut) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BatchFirstLastNameGenderedOut)));
        }

        /// <summary>
        /// Infer the likely gender of up to 100 fully parsed names, detecting automatically the cultural context. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchParsedFullNameGeoIn">A list of personal names (optional)</param>
        /// <returns>Task of BatchFirstLastNameGenderedOut</returns>
        public async System.Threading.Tasks.Task<BatchFirstLastNameGenderedOut> ParsedGenderGeoBatchAsync (BatchParsedFullNameGeoIn batchParsedFullNameGeoIn = null)
        {
             ApiResponse<BatchFirstLastNameGenderedOut> localVarResponse = await ParsedGenderGeoBatchAsyncWithHttpInfo(batchParsedFullNameGeoIn);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Infer the likely gender of up to 100 fully parsed names, detecting automatically the cultural context. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchParsedFullNameGeoIn">A list of personal names (optional)</param>
        /// <returns>Task of ApiResponse (BatchFirstLastNameGenderedOut)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BatchFirstLastNameGenderedOut>> ParsedGenderGeoBatchAsyncWithHttpInfo (BatchParsedFullNameGeoIn batchParsedFullNameGeoIn = null)
        {

            var localVarPath = "/api2/json/parsedGenderGeoBatch";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (batchParsedFullNameGeoIn != null && batchParsedFullNameGeoIn.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(batchParsedFullNameGeoIn); // http body (model) parameter
            }
            else
            {
                localVarPostBody = batchParsedFullNameGeoIn; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarHeaderParams["X-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-API-KEY");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ParsedGenderGeoBatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BatchFirstLastNameGenderedOut>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BatchFirstLastNameGenderedOut) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BatchFirstLastNameGenderedOut)));
        }

        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer a US resident&#39;s likely race/ethnicity according to US Census taxonomy W_NL (white, non latino), HL (hispano latino),  A (asian, non latino), B_NL (black, non latino). 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firstName"></param>
        /// <param name="lastName"></param>
        /// <returns>FirstLastNameUSRaceEthnicityOut</returns>
        public FirstLastNameUSRaceEthnicityOut UsRaceEthnicity (string firstName, string lastName)
        {
             ApiResponse<FirstLastNameUSRaceEthnicityOut> localVarResponse = UsRaceEthnicityWithHttpInfo(firstName, lastName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer a US resident&#39;s likely race/ethnicity according to US Census taxonomy W_NL (white, non latino), HL (hispano latino),  A (asian, non latino), B_NL (black, non latino). 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firstName"></param>
        /// <param name="lastName"></param>
        /// <returns>ApiResponse of FirstLastNameUSRaceEthnicityOut</returns>
        public ApiResponse< FirstLastNameUSRaceEthnicityOut > UsRaceEthnicityWithHttpInfo (string firstName, string lastName)
        {
            // verify the required parameter 'firstName' is set
            if (firstName == null)
                throw new ApiException(400, "Missing required parameter 'firstName' when calling PersonalApi->UsRaceEthnicity");
            // verify the required parameter 'lastName' is set
            if (lastName == null)
                throw new ApiException(400, "Missing required parameter 'lastName' when calling PersonalApi->UsRaceEthnicity");

            var localVarPath = "/api2/json/usRaceEthnicity/{firstName}/{lastName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (firstName != null) localVarPathParams.Add("firstName", this.Configuration.ApiClient.ParameterToString(firstName)); // path parameter
            if (lastName != null) localVarPathParams.Add("lastName", this.Configuration.ApiClient.ParameterToString(lastName)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarHeaderParams["X-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-API-KEY");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsRaceEthnicity", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FirstLastNameUSRaceEthnicityOut>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FirstLastNameUSRaceEthnicityOut) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FirstLastNameUSRaceEthnicityOut)));
        }

        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer a US resident&#39;s likely race/ethnicity according to US Census taxonomy W_NL (white, non latino), HL (hispano latino),  A (asian, non latino), B_NL (black, non latino). 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firstName"></param>
        /// <param name="lastName"></param>
        /// <returns>Task of FirstLastNameUSRaceEthnicityOut</returns>
        public async System.Threading.Tasks.Task<FirstLastNameUSRaceEthnicityOut> UsRaceEthnicityAsync (string firstName, string lastName)
        {
             ApiResponse<FirstLastNameUSRaceEthnicityOut> localVarResponse = await UsRaceEthnicityAsyncWithHttpInfo(firstName, lastName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer a US resident&#39;s likely race/ethnicity according to US Census taxonomy W_NL (white, non latino), HL (hispano latino),  A (asian, non latino), B_NL (black, non latino). 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firstName"></param>
        /// <param name="lastName"></param>
        /// <returns>Task of ApiResponse (FirstLastNameUSRaceEthnicityOut)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FirstLastNameUSRaceEthnicityOut>> UsRaceEthnicityAsyncWithHttpInfo (string firstName, string lastName)
        {
            // verify the required parameter 'firstName' is set
            if (firstName == null)
                throw new ApiException(400, "Missing required parameter 'firstName' when calling PersonalApi->UsRaceEthnicity");
            // verify the required parameter 'lastName' is set
            if (lastName == null)
                throw new ApiException(400, "Missing required parameter 'lastName' when calling PersonalApi->UsRaceEthnicity");

            var localVarPath = "/api2/json/usRaceEthnicity/{firstName}/{lastName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (firstName != null) localVarPathParams.Add("firstName", this.Configuration.ApiClient.ParameterToString(firstName)); // path parameter
            if (lastName != null) localVarPathParams.Add("lastName", this.Configuration.ApiClient.ParameterToString(lastName)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarHeaderParams["X-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-API-KEY");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsRaceEthnicity", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FirstLastNameUSRaceEthnicityOut>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FirstLastNameUSRaceEthnicityOut) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FirstLastNameUSRaceEthnicityOut)));
        }

        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer up-to 100 US resident&#39;s likely race/ethnicity according to US Census taxonomy. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchFirstLastNameGeoIn">A list of personal names (optional)</param>
        /// <returns>BatchFirstLastNameUSRaceEthnicityOut</returns>
        public BatchFirstLastNameUSRaceEthnicityOut UsRaceEthnicityBatch (BatchFirstLastNameGeoIn batchFirstLastNameGeoIn = null)
        {
             ApiResponse<BatchFirstLastNameUSRaceEthnicityOut> localVarResponse = UsRaceEthnicityBatchWithHttpInfo(batchFirstLastNameGeoIn);
             return localVarResponse.Data;
        }

        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer up-to 100 US resident&#39;s likely race/ethnicity according to US Census taxonomy. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchFirstLastNameGeoIn">A list of personal names (optional)</param>
        /// <returns>ApiResponse of BatchFirstLastNameUSRaceEthnicityOut</returns>
        public ApiResponse< BatchFirstLastNameUSRaceEthnicityOut > UsRaceEthnicityBatchWithHttpInfo (BatchFirstLastNameGeoIn batchFirstLastNameGeoIn = null)
        {

            var localVarPath = "/api2/json/usRaceEthnicityBatch";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (batchFirstLastNameGeoIn != null && batchFirstLastNameGeoIn.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(batchFirstLastNameGeoIn); // http body (model) parameter
            }
            else
            {
                localVarPostBody = batchFirstLastNameGeoIn; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarHeaderParams["X-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-API-KEY");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsRaceEthnicityBatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BatchFirstLastNameUSRaceEthnicityOut>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BatchFirstLastNameUSRaceEthnicityOut) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BatchFirstLastNameUSRaceEthnicityOut)));
        }

        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer up-to 100 US resident&#39;s likely race/ethnicity according to US Census taxonomy. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchFirstLastNameGeoIn">A list of personal names (optional)</param>
        /// <returns>Task of BatchFirstLastNameUSRaceEthnicityOut</returns>
        public async System.Threading.Tasks.Task<BatchFirstLastNameUSRaceEthnicityOut> UsRaceEthnicityBatchAsync (BatchFirstLastNameGeoIn batchFirstLastNameGeoIn = null)
        {
             ApiResponse<BatchFirstLastNameUSRaceEthnicityOut> localVarResponse = await UsRaceEthnicityBatchAsyncWithHttpInfo(batchFirstLastNameGeoIn);
             return localVarResponse.Data;

        }

        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer up-to 100 US resident&#39;s likely race/ethnicity according to US Census taxonomy. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchFirstLastNameGeoIn">A list of personal names (optional)</param>
        /// <returns>Task of ApiResponse (BatchFirstLastNameUSRaceEthnicityOut)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BatchFirstLastNameUSRaceEthnicityOut>> UsRaceEthnicityBatchAsyncWithHttpInfo (BatchFirstLastNameGeoIn batchFirstLastNameGeoIn = null)
        {

            var localVarPath = "/api2/json/usRaceEthnicityBatch";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (batchFirstLastNameGeoIn != null && batchFirstLastNameGeoIn.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(batchFirstLastNameGeoIn); // http body (model) parameter
            }
            else
            {
                localVarPostBody = batchFirstLastNameGeoIn; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarHeaderParams["X-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-API-KEY");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsRaceEthnicityBatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BatchFirstLastNameUSRaceEthnicityOut>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BatchFirstLastNameUSRaceEthnicityOut) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BatchFirstLastNameUSRaceEthnicityOut)));
        }

        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer a US resident&#39;s likely race/ethnicity according to US Census taxonomy, using (optional) ZIP5 code info. Output is W_NL (white, non latino), HL (hispano latino),  A (asian, non latino), B_NL (black, non latino). 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firstName"></param>
        /// <param name="lastName"></param>
        /// <param name="zip5Code"></param>
        /// <returns>FirstLastNameUSRaceEthnicityOut</returns>
        public FirstLastNameUSRaceEthnicityOut UsRaceEthnicityZIP5 (string firstName, string lastName, string zip5Code)
        {
             ApiResponse<FirstLastNameUSRaceEthnicityOut> localVarResponse = UsRaceEthnicityZIP5WithHttpInfo(firstName, lastName, zip5Code);
             return localVarResponse.Data;
        }

        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer a US resident&#39;s likely race/ethnicity according to US Census taxonomy, using (optional) ZIP5 code info. Output is W_NL (white, non latino), HL (hispano latino),  A (asian, non latino), B_NL (black, non latino). 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firstName"></param>
        /// <param name="lastName"></param>
        /// <param name="zip5Code"></param>
        /// <returns>ApiResponse of FirstLastNameUSRaceEthnicityOut</returns>
        public ApiResponse< FirstLastNameUSRaceEthnicityOut > UsRaceEthnicityZIP5WithHttpInfo (string firstName, string lastName, string zip5Code)
        {
            // verify the required parameter 'firstName' is set
            if (firstName == null)
                throw new ApiException(400, "Missing required parameter 'firstName' when calling PersonalApi->UsRaceEthnicityZIP5");
            // verify the required parameter 'lastName' is set
            if (lastName == null)
                throw new ApiException(400, "Missing required parameter 'lastName' when calling PersonalApi->UsRaceEthnicityZIP5");
            // verify the required parameter 'zip5Code' is set
            if (zip5Code == null)
                throw new ApiException(400, "Missing required parameter 'zip5Code' when calling PersonalApi->UsRaceEthnicityZIP5");

            var localVarPath = "/api2/json/usRaceEthnicityZIP5/{firstName}/{lastName}/{zip5Code}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (firstName != null) localVarPathParams.Add("firstName", this.Configuration.ApiClient.ParameterToString(firstName)); // path parameter
            if (lastName != null) localVarPathParams.Add("lastName", this.Configuration.ApiClient.ParameterToString(lastName)); // path parameter
            if (zip5Code != null) localVarPathParams.Add("zip5Code", this.Configuration.ApiClient.ParameterToString(zip5Code)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarHeaderParams["X-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-API-KEY");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsRaceEthnicityZIP5", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FirstLastNameUSRaceEthnicityOut>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FirstLastNameUSRaceEthnicityOut) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FirstLastNameUSRaceEthnicityOut)));
        }

        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer a US resident&#39;s likely race/ethnicity according to US Census taxonomy, using (optional) ZIP5 code info. Output is W_NL (white, non latino), HL (hispano latino),  A (asian, non latino), B_NL (black, non latino). 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firstName"></param>
        /// <param name="lastName"></param>
        /// <param name="zip5Code"></param>
        /// <returns>Task of FirstLastNameUSRaceEthnicityOut</returns>
        public async System.Threading.Tasks.Task<FirstLastNameUSRaceEthnicityOut> UsRaceEthnicityZIP5Async (string firstName, string lastName, string zip5Code)
        {
             ApiResponse<FirstLastNameUSRaceEthnicityOut> localVarResponse = await UsRaceEthnicityZIP5AsyncWithHttpInfo(firstName, lastName, zip5Code);
             return localVarResponse.Data;

        }

        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer a US resident&#39;s likely race/ethnicity according to US Census taxonomy, using (optional) ZIP5 code info. Output is W_NL (white, non latino), HL (hispano latino),  A (asian, non latino), B_NL (black, non latino). 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firstName"></param>
        /// <param name="lastName"></param>
        /// <param name="zip5Code"></param>
        /// <returns>Task of ApiResponse (FirstLastNameUSRaceEthnicityOut)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FirstLastNameUSRaceEthnicityOut>> UsRaceEthnicityZIP5AsyncWithHttpInfo (string firstName, string lastName, string zip5Code)
        {
            // verify the required parameter 'firstName' is set
            if (firstName == null)
                throw new ApiException(400, "Missing required parameter 'firstName' when calling PersonalApi->UsRaceEthnicityZIP5");
            // verify the required parameter 'lastName' is set
            if (lastName == null)
                throw new ApiException(400, "Missing required parameter 'lastName' when calling PersonalApi->UsRaceEthnicityZIP5");
            // verify the required parameter 'zip5Code' is set
            if (zip5Code == null)
                throw new ApiException(400, "Missing required parameter 'zip5Code' when calling PersonalApi->UsRaceEthnicityZIP5");

            var localVarPath = "/api2/json/usRaceEthnicityZIP5/{firstName}/{lastName}/{zip5Code}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (firstName != null) localVarPathParams.Add("firstName", this.Configuration.ApiClient.ParameterToString(firstName)); // path parameter
            if (lastName != null) localVarPathParams.Add("lastName", this.Configuration.ApiClient.ParameterToString(lastName)); // path parameter
            if (zip5Code != null) localVarPathParams.Add("zip5Code", this.Configuration.ApiClient.ParameterToString(zip5Code)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarHeaderParams["X-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-API-KEY");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsRaceEthnicityZIP5", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FirstLastNameUSRaceEthnicityOut>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FirstLastNameUSRaceEthnicityOut) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FirstLastNameUSRaceEthnicityOut)));
        }

        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer up-to 100 US resident&#39;s likely race/ethnicity according to US Census taxonomy, with (optional) ZIP code. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchFirstLastNameGeoZippedIn">A list of personal names (optional)</param>
        /// <returns>BatchFirstLastNameUSRaceEthnicityOut</returns>
        public BatchFirstLastNameUSRaceEthnicityOut UsZipRaceEthnicityBatch (BatchFirstLastNameGeoZippedIn batchFirstLastNameGeoZippedIn = null)
        {
             ApiResponse<BatchFirstLastNameUSRaceEthnicityOut> localVarResponse = UsZipRaceEthnicityBatchWithHttpInfo(batchFirstLastNameGeoZippedIn);
             return localVarResponse.Data;
        }

        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer up-to 100 US resident&#39;s likely race/ethnicity according to US Census taxonomy, with (optional) ZIP code. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchFirstLastNameGeoZippedIn">A list of personal names (optional)</param>
        /// <returns>ApiResponse of BatchFirstLastNameUSRaceEthnicityOut</returns>
        public ApiResponse< BatchFirstLastNameUSRaceEthnicityOut > UsZipRaceEthnicityBatchWithHttpInfo (BatchFirstLastNameGeoZippedIn batchFirstLastNameGeoZippedIn = null)
        {

            var localVarPath = "/api2/json/usZipRaceEthnicityBatch";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (batchFirstLastNameGeoZippedIn != null && batchFirstLastNameGeoZippedIn.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(batchFirstLastNameGeoZippedIn); // http body (model) parameter
            }
            else
            {
                localVarPostBody = batchFirstLastNameGeoZippedIn; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarHeaderParams["X-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-API-KEY");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsZipRaceEthnicityBatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BatchFirstLastNameUSRaceEthnicityOut>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BatchFirstLastNameUSRaceEthnicityOut) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BatchFirstLastNameUSRaceEthnicityOut)));
        }

        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer up-to 100 US resident&#39;s likely race/ethnicity according to US Census taxonomy, with (optional) ZIP code. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchFirstLastNameGeoZippedIn">A list of personal names (optional)</param>
        /// <returns>Task of BatchFirstLastNameUSRaceEthnicityOut</returns>
        public async System.Threading.Tasks.Task<BatchFirstLastNameUSRaceEthnicityOut> UsZipRaceEthnicityBatchAsync (BatchFirstLastNameGeoZippedIn batchFirstLastNameGeoZippedIn = null)
        {
             ApiResponse<BatchFirstLastNameUSRaceEthnicityOut> localVarResponse = await UsZipRaceEthnicityBatchAsyncWithHttpInfo(batchFirstLastNameGeoZippedIn);
             return localVarResponse.Data;

        }

        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer up-to 100 US resident&#39;s likely race/ethnicity according to US Census taxonomy, with (optional) ZIP code. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchFirstLastNameGeoZippedIn">A list of personal names (optional)</param>
        /// <returns>Task of ApiResponse (BatchFirstLastNameUSRaceEthnicityOut)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BatchFirstLastNameUSRaceEthnicityOut>> UsZipRaceEthnicityBatchAsyncWithHttpInfo (BatchFirstLastNameGeoZippedIn batchFirstLastNameGeoZippedIn = null)
        {

            var localVarPath = "/api2/json/usZipRaceEthnicityBatch";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (batchFirstLastNameGeoZippedIn != null && batchFirstLastNameGeoZippedIn.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(batchFirstLastNameGeoZippedIn); // http body (model) parameter
            }
            else
            {
                localVarPostBody = batchFirstLastNameGeoZippedIn; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarHeaderParams["X-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-API-KEY");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsZipRaceEthnicityBatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BatchFirstLastNameUSRaceEthnicityOut>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BatchFirstLastNameUSRaceEthnicityOut) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BatchFirstLastNameUSRaceEthnicityOut)));
        }

    }
}
