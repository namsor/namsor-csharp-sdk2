/* 
 * NamSor API v2
 *
 * NamSor API v2 : enpoints to process personal names (gender, cultural origin or ethnicity) in all alphabets or languages. Use GET methods for small tests, but prefer POST methods for higher throughput (batch processing of up to 100 names at a time). Need something you can't find here? We have many more features coming soon. Let us know, we'll do our best to add it! 
 *
 * OpenAPI spec version: 2.0.11
 * Contact: contact@namsor.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.com.namsor.sdk2.model;

namespace Org.OpenAPITools.com.namsor.sdk2.api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IJapaneseApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Infer the likely gender of a Japanese full name ex. 王晓明
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="japaneseName"></param>
        /// <returns>PersonalNameGenderedOut</returns>
        PersonalNameGenderedOut GenderJapaneseNameFull (string japaneseName);

        /// <summary>
        /// Infer the likely gender of a Japanese full name ex. 王晓明
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="japaneseName"></param>
        /// <returns>ApiResponse of PersonalNameGenderedOut</returns>
        ApiResponse<PersonalNameGenderedOut> GenderJapaneseNameFullWithHttpInfo (string japaneseName);
        /// <summary>
        /// Infer the likely gender of up to 100 full names
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchPersonalNameIn">A list of personal names (optional)</param>
        /// <returns>BatchPersonalNameGenderedOut</returns>
        BatchPersonalNameGenderedOut GenderJapaneseNameFullBatch (BatchPersonalNameIn batchPersonalNameIn = null);

        /// <summary>
        /// Infer the likely gender of up to 100 full names
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchPersonalNameIn">A list of personal names (optional)</param>
        /// <returns>ApiResponse of BatchPersonalNameGenderedOut</returns>
        ApiResponse<BatchPersonalNameGenderedOut> GenderJapaneseNameFullBatchWithHttpInfo (BatchPersonalNameIn batchPersonalNameIn = null);
        /// <summary>
        /// Infer the likely gender of a Japanese name in LATIN (Pinyin).
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="japaneseSurname"></param>
        /// <param name="japaneseGivenName"></param>
        /// <returns>FirstLastNameGenderedOut</returns>
        FirstLastNameGenderedOut GenderJapaneseNamePinyin (string japaneseSurname, string japaneseGivenName);

        /// <summary>
        /// Infer the likely gender of a Japanese name in LATIN (Pinyin).
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="japaneseSurname"></param>
        /// <param name="japaneseGivenName"></param>
        /// <returns>ApiResponse of FirstLastNameGenderedOut</returns>
        ApiResponse<FirstLastNameGenderedOut> GenderJapaneseNamePinyinWithHttpInfo (string japaneseSurname, string japaneseGivenName);
        /// <summary>
        /// Infer the likely gender of up to 100 Japanese names in LATIN (Pinyin).
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchFirstLastNameIn">A list of names, with country code. (optional)</param>
        /// <returns>BatchFirstLastNameGenderedOut</returns>
        BatchFirstLastNameGenderedOut GenderJapaneseNamePinyinBatch (BatchFirstLastNameIn batchFirstLastNameIn = null);

        /// <summary>
        /// Infer the likely gender of up to 100 Japanese names in LATIN (Pinyin).
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchFirstLastNameIn">A list of names, with country code. (optional)</param>
        /// <returns>ApiResponse of BatchFirstLastNameGenderedOut</returns>
        ApiResponse<BatchFirstLastNameGenderedOut> GenderJapaneseNamePinyinBatchWithHttpInfo (BatchFirstLastNameIn batchFirstLastNameIn = null);
        /// <summary>
        /// Identify japanese name candidates in KANJI, based on the romanized name ex. Yamamoto Sanae
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="japaneseSurnameLatin"></param>
        /// <param name="japaneseGivenNameLatin"></param>
        /// <returns>RomanizedNameOut</returns>
        RomanizedNameOut JapaneseNameKanjiCandidates (string japaneseSurnameLatin, string japaneseGivenNameLatin);

        /// <summary>
        /// Identify japanese name candidates in KANJI, based on the romanized name ex. Yamamoto Sanae
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="japaneseSurnameLatin"></param>
        /// <param name="japaneseGivenNameLatin"></param>
        /// <returns>ApiResponse of RomanizedNameOut</returns>
        ApiResponse<RomanizedNameOut> JapaneseNameKanjiCandidatesWithHttpInfo (string japaneseSurnameLatin, string japaneseGivenNameLatin);
        /// <summary>
        /// Identify japanese name candidates in KANJI, based on the romanized name (firstName &#x3D; japaneseGivenName; lastName&#x3D;japaneseSurname), ex. Yamamoto Sanae
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchFirstLastNameIn">A list of personal japanese names in LATIN, firstName &#x3D; japaneseGivenName; lastName&#x3D;japaneseSurname (optional)</param>
        /// <returns>BatchNameMatchCandidatesOut</returns>
        BatchNameMatchCandidatesOut JapaneseNameKanjiCandidatesBatch (BatchFirstLastNameIn batchFirstLastNameIn = null);

        /// <summary>
        /// Identify japanese name candidates in KANJI, based on the romanized name (firstName &#x3D; japaneseGivenName; lastName&#x3D;japaneseSurname), ex. Yamamoto Sanae
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchFirstLastNameIn">A list of personal japanese names in LATIN, firstName &#x3D; japaneseGivenName; lastName&#x3D;japaneseSurname (optional)</param>
        /// <returns>ApiResponse of BatchNameMatchCandidatesOut</returns>
        ApiResponse<BatchNameMatchCandidatesOut> JapaneseNameKanjiCandidatesBatchWithHttpInfo (BatchFirstLastNameIn batchFirstLastNameIn = null);
        /// <summary>
        /// Romanize japanese name, based on the name in Kanji.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="japaneseSurnameKanji"></param>
        /// <param name="japaneseGivenNameKanji"></param>
        /// <returns>RomanizedNameOut</returns>
        RomanizedNameOut JapaneseNameLatinCandidates (string japaneseSurnameKanji, string japaneseGivenNameKanji);

        /// <summary>
        /// Romanize japanese name, based on the name in Kanji.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="japaneseSurnameKanji"></param>
        /// <param name="japaneseGivenNameKanji"></param>
        /// <returns>ApiResponse of RomanizedNameOut</returns>
        ApiResponse<RomanizedNameOut> JapaneseNameLatinCandidatesWithHttpInfo (string japaneseSurnameKanji, string japaneseGivenNameKanji);
        /// <summary>
        /// Romanize japanese names, based on the name in KANJI
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchFirstLastNameIn">A list of personal japanese names in KANJI, firstName &#x3D; japaneseGivenName; lastName&#x3D;japaneseSurname (optional)</param>
        /// <returns>BatchNameMatchCandidatesOut</returns>
        BatchNameMatchCandidatesOut JapaneseNameLatinCandidatesBatch (BatchFirstLastNameIn batchFirstLastNameIn = null);

        /// <summary>
        /// Romanize japanese names, based on the name in KANJI
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchFirstLastNameIn">A list of personal japanese names in KANJI, firstName &#x3D; japaneseGivenName; lastName&#x3D;japaneseSurname (optional)</param>
        /// <returns>ApiResponse of BatchNameMatchCandidatesOut</returns>
        ApiResponse<BatchNameMatchCandidatesOut> JapaneseNameLatinCandidatesBatchWithHttpInfo (BatchFirstLastNameIn batchFirstLastNameIn = null);
        /// <summary>
        /// Return a score for matching Japanese name in KANJI ex. 山本 早苗 with a romanized name ex. Yamamoto Sanae
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="japaneseSurnameLatin"></param>
        /// <param name="japaneseGivenNameLatin"></param>
        /// <param name="japaneseName"></param>
        /// <returns>RomanizedNameOut</returns>
        RomanizedNameOut JapaneseNameMatch (string japaneseSurnameLatin, string japaneseGivenNameLatin, string japaneseName);

        /// <summary>
        /// Return a score for matching Japanese name in KANJI ex. 山本 早苗 with a romanized name ex. Yamamoto Sanae
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="japaneseSurnameLatin"></param>
        /// <param name="japaneseGivenNameLatin"></param>
        /// <param name="japaneseName"></param>
        /// <returns>ApiResponse of RomanizedNameOut</returns>
        ApiResponse<RomanizedNameOut> JapaneseNameMatchWithHttpInfo (string japaneseSurnameLatin, string japaneseGivenNameLatin, string japaneseName);
        /// <summary>
        /// Return a score for matching a list of Japanese names in KANJI ex. 山本 早苗 with romanized names ex. Yamamoto Sanae
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchFirstLastNameIn">A list of personal Japanese names in LATIN, firstName &#x3D; japaneseGivenName; lastName&#x3D;japaneseSurname (optional)</param>
        /// <returns>BatchNameMatchCandidatesOut</returns>
        BatchNameMatchCandidatesOut JapaneseNameMatchBatch (BatchFirstLastNameIn batchFirstLastNameIn = null);

        /// <summary>
        /// Return a score for matching a list of Japanese names in KANJI ex. 山本 早苗 with romanized names ex. Yamamoto Sanae
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchFirstLastNameIn">A list of personal Japanese names in LATIN, firstName &#x3D; japaneseGivenName; lastName&#x3D;japaneseSurname (optional)</param>
        /// <returns>ApiResponse of BatchNameMatchCandidatesOut</returns>
        ApiResponse<BatchNameMatchCandidatesOut> JapaneseNameMatchBatchWithHttpInfo (BatchFirstLastNameIn batchFirstLastNameIn = null);
        /// <summary>
        /// [CREDITS 1 UNIT] Feedback loop to better perform matching Japanese name in KANJI ex. 山本 早苗 with a romanized name ex. Yamamoto Sanae
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="japaneseSurnameLatin"></param>
        /// <param name="japaneseGivenNameLatin"></param>
        /// <param name="japaneseName"></param>
        /// <returns>RomanizedNameOut</returns>
        RomanizedNameOut JapaneseNameMatchFeedbackLoop (string japaneseSurnameLatin, string japaneseGivenNameLatin, string japaneseName);

        /// <summary>
        /// [CREDITS 1 UNIT] Feedback loop to better perform matching Japanese name in KANJI ex. 山本 早苗 with a romanized name ex. Yamamoto Sanae
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="japaneseSurnameLatin"></param>
        /// <param name="japaneseGivenNameLatin"></param>
        /// <param name="japaneseName"></param>
        /// <returns>ApiResponse of RomanizedNameOut</returns>
        ApiResponse<RomanizedNameOut> JapaneseNameMatchFeedbackLoopWithHttpInfo (string japaneseSurnameLatin, string japaneseGivenNameLatin, string japaneseName);
        /// <summary>
        /// Infer the likely first/last name structure of a name, ex. 山本 早苗 or Yamamoto Sanae
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="japaneseName"></param>
        /// <returns>PersonalNameParsedOut</returns>
        PersonalNameParsedOut ParseJapaneseName (string japaneseName);

        /// <summary>
        /// Infer the likely first/last name structure of a name, ex. 山本 早苗 or Yamamoto Sanae
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="japaneseName"></param>
        /// <returns>ApiResponse of PersonalNameParsedOut</returns>
        ApiResponse<PersonalNameParsedOut> ParseJapaneseNameWithHttpInfo (string japaneseName);
        /// <summary>
        /// Infer the likely first/last name structure of a name, ex. 山本 早苗 or Yamamoto Sanae 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchPersonalNameIn">A list of personal names (optional)</param>
        /// <returns>BatchPersonalNameParsedOut</returns>
        BatchPersonalNameParsedOut ParseJapaneseNameBatch (BatchPersonalNameIn batchPersonalNameIn = null);

        /// <summary>
        /// Infer the likely first/last name structure of a name, ex. 山本 早苗 or Yamamoto Sanae 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchPersonalNameIn">A list of personal names (optional)</param>
        /// <returns>ApiResponse of BatchPersonalNameParsedOut</returns>
        ApiResponse<BatchPersonalNameParsedOut> ParseJapaneseNameBatchWithHttpInfo (BatchPersonalNameIn batchPersonalNameIn = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Infer the likely gender of a Japanese full name ex. 王晓明
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="japaneseName"></param>
        /// <returns>Task of PersonalNameGenderedOut</returns>
        System.Threading.Tasks.Task<PersonalNameGenderedOut> GenderJapaneseNameFullAsync (string japaneseName);

        /// <summary>
        /// Infer the likely gender of a Japanese full name ex. 王晓明
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="japaneseName"></param>
        /// <returns>Task of ApiResponse (PersonalNameGenderedOut)</returns>
        System.Threading.Tasks.Task<ApiResponse<PersonalNameGenderedOut>> GenderJapaneseNameFullAsyncWithHttpInfo (string japaneseName);
        /// <summary>
        /// Infer the likely gender of up to 100 full names
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchPersonalNameIn">A list of personal names (optional)</param>
        /// <returns>Task of BatchPersonalNameGenderedOut</returns>
        System.Threading.Tasks.Task<BatchPersonalNameGenderedOut> GenderJapaneseNameFullBatchAsync (BatchPersonalNameIn batchPersonalNameIn = null);

        /// <summary>
        /// Infer the likely gender of up to 100 full names
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchPersonalNameIn">A list of personal names (optional)</param>
        /// <returns>Task of ApiResponse (BatchPersonalNameGenderedOut)</returns>
        System.Threading.Tasks.Task<ApiResponse<BatchPersonalNameGenderedOut>> GenderJapaneseNameFullBatchAsyncWithHttpInfo (BatchPersonalNameIn batchPersonalNameIn = null);
        /// <summary>
        /// Infer the likely gender of a Japanese name in LATIN (Pinyin).
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="japaneseSurname"></param>
        /// <param name="japaneseGivenName"></param>
        /// <returns>Task of FirstLastNameGenderedOut</returns>
        System.Threading.Tasks.Task<FirstLastNameGenderedOut> GenderJapaneseNamePinyinAsync (string japaneseSurname, string japaneseGivenName);

        /// <summary>
        /// Infer the likely gender of a Japanese name in LATIN (Pinyin).
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="japaneseSurname"></param>
        /// <param name="japaneseGivenName"></param>
        /// <returns>Task of ApiResponse (FirstLastNameGenderedOut)</returns>
        System.Threading.Tasks.Task<ApiResponse<FirstLastNameGenderedOut>> GenderJapaneseNamePinyinAsyncWithHttpInfo (string japaneseSurname, string japaneseGivenName);
        /// <summary>
        /// Infer the likely gender of up to 100 Japanese names in LATIN (Pinyin).
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchFirstLastNameIn">A list of names, with country code. (optional)</param>
        /// <returns>Task of BatchFirstLastNameGenderedOut</returns>
        System.Threading.Tasks.Task<BatchFirstLastNameGenderedOut> GenderJapaneseNamePinyinBatchAsync (BatchFirstLastNameIn batchFirstLastNameIn = null);

        /// <summary>
        /// Infer the likely gender of up to 100 Japanese names in LATIN (Pinyin).
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchFirstLastNameIn">A list of names, with country code. (optional)</param>
        /// <returns>Task of ApiResponse (BatchFirstLastNameGenderedOut)</returns>
        System.Threading.Tasks.Task<ApiResponse<BatchFirstLastNameGenderedOut>> GenderJapaneseNamePinyinBatchAsyncWithHttpInfo (BatchFirstLastNameIn batchFirstLastNameIn = null);
        /// <summary>
        /// Identify japanese name candidates in KANJI, based on the romanized name ex. Yamamoto Sanae
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="japaneseSurnameLatin"></param>
        /// <param name="japaneseGivenNameLatin"></param>
        /// <returns>Task of RomanizedNameOut</returns>
        System.Threading.Tasks.Task<RomanizedNameOut> JapaneseNameKanjiCandidatesAsync (string japaneseSurnameLatin, string japaneseGivenNameLatin);

        /// <summary>
        /// Identify japanese name candidates in KANJI, based on the romanized name ex. Yamamoto Sanae
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="japaneseSurnameLatin"></param>
        /// <param name="japaneseGivenNameLatin"></param>
        /// <returns>Task of ApiResponse (RomanizedNameOut)</returns>
        System.Threading.Tasks.Task<ApiResponse<RomanizedNameOut>> JapaneseNameKanjiCandidatesAsyncWithHttpInfo (string japaneseSurnameLatin, string japaneseGivenNameLatin);
        /// <summary>
        /// Identify japanese name candidates in KANJI, based on the romanized name (firstName &#x3D; japaneseGivenName; lastName&#x3D;japaneseSurname), ex. Yamamoto Sanae
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchFirstLastNameIn">A list of personal japanese names in LATIN, firstName &#x3D; japaneseGivenName; lastName&#x3D;japaneseSurname (optional)</param>
        /// <returns>Task of BatchNameMatchCandidatesOut</returns>
        System.Threading.Tasks.Task<BatchNameMatchCandidatesOut> JapaneseNameKanjiCandidatesBatchAsync (BatchFirstLastNameIn batchFirstLastNameIn = null);

        /// <summary>
        /// Identify japanese name candidates in KANJI, based on the romanized name (firstName &#x3D; japaneseGivenName; lastName&#x3D;japaneseSurname), ex. Yamamoto Sanae
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchFirstLastNameIn">A list of personal japanese names in LATIN, firstName &#x3D; japaneseGivenName; lastName&#x3D;japaneseSurname (optional)</param>
        /// <returns>Task of ApiResponse (BatchNameMatchCandidatesOut)</returns>
        System.Threading.Tasks.Task<ApiResponse<BatchNameMatchCandidatesOut>> JapaneseNameKanjiCandidatesBatchAsyncWithHttpInfo (BatchFirstLastNameIn batchFirstLastNameIn = null);
        /// <summary>
        /// Romanize japanese name, based on the name in Kanji.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="japaneseSurnameKanji"></param>
        /// <param name="japaneseGivenNameKanji"></param>
        /// <returns>Task of RomanizedNameOut</returns>
        System.Threading.Tasks.Task<RomanizedNameOut> JapaneseNameLatinCandidatesAsync (string japaneseSurnameKanji, string japaneseGivenNameKanji);

        /// <summary>
        /// Romanize japanese name, based on the name in Kanji.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="japaneseSurnameKanji"></param>
        /// <param name="japaneseGivenNameKanji"></param>
        /// <returns>Task of ApiResponse (RomanizedNameOut)</returns>
        System.Threading.Tasks.Task<ApiResponse<RomanizedNameOut>> JapaneseNameLatinCandidatesAsyncWithHttpInfo (string japaneseSurnameKanji, string japaneseGivenNameKanji);
        /// <summary>
        /// Romanize japanese names, based on the name in KANJI
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchFirstLastNameIn">A list of personal japanese names in KANJI, firstName &#x3D; japaneseGivenName; lastName&#x3D;japaneseSurname (optional)</param>
        /// <returns>Task of BatchNameMatchCandidatesOut</returns>
        System.Threading.Tasks.Task<BatchNameMatchCandidatesOut> JapaneseNameLatinCandidatesBatchAsync (BatchFirstLastNameIn batchFirstLastNameIn = null);

        /// <summary>
        /// Romanize japanese names, based on the name in KANJI
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchFirstLastNameIn">A list of personal japanese names in KANJI, firstName &#x3D; japaneseGivenName; lastName&#x3D;japaneseSurname (optional)</param>
        /// <returns>Task of ApiResponse (BatchNameMatchCandidatesOut)</returns>
        System.Threading.Tasks.Task<ApiResponse<BatchNameMatchCandidatesOut>> JapaneseNameLatinCandidatesBatchAsyncWithHttpInfo (BatchFirstLastNameIn batchFirstLastNameIn = null);
        /// <summary>
        /// Return a score for matching Japanese name in KANJI ex. 山本 早苗 with a romanized name ex. Yamamoto Sanae
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="japaneseSurnameLatin"></param>
        /// <param name="japaneseGivenNameLatin"></param>
        /// <param name="japaneseName"></param>
        /// <returns>Task of RomanizedNameOut</returns>
        System.Threading.Tasks.Task<RomanizedNameOut> JapaneseNameMatchAsync (string japaneseSurnameLatin, string japaneseGivenNameLatin, string japaneseName);

        /// <summary>
        /// Return a score for matching Japanese name in KANJI ex. 山本 早苗 with a romanized name ex. Yamamoto Sanae
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="japaneseSurnameLatin"></param>
        /// <param name="japaneseGivenNameLatin"></param>
        /// <param name="japaneseName"></param>
        /// <returns>Task of ApiResponse (RomanizedNameOut)</returns>
        System.Threading.Tasks.Task<ApiResponse<RomanizedNameOut>> JapaneseNameMatchAsyncWithHttpInfo (string japaneseSurnameLatin, string japaneseGivenNameLatin, string japaneseName);
        /// <summary>
        /// Return a score for matching a list of Japanese names in KANJI ex. 山本 早苗 with romanized names ex. Yamamoto Sanae
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchFirstLastNameIn">A list of personal Japanese names in LATIN, firstName &#x3D; japaneseGivenName; lastName&#x3D;japaneseSurname (optional)</param>
        /// <returns>Task of BatchNameMatchCandidatesOut</returns>
        System.Threading.Tasks.Task<BatchNameMatchCandidatesOut> JapaneseNameMatchBatchAsync (BatchFirstLastNameIn batchFirstLastNameIn = null);

        /// <summary>
        /// Return a score for matching a list of Japanese names in KANJI ex. 山本 早苗 with romanized names ex. Yamamoto Sanae
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchFirstLastNameIn">A list of personal Japanese names in LATIN, firstName &#x3D; japaneseGivenName; lastName&#x3D;japaneseSurname (optional)</param>
        /// <returns>Task of ApiResponse (BatchNameMatchCandidatesOut)</returns>
        System.Threading.Tasks.Task<ApiResponse<BatchNameMatchCandidatesOut>> JapaneseNameMatchBatchAsyncWithHttpInfo (BatchFirstLastNameIn batchFirstLastNameIn = null);
        /// <summary>
        /// [CREDITS 1 UNIT] Feedback loop to better perform matching Japanese name in KANJI ex. 山本 早苗 with a romanized name ex. Yamamoto Sanae
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="japaneseSurnameLatin"></param>
        /// <param name="japaneseGivenNameLatin"></param>
        /// <param name="japaneseName"></param>
        /// <returns>Task of RomanizedNameOut</returns>
        System.Threading.Tasks.Task<RomanizedNameOut> JapaneseNameMatchFeedbackLoopAsync (string japaneseSurnameLatin, string japaneseGivenNameLatin, string japaneseName);

        /// <summary>
        /// [CREDITS 1 UNIT] Feedback loop to better perform matching Japanese name in KANJI ex. 山本 早苗 with a romanized name ex. Yamamoto Sanae
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="japaneseSurnameLatin"></param>
        /// <param name="japaneseGivenNameLatin"></param>
        /// <param name="japaneseName"></param>
        /// <returns>Task of ApiResponse (RomanizedNameOut)</returns>
        System.Threading.Tasks.Task<ApiResponse<RomanizedNameOut>> JapaneseNameMatchFeedbackLoopAsyncWithHttpInfo (string japaneseSurnameLatin, string japaneseGivenNameLatin, string japaneseName);
        /// <summary>
        /// Infer the likely first/last name structure of a name, ex. 山本 早苗 or Yamamoto Sanae
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="japaneseName"></param>
        /// <returns>Task of PersonalNameParsedOut</returns>
        System.Threading.Tasks.Task<PersonalNameParsedOut> ParseJapaneseNameAsync (string japaneseName);

        /// <summary>
        /// Infer the likely first/last name structure of a name, ex. 山本 早苗 or Yamamoto Sanae
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="japaneseName"></param>
        /// <returns>Task of ApiResponse (PersonalNameParsedOut)</returns>
        System.Threading.Tasks.Task<ApiResponse<PersonalNameParsedOut>> ParseJapaneseNameAsyncWithHttpInfo (string japaneseName);
        /// <summary>
        /// Infer the likely first/last name structure of a name, ex. 山本 早苗 or Yamamoto Sanae 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchPersonalNameIn">A list of personal names (optional)</param>
        /// <returns>Task of BatchPersonalNameParsedOut</returns>
        System.Threading.Tasks.Task<BatchPersonalNameParsedOut> ParseJapaneseNameBatchAsync (BatchPersonalNameIn batchPersonalNameIn = null);

        /// <summary>
        /// Infer the likely first/last name structure of a name, ex. 山本 早苗 or Yamamoto Sanae 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchPersonalNameIn">A list of personal names (optional)</param>
        /// <returns>Task of ApiResponse (BatchPersonalNameParsedOut)</returns>
        System.Threading.Tasks.Task<ApiResponse<BatchPersonalNameParsedOut>> ParseJapaneseNameBatchAsyncWithHttpInfo (BatchPersonalNameIn batchPersonalNameIn = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class JapaneseApi : IJapaneseApi
    {
        private Org.OpenAPITools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="JapaneseApi"/> class.
        /// </summary>
        /// <returns></returns>
        public JapaneseApi(String basePath)
        {
            this.Configuration = new Org.OpenAPITools.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="JapaneseApi"/> class
        /// </summary>
        /// <returns></returns>
        public JapaneseApi()
        {
            this.Configuration = Org.OpenAPITools.Client.Configuration.Default;

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="JapaneseApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public JapaneseApi(Org.OpenAPITools.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Org.OpenAPITools.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.OpenAPITools.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.OpenAPITools.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Infer the likely gender of a Japanese full name ex. 王晓明 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="japaneseName"></param>
        /// <returns>PersonalNameGenderedOut</returns>
        public PersonalNameGenderedOut GenderJapaneseNameFull (string japaneseName)
        {
             ApiResponse<PersonalNameGenderedOut> localVarResponse = GenderJapaneseNameFullWithHttpInfo(japaneseName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Infer the likely gender of a Japanese full name ex. 王晓明 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="japaneseName"></param>
        /// <returns>ApiResponse of PersonalNameGenderedOut</returns>
        public ApiResponse< PersonalNameGenderedOut > GenderJapaneseNameFullWithHttpInfo (string japaneseName)
        {
            // verify the required parameter 'japaneseName' is set
            if (japaneseName == null)
                throw new ApiException(400, "Missing required parameter 'japaneseName' when calling JapaneseApi->GenderJapaneseNameFull");

            var localVarPath = "/api2/json/genderJapaneseNameFull/{japaneseName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (japaneseName != null) localVarPathParams.Add("japaneseName", this.Configuration.ApiClient.ParameterToString(japaneseName)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarHeaderParams["X-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-API-KEY");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GenderJapaneseNameFull", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PersonalNameGenderedOut>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PersonalNameGenderedOut) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PersonalNameGenderedOut)));
        }

        /// <summary>
        /// Infer the likely gender of a Japanese full name ex. 王晓明 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="japaneseName"></param>
        /// <returns>Task of PersonalNameGenderedOut</returns>
        public async System.Threading.Tasks.Task<PersonalNameGenderedOut> GenderJapaneseNameFullAsync (string japaneseName)
        {
             ApiResponse<PersonalNameGenderedOut> localVarResponse = await GenderJapaneseNameFullAsyncWithHttpInfo(japaneseName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Infer the likely gender of a Japanese full name ex. 王晓明 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="japaneseName"></param>
        /// <returns>Task of ApiResponse (PersonalNameGenderedOut)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PersonalNameGenderedOut>> GenderJapaneseNameFullAsyncWithHttpInfo (string japaneseName)
        {
            // verify the required parameter 'japaneseName' is set
            if (japaneseName == null)
                throw new ApiException(400, "Missing required parameter 'japaneseName' when calling JapaneseApi->GenderJapaneseNameFull");

            var localVarPath = "/api2/json/genderJapaneseNameFull/{japaneseName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (japaneseName != null) localVarPathParams.Add("japaneseName", this.Configuration.ApiClient.ParameterToString(japaneseName)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarHeaderParams["X-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-API-KEY");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GenderJapaneseNameFull", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PersonalNameGenderedOut>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PersonalNameGenderedOut) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PersonalNameGenderedOut)));
        }

        /// <summary>
        /// Infer the likely gender of up to 100 full names 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchPersonalNameIn">A list of personal names (optional)</param>
        /// <returns>BatchPersonalNameGenderedOut</returns>
        public BatchPersonalNameGenderedOut GenderJapaneseNameFullBatch (BatchPersonalNameIn batchPersonalNameIn = null)
        {
             ApiResponse<BatchPersonalNameGenderedOut> localVarResponse = GenderJapaneseNameFullBatchWithHttpInfo(batchPersonalNameIn);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Infer the likely gender of up to 100 full names 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchPersonalNameIn">A list of personal names (optional)</param>
        /// <returns>ApiResponse of BatchPersonalNameGenderedOut</returns>
        public ApiResponse< BatchPersonalNameGenderedOut > GenderJapaneseNameFullBatchWithHttpInfo (BatchPersonalNameIn batchPersonalNameIn = null)
        {

            var localVarPath = "/api2/json/genderJapaneseNameFullBatch";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (batchPersonalNameIn != null && batchPersonalNameIn.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(batchPersonalNameIn); // http body (model) parameter
            }
            else
            {
                localVarPostBody = batchPersonalNameIn; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarHeaderParams["X-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-API-KEY");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GenderJapaneseNameFullBatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BatchPersonalNameGenderedOut>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BatchPersonalNameGenderedOut) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BatchPersonalNameGenderedOut)));
        }

        /// <summary>
        /// Infer the likely gender of up to 100 full names 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchPersonalNameIn">A list of personal names (optional)</param>
        /// <returns>Task of BatchPersonalNameGenderedOut</returns>
        public async System.Threading.Tasks.Task<BatchPersonalNameGenderedOut> GenderJapaneseNameFullBatchAsync (BatchPersonalNameIn batchPersonalNameIn = null)
        {
             ApiResponse<BatchPersonalNameGenderedOut> localVarResponse = await GenderJapaneseNameFullBatchAsyncWithHttpInfo(batchPersonalNameIn);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Infer the likely gender of up to 100 full names 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchPersonalNameIn">A list of personal names (optional)</param>
        /// <returns>Task of ApiResponse (BatchPersonalNameGenderedOut)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BatchPersonalNameGenderedOut>> GenderJapaneseNameFullBatchAsyncWithHttpInfo (BatchPersonalNameIn batchPersonalNameIn = null)
        {

            var localVarPath = "/api2/json/genderJapaneseNameFullBatch";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (batchPersonalNameIn != null && batchPersonalNameIn.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(batchPersonalNameIn); // http body (model) parameter
            }
            else
            {
                localVarPostBody = batchPersonalNameIn; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarHeaderParams["X-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-API-KEY");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GenderJapaneseNameFullBatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BatchPersonalNameGenderedOut>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BatchPersonalNameGenderedOut) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BatchPersonalNameGenderedOut)));
        }

        /// <summary>
        /// Infer the likely gender of a Japanese name in LATIN (Pinyin). 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="japaneseSurname"></param>
        /// <param name="japaneseGivenName"></param>
        /// <returns>FirstLastNameGenderedOut</returns>
        public FirstLastNameGenderedOut GenderJapaneseNamePinyin (string japaneseSurname, string japaneseGivenName)
        {
             ApiResponse<FirstLastNameGenderedOut> localVarResponse = GenderJapaneseNamePinyinWithHttpInfo(japaneseSurname, japaneseGivenName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Infer the likely gender of a Japanese name in LATIN (Pinyin). 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="japaneseSurname"></param>
        /// <param name="japaneseGivenName"></param>
        /// <returns>ApiResponse of FirstLastNameGenderedOut</returns>
        public ApiResponse< FirstLastNameGenderedOut > GenderJapaneseNamePinyinWithHttpInfo (string japaneseSurname, string japaneseGivenName)
        {
            // verify the required parameter 'japaneseSurname' is set
            if (japaneseSurname == null)
                throw new ApiException(400, "Missing required parameter 'japaneseSurname' when calling JapaneseApi->GenderJapaneseNamePinyin");
            // verify the required parameter 'japaneseGivenName' is set
            if (japaneseGivenName == null)
                throw new ApiException(400, "Missing required parameter 'japaneseGivenName' when calling JapaneseApi->GenderJapaneseNamePinyin");

            var localVarPath = "/api2/json/genderJapaneseName/{japaneseSurname}/{japaneseGivenName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (japaneseSurname != null) localVarPathParams.Add("japaneseSurname", this.Configuration.ApiClient.ParameterToString(japaneseSurname)); // path parameter
            if (japaneseGivenName != null) localVarPathParams.Add("japaneseGivenName", this.Configuration.ApiClient.ParameterToString(japaneseGivenName)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarHeaderParams["X-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-API-KEY");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GenderJapaneseNamePinyin", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FirstLastNameGenderedOut>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FirstLastNameGenderedOut) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FirstLastNameGenderedOut)));
        }

        /// <summary>
        /// Infer the likely gender of a Japanese name in LATIN (Pinyin). 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="japaneseSurname"></param>
        /// <param name="japaneseGivenName"></param>
        /// <returns>Task of FirstLastNameGenderedOut</returns>
        public async System.Threading.Tasks.Task<FirstLastNameGenderedOut> GenderJapaneseNamePinyinAsync (string japaneseSurname, string japaneseGivenName)
        {
             ApiResponse<FirstLastNameGenderedOut> localVarResponse = await GenderJapaneseNamePinyinAsyncWithHttpInfo(japaneseSurname, japaneseGivenName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Infer the likely gender of a Japanese name in LATIN (Pinyin). 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="japaneseSurname"></param>
        /// <param name="japaneseGivenName"></param>
        /// <returns>Task of ApiResponse (FirstLastNameGenderedOut)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FirstLastNameGenderedOut>> GenderJapaneseNamePinyinAsyncWithHttpInfo (string japaneseSurname, string japaneseGivenName)
        {
            // verify the required parameter 'japaneseSurname' is set
            if (japaneseSurname == null)
                throw new ApiException(400, "Missing required parameter 'japaneseSurname' when calling JapaneseApi->GenderJapaneseNamePinyin");
            // verify the required parameter 'japaneseGivenName' is set
            if (japaneseGivenName == null)
                throw new ApiException(400, "Missing required parameter 'japaneseGivenName' when calling JapaneseApi->GenderJapaneseNamePinyin");

            var localVarPath = "/api2/json/genderJapaneseName/{japaneseSurname}/{japaneseGivenName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (japaneseSurname != null) localVarPathParams.Add("japaneseSurname", this.Configuration.ApiClient.ParameterToString(japaneseSurname)); // path parameter
            if (japaneseGivenName != null) localVarPathParams.Add("japaneseGivenName", this.Configuration.ApiClient.ParameterToString(japaneseGivenName)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarHeaderParams["X-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-API-KEY");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GenderJapaneseNamePinyin", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FirstLastNameGenderedOut>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FirstLastNameGenderedOut) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FirstLastNameGenderedOut)));
        }

        /// <summary>
        /// Infer the likely gender of up to 100 Japanese names in LATIN (Pinyin). 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchFirstLastNameIn">A list of names, with country code. (optional)</param>
        /// <returns>BatchFirstLastNameGenderedOut</returns>
        public BatchFirstLastNameGenderedOut GenderJapaneseNamePinyinBatch (BatchFirstLastNameIn batchFirstLastNameIn = null)
        {
             ApiResponse<BatchFirstLastNameGenderedOut> localVarResponse = GenderJapaneseNamePinyinBatchWithHttpInfo(batchFirstLastNameIn);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Infer the likely gender of up to 100 Japanese names in LATIN (Pinyin). 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchFirstLastNameIn">A list of names, with country code. (optional)</param>
        /// <returns>ApiResponse of BatchFirstLastNameGenderedOut</returns>
        public ApiResponse< BatchFirstLastNameGenderedOut > GenderJapaneseNamePinyinBatchWithHttpInfo (BatchFirstLastNameIn batchFirstLastNameIn = null)
        {

            var localVarPath = "/api2/json/genderJapaneseNameBatch";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (batchFirstLastNameIn != null && batchFirstLastNameIn.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(batchFirstLastNameIn); // http body (model) parameter
            }
            else
            {
                localVarPostBody = batchFirstLastNameIn; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarHeaderParams["X-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-API-KEY");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GenderJapaneseNamePinyinBatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BatchFirstLastNameGenderedOut>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BatchFirstLastNameGenderedOut) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BatchFirstLastNameGenderedOut)));
        }

        /// <summary>
        /// Infer the likely gender of up to 100 Japanese names in LATIN (Pinyin). 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchFirstLastNameIn">A list of names, with country code. (optional)</param>
        /// <returns>Task of BatchFirstLastNameGenderedOut</returns>
        public async System.Threading.Tasks.Task<BatchFirstLastNameGenderedOut> GenderJapaneseNamePinyinBatchAsync (BatchFirstLastNameIn batchFirstLastNameIn = null)
        {
             ApiResponse<BatchFirstLastNameGenderedOut> localVarResponse = await GenderJapaneseNamePinyinBatchAsyncWithHttpInfo(batchFirstLastNameIn);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Infer the likely gender of up to 100 Japanese names in LATIN (Pinyin). 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchFirstLastNameIn">A list of names, with country code. (optional)</param>
        /// <returns>Task of ApiResponse (BatchFirstLastNameGenderedOut)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BatchFirstLastNameGenderedOut>> GenderJapaneseNamePinyinBatchAsyncWithHttpInfo (BatchFirstLastNameIn batchFirstLastNameIn = null)
        {

            var localVarPath = "/api2/json/genderJapaneseNameBatch";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (batchFirstLastNameIn != null && batchFirstLastNameIn.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(batchFirstLastNameIn); // http body (model) parameter
            }
            else
            {
                localVarPostBody = batchFirstLastNameIn; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarHeaderParams["X-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-API-KEY");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GenderJapaneseNamePinyinBatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BatchFirstLastNameGenderedOut>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BatchFirstLastNameGenderedOut) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BatchFirstLastNameGenderedOut)));
        }

        /// <summary>
        /// Identify japanese name candidates in KANJI, based on the romanized name ex. Yamamoto Sanae 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="japaneseSurnameLatin"></param>
        /// <param name="japaneseGivenNameLatin"></param>
        /// <returns>RomanizedNameOut</returns>
        public RomanizedNameOut JapaneseNameKanjiCandidates (string japaneseSurnameLatin, string japaneseGivenNameLatin)
        {
             ApiResponse<RomanizedNameOut> localVarResponse = JapaneseNameKanjiCandidatesWithHttpInfo(japaneseSurnameLatin, japaneseGivenNameLatin);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Identify japanese name candidates in KANJI, based on the romanized name ex. Yamamoto Sanae 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="japaneseSurnameLatin"></param>
        /// <param name="japaneseGivenNameLatin"></param>
        /// <returns>ApiResponse of RomanizedNameOut</returns>
        public ApiResponse< RomanizedNameOut > JapaneseNameKanjiCandidatesWithHttpInfo (string japaneseSurnameLatin, string japaneseGivenNameLatin)
        {
            // verify the required parameter 'japaneseSurnameLatin' is set
            if (japaneseSurnameLatin == null)
                throw new ApiException(400, "Missing required parameter 'japaneseSurnameLatin' when calling JapaneseApi->JapaneseNameKanjiCandidates");
            // verify the required parameter 'japaneseGivenNameLatin' is set
            if (japaneseGivenNameLatin == null)
                throw new ApiException(400, "Missing required parameter 'japaneseGivenNameLatin' when calling JapaneseApi->JapaneseNameKanjiCandidates");

            var localVarPath = "/api2/json/japaneseNameKanjiCandidates/{japaneseSurnameLatin}/{japaneseGivenNameLatin}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (japaneseSurnameLatin != null) localVarPathParams.Add("japaneseSurnameLatin", this.Configuration.ApiClient.ParameterToString(japaneseSurnameLatin)); // path parameter
            if (japaneseGivenNameLatin != null) localVarPathParams.Add("japaneseGivenNameLatin", this.Configuration.ApiClient.ParameterToString(japaneseGivenNameLatin)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarHeaderParams["X-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-API-KEY");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("JapaneseNameKanjiCandidates", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RomanizedNameOut>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RomanizedNameOut) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RomanizedNameOut)));
        }

        /// <summary>
        /// Identify japanese name candidates in KANJI, based on the romanized name ex. Yamamoto Sanae 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="japaneseSurnameLatin"></param>
        /// <param name="japaneseGivenNameLatin"></param>
        /// <returns>Task of RomanizedNameOut</returns>
        public async System.Threading.Tasks.Task<RomanizedNameOut> JapaneseNameKanjiCandidatesAsync (string japaneseSurnameLatin, string japaneseGivenNameLatin)
        {
             ApiResponse<RomanizedNameOut> localVarResponse = await JapaneseNameKanjiCandidatesAsyncWithHttpInfo(japaneseSurnameLatin, japaneseGivenNameLatin);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Identify japanese name candidates in KANJI, based on the romanized name ex. Yamamoto Sanae 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="japaneseSurnameLatin"></param>
        /// <param name="japaneseGivenNameLatin"></param>
        /// <returns>Task of ApiResponse (RomanizedNameOut)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RomanizedNameOut>> JapaneseNameKanjiCandidatesAsyncWithHttpInfo (string japaneseSurnameLatin, string japaneseGivenNameLatin)
        {
            // verify the required parameter 'japaneseSurnameLatin' is set
            if (japaneseSurnameLatin == null)
                throw new ApiException(400, "Missing required parameter 'japaneseSurnameLatin' when calling JapaneseApi->JapaneseNameKanjiCandidates");
            // verify the required parameter 'japaneseGivenNameLatin' is set
            if (japaneseGivenNameLatin == null)
                throw new ApiException(400, "Missing required parameter 'japaneseGivenNameLatin' when calling JapaneseApi->JapaneseNameKanjiCandidates");

            var localVarPath = "/api2/json/japaneseNameKanjiCandidates/{japaneseSurnameLatin}/{japaneseGivenNameLatin}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (japaneseSurnameLatin != null) localVarPathParams.Add("japaneseSurnameLatin", this.Configuration.ApiClient.ParameterToString(japaneseSurnameLatin)); // path parameter
            if (japaneseGivenNameLatin != null) localVarPathParams.Add("japaneseGivenNameLatin", this.Configuration.ApiClient.ParameterToString(japaneseGivenNameLatin)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarHeaderParams["X-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-API-KEY");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("JapaneseNameKanjiCandidates", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RomanizedNameOut>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RomanizedNameOut) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RomanizedNameOut)));
        }

        /// <summary>
        /// Identify japanese name candidates in KANJI, based on the romanized name (firstName &#x3D; japaneseGivenName; lastName&#x3D;japaneseSurname), ex. Yamamoto Sanae 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchFirstLastNameIn">A list of personal japanese names in LATIN, firstName &#x3D; japaneseGivenName; lastName&#x3D;japaneseSurname (optional)</param>
        /// <returns>BatchNameMatchCandidatesOut</returns>
        public BatchNameMatchCandidatesOut JapaneseNameKanjiCandidatesBatch (BatchFirstLastNameIn batchFirstLastNameIn = null)
        {
             ApiResponse<BatchNameMatchCandidatesOut> localVarResponse = JapaneseNameKanjiCandidatesBatchWithHttpInfo(batchFirstLastNameIn);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Identify japanese name candidates in KANJI, based on the romanized name (firstName &#x3D; japaneseGivenName; lastName&#x3D;japaneseSurname), ex. Yamamoto Sanae 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchFirstLastNameIn">A list of personal japanese names in LATIN, firstName &#x3D; japaneseGivenName; lastName&#x3D;japaneseSurname (optional)</param>
        /// <returns>ApiResponse of BatchNameMatchCandidatesOut</returns>
        public ApiResponse< BatchNameMatchCandidatesOut > JapaneseNameKanjiCandidatesBatchWithHttpInfo (BatchFirstLastNameIn batchFirstLastNameIn = null)
        {

            var localVarPath = "/api2/json/japaneseNameKanjiCandidatesBatch";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (batchFirstLastNameIn != null && batchFirstLastNameIn.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(batchFirstLastNameIn); // http body (model) parameter
            }
            else
            {
                localVarPostBody = batchFirstLastNameIn; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarHeaderParams["X-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-API-KEY");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("JapaneseNameKanjiCandidatesBatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BatchNameMatchCandidatesOut>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BatchNameMatchCandidatesOut) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BatchNameMatchCandidatesOut)));
        }

        /// <summary>
        /// Identify japanese name candidates in KANJI, based on the romanized name (firstName &#x3D; japaneseGivenName; lastName&#x3D;japaneseSurname), ex. Yamamoto Sanae 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchFirstLastNameIn">A list of personal japanese names in LATIN, firstName &#x3D; japaneseGivenName; lastName&#x3D;japaneseSurname (optional)</param>
        /// <returns>Task of BatchNameMatchCandidatesOut</returns>
        public async System.Threading.Tasks.Task<BatchNameMatchCandidatesOut> JapaneseNameKanjiCandidatesBatchAsync (BatchFirstLastNameIn batchFirstLastNameIn = null)
        {
             ApiResponse<BatchNameMatchCandidatesOut> localVarResponse = await JapaneseNameKanjiCandidatesBatchAsyncWithHttpInfo(batchFirstLastNameIn);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Identify japanese name candidates in KANJI, based on the romanized name (firstName &#x3D; japaneseGivenName; lastName&#x3D;japaneseSurname), ex. Yamamoto Sanae 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchFirstLastNameIn">A list of personal japanese names in LATIN, firstName &#x3D; japaneseGivenName; lastName&#x3D;japaneseSurname (optional)</param>
        /// <returns>Task of ApiResponse (BatchNameMatchCandidatesOut)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BatchNameMatchCandidatesOut>> JapaneseNameKanjiCandidatesBatchAsyncWithHttpInfo (BatchFirstLastNameIn batchFirstLastNameIn = null)
        {

            var localVarPath = "/api2/json/japaneseNameKanjiCandidatesBatch";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (batchFirstLastNameIn != null && batchFirstLastNameIn.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(batchFirstLastNameIn); // http body (model) parameter
            }
            else
            {
                localVarPostBody = batchFirstLastNameIn; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarHeaderParams["X-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-API-KEY");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("JapaneseNameKanjiCandidatesBatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BatchNameMatchCandidatesOut>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BatchNameMatchCandidatesOut) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BatchNameMatchCandidatesOut)));
        }

        /// <summary>
        /// Romanize japanese name, based on the name in Kanji. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="japaneseSurnameKanji"></param>
        /// <param name="japaneseGivenNameKanji"></param>
        /// <returns>RomanizedNameOut</returns>
        public RomanizedNameOut JapaneseNameLatinCandidates (string japaneseSurnameKanji, string japaneseGivenNameKanji)
        {
             ApiResponse<RomanizedNameOut> localVarResponse = JapaneseNameLatinCandidatesWithHttpInfo(japaneseSurnameKanji, japaneseGivenNameKanji);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Romanize japanese name, based on the name in Kanji. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="japaneseSurnameKanji"></param>
        /// <param name="japaneseGivenNameKanji"></param>
        /// <returns>ApiResponse of RomanizedNameOut</returns>
        public ApiResponse< RomanizedNameOut > JapaneseNameLatinCandidatesWithHttpInfo (string japaneseSurnameKanji, string japaneseGivenNameKanji)
        {
            // verify the required parameter 'japaneseSurnameKanji' is set
            if (japaneseSurnameKanji == null)
                throw new ApiException(400, "Missing required parameter 'japaneseSurnameKanji' when calling JapaneseApi->JapaneseNameLatinCandidates");
            // verify the required parameter 'japaneseGivenNameKanji' is set
            if (japaneseGivenNameKanji == null)
                throw new ApiException(400, "Missing required parameter 'japaneseGivenNameKanji' when calling JapaneseApi->JapaneseNameLatinCandidates");

            var localVarPath = "/api2/json/japaneseNameLatinCandidates/{japaneseSurnameKanji}/{japaneseGivenNameKanji}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (japaneseSurnameKanji != null) localVarPathParams.Add("japaneseSurnameKanji", this.Configuration.ApiClient.ParameterToString(japaneseSurnameKanji)); // path parameter
            if (japaneseGivenNameKanji != null) localVarPathParams.Add("japaneseGivenNameKanji", this.Configuration.ApiClient.ParameterToString(japaneseGivenNameKanji)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarHeaderParams["X-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-API-KEY");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("JapaneseNameLatinCandidates", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RomanizedNameOut>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RomanizedNameOut) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RomanizedNameOut)));
        }

        /// <summary>
        /// Romanize japanese name, based on the name in Kanji. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="japaneseSurnameKanji"></param>
        /// <param name="japaneseGivenNameKanji"></param>
        /// <returns>Task of RomanizedNameOut</returns>
        public async System.Threading.Tasks.Task<RomanizedNameOut> JapaneseNameLatinCandidatesAsync (string japaneseSurnameKanji, string japaneseGivenNameKanji)
        {
             ApiResponse<RomanizedNameOut> localVarResponse = await JapaneseNameLatinCandidatesAsyncWithHttpInfo(japaneseSurnameKanji, japaneseGivenNameKanji);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Romanize japanese name, based on the name in Kanji. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="japaneseSurnameKanji"></param>
        /// <param name="japaneseGivenNameKanji"></param>
        /// <returns>Task of ApiResponse (RomanizedNameOut)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RomanizedNameOut>> JapaneseNameLatinCandidatesAsyncWithHttpInfo (string japaneseSurnameKanji, string japaneseGivenNameKanji)
        {
            // verify the required parameter 'japaneseSurnameKanji' is set
            if (japaneseSurnameKanji == null)
                throw new ApiException(400, "Missing required parameter 'japaneseSurnameKanji' when calling JapaneseApi->JapaneseNameLatinCandidates");
            // verify the required parameter 'japaneseGivenNameKanji' is set
            if (japaneseGivenNameKanji == null)
                throw new ApiException(400, "Missing required parameter 'japaneseGivenNameKanji' when calling JapaneseApi->JapaneseNameLatinCandidates");

            var localVarPath = "/api2/json/japaneseNameLatinCandidates/{japaneseSurnameKanji}/{japaneseGivenNameKanji}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (japaneseSurnameKanji != null) localVarPathParams.Add("japaneseSurnameKanji", this.Configuration.ApiClient.ParameterToString(japaneseSurnameKanji)); // path parameter
            if (japaneseGivenNameKanji != null) localVarPathParams.Add("japaneseGivenNameKanji", this.Configuration.ApiClient.ParameterToString(japaneseGivenNameKanji)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarHeaderParams["X-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-API-KEY");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("JapaneseNameLatinCandidates", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RomanizedNameOut>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RomanizedNameOut) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RomanizedNameOut)));
        }

        /// <summary>
        /// Romanize japanese names, based on the name in KANJI 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchFirstLastNameIn">A list of personal japanese names in KANJI, firstName &#x3D; japaneseGivenName; lastName&#x3D;japaneseSurname (optional)</param>
        /// <returns>BatchNameMatchCandidatesOut</returns>
        public BatchNameMatchCandidatesOut JapaneseNameLatinCandidatesBatch (BatchFirstLastNameIn batchFirstLastNameIn = null)
        {
             ApiResponse<BatchNameMatchCandidatesOut> localVarResponse = JapaneseNameLatinCandidatesBatchWithHttpInfo(batchFirstLastNameIn);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Romanize japanese names, based on the name in KANJI 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchFirstLastNameIn">A list of personal japanese names in KANJI, firstName &#x3D; japaneseGivenName; lastName&#x3D;japaneseSurname (optional)</param>
        /// <returns>ApiResponse of BatchNameMatchCandidatesOut</returns>
        public ApiResponse< BatchNameMatchCandidatesOut > JapaneseNameLatinCandidatesBatchWithHttpInfo (BatchFirstLastNameIn batchFirstLastNameIn = null)
        {

            var localVarPath = "/api2/json/japaneseNameLatinCandidatesBatch";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (batchFirstLastNameIn != null && batchFirstLastNameIn.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(batchFirstLastNameIn); // http body (model) parameter
            }
            else
            {
                localVarPostBody = batchFirstLastNameIn; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarHeaderParams["X-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-API-KEY");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("JapaneseNameLatinCandidatesBatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BatchNameMatchCandidatesOut>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BatchNameMatchCandidatesOut) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BatchNameMatchCandidatesOut)));
        }

        /// <summary>
        /// Romanize japanese names, based on the name in KANJI 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchFirstLastNameIn">A list of personal japanese names in KANJI, firstName &#x3D; japaneseGivenName; lastName&#x3D;japaneseSurname (optional)</param>
        /// <returns>Task of BatchNameMatchCandidatesOut</returns>
        public async System.Threading.Tasks.Task<BatchNameMatchCandidatesOut> JapaneseNameLatinCandidatesBatchAsync (BatchFirstLastNameIn batchFirstLastNameIn = null)
        {
             ApiResponse<BatchNameMatchCandidatesOut> localVarResponse = await JapaneseNameLatinCandidatesBatchAsyncWithHttpInfo(batchFirstLastNameIn);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Romanize japanese names, based on the name in KANJI 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchFirstLastNameIn">A list of personal japanese names in KANJI, firstName &#x3D; japaneseGivenName; lastName&#x3D;japaneseSurname (optional)</param>
        /// <returns>Task of ApiResponse (BatchNameMatchCandidatesOut)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BatchNameMatchCandidatesOut>> JapaneseNameLatinCandidatesBatchAsyncWithHttpInfo (BatchFirstLastNameIn batchFirstLastNameIn = null)
        {

            var localVarPath = "/api2/json/japaneseNameLatinCandidatesBatch";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (batchFirstLastNameIn != null && batchFirstLastNameIn.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(batchFirstLastNameIn); // http body (model) parameter
            }
            else
            {
                localVarPostBody = batchFirstLastNameIn; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarHeaderParams["X-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-API-KEY");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("JapaneseNameLatinCandidatesBatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BatchNameMatchCandidatesOut>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BatchNameMatchCandidatesOut) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BatchNameMatchCandidatesOut)));
        }

        /// <summary>
        /// Return a score for matching Japanese name in KANJI ex. 山本 早苗 with a romanized name ex. Yamamoto Sanae 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="japaneseSurnameLatin"></param>
        /// <param name="japaneseGivenNameLatin"></param>
        /// <param name="japaneseName"></param>
        /// <returns>RomanizedNameOut</returns>
        public RomanizedNameOut JapaneseNameMatch (string japaneseSurnameLatin, string japaneseGivenNameLatin, string japaneseName)
        {
             ApiResponse<RomanizedNameOut> localVarResponse = JapaneseNameMatchWithHttpInfo(japaneseSurnameLatin, japaneseGivenNameLatin, japaneseName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Return a score for matching Japanese name in KANJI ex. 山本 早苗 with a romanized name ex. Yamamoto Sanae 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="japaneseSurnameLatin"></param>
        /// <param name="japaneseGivenNameLatin"></param>
        /// <param name="japaneseName"></param>
        /// <returns>ApiResponse of RomanizedNameOut</returns>
        public ApiResponse< RomanizedNameOut > JapaneseNameMatchWithHttpInfo (string japaneseSurnameLatin, string japaneseGivenNameLatin, string japaneseName)
        {
            // verify the required parameter 'japaneseSurnameLatin' is set
            if (japaneseSurnameLatin == null)
                throw new ApiException(400, "Missing required parameter 'japaneseSurnameLatin' when calling JapaneseApi->JapaneseNameMatch");
            // verify the required parameter 'japaneseGivenNameLatin' is set
            if (japaneseGivenNameLatin == null)
                throw new ApiException(400, "Missing required parameter 'japaneseGivenNameLatin' when calling JapaneseApi->JapaneseNameMatch");
            // verify the required parameter 'japaneseName' is set
            if (japaneseName == null)
                throw new ApiException(400, "Missing required parameter 'japaneseName' when calling JapaneseApi->JapaneseNameMatch");

            var localVarPath = "/api2/json/japaneseNameMatch/{japaneseSurnameLatin}/{japaneseGivenNameLatin}/{japaneseName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (japaneseSurnameLatin != null) localVarPathParams.Add("japaneseSurnameLatin", this.Configuration.ApiClient.ParameterToString(japaneseSurnameLatin)); // path parameter
            if (japaneseGivenNameLatin != null) localVarPathParams.Add("japaneseGivenNameLatin", this.Configuration.ApiClient.ParameterToString(japaneseGivenNameLatin)); // path parameter
            if (japaneseName != null) localVarPathParams.Add("japaneseName", this.Configuration.ApiClient.ParameterToString(japaneseName)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarHeaderParams["X-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-API-KEY");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("JapaneseNameMatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RomanizedNameOut>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RomanizedNameOut) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RomanizedNameOut)));
        }

        /// <summary>
        /// Return a score for matching Japanese name in KANJI ex. 山本 早苗 with a romanized name ex. Yamamoto Sanae 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="japaneseSurnameLatin"></param>
        /// <param name="japaneseGivenNameLatin"></param>
        /// <param name="japaneseName"></param>
        /// <returns>Task of RomanizedNameOut</returns>
        public async System.Threading.Tasks.Task<RomanizedNameOut> JapaneseNameMatchAsync (string japaneseSurnameLatin, string japaneseGivenNameLatin, string japaneseName)
        {
             ApiResponse<RomanizedNameOut> localVarResponse = await JapaneseNameMatchAsyncWithHttpInfo(japaneseSurnameLatin, japaneseGivenNameLatin, japaneseName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Return a score for matching Japanese name in KANJI ex. 山本 早苗 with a romanized name ex. Yamamoto Sanae 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="japaneseSurnameLatin"></param>
        /// <param name="japaneseGivenNameLatin"></param>
        /// <param name="japaneseName"></param>
        /// <returns>Task of ApiResponse (RomanizedNameOut)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RomanizedNameOut>> JapaneseNameMatchAsyncWithHttpInfo (string japaneseSurnameLatin, string japaneseGivenNameLatin, string japaneseName)
        {
            // verify the required parameter 'japaneseSurnameLatin' is set
            if (japaneseSurnameLatin == null)
                throw new ApiException(400, "Missing required parameter 'japaneseSurnameLatin' when calling JapaneseApi->JapaneseNameMatch");
            // verify the required parameter 'japaneseGivenNameLatin' is set
            if (japaneseGivenNameLatin == null)
                throw new ApiException(400, "Missing required parameter 'japaneseGivenNameLatin' when calling JapaneseApi->JapaneseNameMatch");
            // verify the required parameter 'japaneseName' is set
            if (japaneseName == null)
                throw new ApiException(400, "Missing required parameter 'japaneseName' when calling JapaneseApi->JapaneseNameMatch");

            var localVarPath = "/api2/json/japaneseNameMatch/{japaneseSurnameLatin}/{japaneseGivenNameLatin}/{japaneseName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (japaneseSurnameLatin != null) localVarPathParams.Add("japaneseSurnameLatin", this.Configuration.ApiClient.ParameterToString(japaneseSurnameLatin)); // path parameter
            if (japaneseGivenNameLatin != null) localVarPathParams.Add("japaneseGivenNameLatin", this.Configuration.ApiClient.ParameterToString(japaneseGivenNameLatin)); // path parameter
            if (japaneseName != null) localVarPathParams.Add("japaneseName", this.Configuration.ApiClient.ParameterToString(japaneseName)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarHeaderParams["X-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-API-KEY");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("JapaneseNameMatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RomanizedNameOut>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RomanizedNameOut) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RomanizedNameOut)));
        }

        /// <summary>
        /// Return a score for matching a list of Japanese names in KANJI ex. 山本 早苗 with romanized names ex. Yamamoto Sanae 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchFirstLastNameIn">A list of personal Japanese names in LATIN, firstName &#x3D; japaneseGivenName; lastName&#x3D;japaneseSurname (optional)</param>
        /// <returns>BatchNameMatchCandidatesOut</returns>
        public BatchNameMatchCandidatesOut JapaneseNameMatchBatch (BatchFirstLastNameIn batchFirstLastNameIn = null)
        {
             ApiResponse<BatchNameMatchCandidatesOut> localVarResponse = JapaneseNameMatchBatchWithHttpInfo(batchFirstLastNameIn);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Return a score for matching a list of Japanese names in KANJI ex. 山本 早苗 with romanized names ex. Yamamoto Sanae 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchFirstLastNameIn">A list of personal Japanese names in LATIN, firstName &#x3D; japaneseGivenName; lastName&#x3D;japaneseSurname (optional)</param>
        /// <returns>ApiResponse of BatchNameMatchCandidatesOut</returns>
        public ApiResponse< BatchNameMatchCandidatesOut > JapaneseNameMatchBatchWithHttpInfo (BatchFirstLastNameIn batchFirstLastNameIn = null)
        {

            var localVarPath = "/api2/json/japaneseNameMatchBatch";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (batchFirstLastNameIn != null && batchFirstLastNameIn.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(batchFirstLastNameIn); // http body (model) parameter
            }
            else
            {
                localVarPostBody = batchFirstLastNameIn; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarHeaderParams["X-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-API-KEY");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("JapaneseNameMatchBatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BatchNameMatchCandidatesOut>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BatchNameMatchCandidatesOut) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BatchNameMatchCandidatesOut)));
        }

        /// <summary>
        /// Return a score for matching a list of Japanese names in KANJI ex. 山本 早苗 with romanized names ex. Yamamoto Sanae 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchFirstLastNameIn">A list of personal Japanese names in LATIN, firstName &#x3D; japaneseGivenName; lastName&#x3D;japaneseSurname (optional)</param>
        /// <returns>Task of BatchNameMatchCandidatesOut</returns>
        public async System.Threading.Tasks.Task<BatchNameMatchCandidatesOut> JapaneseNameMatchBatchAsync (BatchFirstLastNameIn batchFirstLastNameIn = null)
        {
             ApiResponse<BatchNameMatchCandidatesOut> localVarResponse = await JapaneseNameMatchBatchAsyncWithHttpInfo(batchFirstLastNameIn);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Return a score for matching a list of Japanese names in KANJI ex. 山本 早苗 with romanized names ex. Yamamoto Sanae 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchFirstLastNameIn">A list of personal Japanese names in LATIN, firstName &#x3D; japaneseGivenName; lastName&#x3D;japaneseSurname (optional)</param>
        /// <returns>Task of ApiResponse (BatchNameMatchCandidatesOut)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BatchNameMatchCandidatesOut>> JapaneseNameMatchBatchAsyncWithHttpInfo (BatchFirstLastNameIn batchFirstLastNameIn = null)
        {

            var localVarPath = "/api2/json/japaneseNameMatchBatch";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (batchFirstLastNameIn != null && batchFirstLastNameIn.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(batchFirstLastNameIn); // http body (model) parameter
            }
            else
            {
                localVarPostBody = batchFirstLastNameIn; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarHeaderParams["X-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-API-KEY");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("JapaneseNameMatchBatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BatchNameMatchCandidatesOut>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BatchNameMatchCandidatesOut) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BatchNameMatchCandidatesOut)));
        }

        /// <summary>
        /// [CREDITS 1 UNIT] Feedback loop to better perform matching Japanese name in KANJI ex. 山本 早苗 with a romanized name ex. Yamamoto Sanae 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="japaneseSurnameLatin"></param>
        /// <param name="japaneseGivenNameLatin"></param>
        /// <param name="japaneseName"></param>
        /// <returns>RomanizedNameOut</returns>
        public RomanizedNameOut JapaneseNameMatchFeedbackLoop (string japaneseSurnameLatin, string japaneseGivenNameLatin, string japaneseName)
        {
             ApiResponse<RomanizedNameOut> localVarResponse = JapaneseNameMatchFeedbackLoopWithHttpInfo(japaneseSurnameLatin, japaneseGivenNameLatin, japaneseName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// [CREDITS 1 UNIT] Feedback loop to better perform matching Japanese name in KANJI ex. 山本 早苗 with a romanized name ex. Yamamoto Sanae 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="japaneseSurnameLatin"></param>
        /// <param name="japaneseGivenNameLatin"></param>
        /// <param name="japaneseName"></param>
        /// <returns>ApiResponse of RomanizedNameOut</returns>
        public ApiResponse< RomanizedNameOut > JapaneseNameMatchFeedbackLoopWithHttpInfo (string japaneseSurnameLatin, string japaneseGivenNameLatin, string japaneseName)
        {
            // verify the required parameter 'japaneseSurnameLatin' is set
            if (japaneseSurnameLatin == null)
                throw new ApiException(400, "Missing required parameter 'japaneseSurnameLatin' when calling JapaneseApi->JapaneseNameMatchFeedbackLoop");
            // verify the required parameter 'japaneseGivenNameLatin' is set
            if (japaneseGivenNameLatin == null)
                throw new ApiException(400, "Missing required parameter 'japaneseGivenNameLatin' when calling JapaneseApi->JapaneseNameMatchFeedbackLoop");
            // verify the required parameter 'japaneseName' is set
            if (japaneseName == null)
                throw new ApiException(400, "Missing required parameter 'japaneseName' when calling JapaneseApi->JapaneseNameMatchFeedbackLoop");

            var localVarPath = "/api2/json/japaneseNameMatchFeedbackLoop/{japaneseSurnameLatin}/{japaneseGivenNameLatin}/{japaneseName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (japaneseSurnameLatin != null) localVarPathParams.Add("japaneseSurnameLatin", this.Configuration.ApiClient.ParameterToString(japaneseSurnameLatin)); // path parameter
            if (japaneseGivenNameLatin != null) localVarPathParams.Add("japaneseGivenNameLatin", this.Configuration.ApiClient.ParameterToString(japaneseGivenNameLatin)); // path parameter
            if (japaneseName != null) localVarPathParams.Add("japaneseName", this.Configuration.ApiClient.ParameterToString(japaneseName)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarHeaderParams["X-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-API-KEY");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("JapaneseNameMatchFeedbackLoop", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RomanizedNameOut>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RomanizedNameOut) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RomanizedNameOut)));
        }

        /// <summary>
        /// [CREDITS 1 UNIT] Feedback loop to better perform matching Japanese name in KANJI ex. 山本 早苗 with a romanized name ex. Yamamoto Sanae 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="japaneseSurnameLatin"></param>
        /// <param name="japaneseGivenNameLatin"></param>
        /// <param name="japaneseName"></param>
        /// <returns>Task of RomanizedNameOut</returns>
        public async System.Threading.Tasks.Task<RomanizedNameOut> JapaneseNameMatchFeedbackLoopAsync (string japaneseSurnameLatin, string japaneseGivenNameLatin, string japaneseName)
        {
             ApiResponse<RomanizedNameOut> localVarResponse = await JapaneseNameMatchFeedbackLoopAsyncWithHttpInfo(japaneseSurnameLatin, japaneseGivenNameLatin, japaneseName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// [CREDITS 1 UNIT] Feedback loop to better perform matching Japanese name in KANJI ex. 山本 早苗 with a romanized name ex. Yamamoto Sanae 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="japaneseSurnameLatin"></param>
        /// <param name="japaneseGivenNameLatin"></param>
        /// <param name="japaneseName"></param>
        /// <returns>Task of ApiResponse (RomanizedNameOut)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RomanizedNameOut>> JapaneseNameMatchFeedbackLoopAsyncWithHttpInfo (string japaneseSurnameLatin, string japaneseGivenNameLatin, string japaneseName)
        {
            // verify the required parameter 'japaneseSurnameLatin' is set
            if (japaneseSurnameLatin == null)
                throw new ApiException(400, "Missing required parameter 'japaneseSurnameLatin' when calling JapaneseApi->JapaneseNameMatchFeedbackLoop");
            // verify the required parameter 'japaneseGivenNameLatin' is set
            if (japaneseGivenNameLatin == null)
                throw new ApiException(400, "Missing required parameter 'japaneseGivenNameLatin' when calling JapaneseApi->JapaneseNameMatchFeedbackLoop");
            // verify the required parameter 'japaneseName' is set
            if (japaneseName == null)
                throw new ApiException(400, "Missing required parameter 'japaneseName' when calling JapaneseApi->JapaneseNameMatchFeedbackLoop");

            var localVarPath = "/api2/json/japaneseNameMatchFeedbackLoop/{japaneseSurnameLatin}/{japaneseGivenNameLatin}/{japaneseName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (japaneseSurnameLatin != null) localVarPathParams.Add("japaneseSurnameLatin", this.Configuration.ApiClient.ParameterToString(japaneseSurnameLatin)); // path parameter
            if (japaneseGivenNameLatin != null) localVarPathParams.Add("japaneseGivenNameLatin", this.Configuration.ApiClient.ParameterToString(japaneseGivenNameLatin)); // path parameter
            if (japaneseName != null) localVarPathParams.Add("japaneseName", this.Configuration.ApiClient.ParameterToString(japaneseName)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarHeaderParams["X-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-API-KEY");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("JapaneseNameMatchFeedbackLoop", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RomanizedNameOut>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RomanizedNameOut) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RomanizedNameOut)));
        }

        /// <summary>
        /// Infer the likely first/last name structure of a name, ex. 山本 早苗 or Yamamoto Sanae 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="japaneseName"></param>
        /// <returns>PersonalNameParsedOut</returns>
        public PersonalNameParsedOut ParseJapaneseName (string japaneseName)
        {
             ApiResponse<PersonalNameParsedOut> localVarResponse = ParseJapaneseNameWithHttpInfo(japaneseName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Infer the likely first/last name structure of a name, ex. 山本 早苗 or Yamamoto Sanae 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="japaneseName"></param>
        /// <returns>ApiResponse of PersonalNameParsedOut</returns>
        public ApiResponse< PersonalNameParsedOut > ParseJapaneseNameWithHttpInfo (string japaneseName)
        {
            // verify the required parameter 'japaneseName' is set
            if (japaneseName == null)
                throw new ApiException(400, "Missing required parameter 'japaneseName' when calling JapaneseApi->ParseJapaneseName");

            var localVarPath = "/api2/json/parseJapaneseName/{japaneseName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (japaneseName != null) localVarPathParams.Add("japaneseName", this.Configuration.ApiClient.ParameterToString(japaneseName)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarHeaderParams["X-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-API-KEY");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ParseJapaneseName", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PersonalNameParsedOut>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PersonalNameParsedOut) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PersonalNameParsedOut)));
        }

        /// <summary>
        /// Infer the likely first/last name structure of a name, ex. 山本 早苗 or Yamamoto Sanae 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="japaneseName"></param>
        /// <returns>Task of PersonalNameParsedOut</returns>
        public async System.Threading.Tasks.Task<PersonalNameParsedOut> ParseJapaneseNameAsync (string japaneseName)
        {
             ApiResponse<PersonalNameParsedOut> localVarResponse = await ParseJapaneseNameAsyncWithHttpInfo(japaneseName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Infer the likely first/last name structure of a name, ex. 山本 早苗 or Yamamoto Sanae 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="japaneseName"></param>
        /// <returns>Task of ApiResponse (PersonalNameParsedOut)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PersonalNameParsedOut>> ParseJapaneseNameAsyncWithHttpInfo (string japaneseName)
        {
            // verify the required parameter 'japaneseName' is set
            if (japaneseName == null)
                throw new ApiException(400, "Missing required parameter 'japaneseName' when calling JapaneseApi->ParseJapaneseName");

            var localVarPath = "/api2/json/parseJapaneseName/{japaneseName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (japaneseName != null) localVarPathParams.Add("japaneseName", this.Configuration.ApiClient.ParameterToString(japaneseName)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarHeaderParams["X-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-API-KEY");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ParseJapaneseName", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PersonalNameParsedOut>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PersonalNameParsedOut) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PersonalNameParsedOut)));
        }

        /// <summary>
        /// Infer the likely first/last name structure of a name, ex. 山本 早苗 or Yamamoto Sanae  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchPersonalNameIn">A list of personal names (optional)</param>
        /// <returns>BatchPersonalNameParsedOut</returns>
        public BatchPersonalNameParsedOut ParseJapaneseNameBatch (BatchPersonalNameIn batchPersonalNameIn = null)
        {
             ApiResponse<BatchPersonalNameParsedOut> localVarResponse = ParseJapaneseNameBatchWithHttpInfo(batchPersonalNameIn);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Infer the likely first/last name structure of a name, ex. 山本 早苗 or Yamamoto Sanae  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchPersonalNameIn">A list of personal names (optional)</param>
        /// <returns>ApiResponse of BatchPersonalNameParsedOut</returns>
        public ApiResponse< BatchPersonalNameParsedOut > ParseJapaneseNameBatchWithHttpInfo (BatchPersonalNameIn batchPersonalNameIn = null)
        {

            var localVarPath = "/api2/json/parseJapaneseNameBatch";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (batchPersonalNameIn != null && batchPersonalNameIn.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(batchPersonalNameIn); // http body (model) parameter
            }
            else
            {
                localVarPostBody = batchPersonalNameIn; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarHeaderParams["X-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-API-KEY");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ParseJapaneseNameBatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BatchPersonalNameParsedOut>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BatchPersonalNameParsedOut) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BatchPersonalNameParsedOut)));
        }

        /// <summary>
        /// Infer the likely first/last name structure of a name, ex. 山本 早苗 or Yamamoto Sanae  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchPersonalNameIn">A list of personal names (optional)</param>
        /// <returns>Task of BatchPersonalNameParsedOut</returns>
        public async System.Threading.Tasks.Task<BatchPersonalNameParsedOut> ParseJapaneseNameBatchAsync (BatchPersonalNameIn batchPersonalNameIn = null)
        {
             ApiResponse<BatchPersonalNameParsedOut> localVarResponse = await ParseJapaneseNameBatchAsyncWithHttpInfo(batchPersonalNameIn);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Infer the likely first/last name structure of a name, ex. 山本 早苗 or Yamamoto Sanae  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchPersonalNameIn">A list of personal names (optional)</param>
        /// <returns>Task of ApiResponse (BatchPersonalNameParsedOut)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BatchPersonalNameParsedOut>> ParseJapaneseNameBatchAsyncWithHttpInfo (BatchPersonalNameIn batchPersonalNameIn = null)
        {

            var localVarPath = "/api2/json/parseJapaneseNameBatch";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (batchPersonalNameIn != null && batchPersonalNameIn.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(batchPersonalNameIn); // http body (model) parameter
            }
            else
            {
                localVarPostBody = batchPersonalNameIn; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarHeaderParams["X-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-API-KEY");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ParseJapaneseNameBatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BatchPersonalNameParsedOut>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BatchPersonalNameParsedOut) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BatchPersonalNameParsedOut)));
        }

    }
}
