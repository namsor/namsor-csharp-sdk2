/* 
 * NamSor API v2
 *
 * NamSor API v2 : enpoints to process personal names (gender, cultural origin or ethnicity) in all alphabets or languages. Use GET methods for small tests, but prefer POST methods for higher throughput (batch processing of up to 100 names at a time). Need something you can't find here? We have many more features coming soon. Let us know, we'll do our best to add it! 
 *
 * OpenAPI spec version: 2.0.6
 * Contact: contact@namsor.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.com.namsor.sdk2.model;

namespace Org.OpenAPITools.com.namsor.sdk2.api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISocialApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// [USES 11 UNITS] Infer the likely country and phone prefix, given a personal name and formatted / unformatted phone number.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firstName"></param>
        /// <param name="lastName"></param>
        /// <param name="phoneNumber"></param>
        /// <returns>FirstLastNamePhoneCodedOut</returns>
        FirstLastNamePhoneCodedOut PhoneCode (string firstName, string lastName, string phoneNumber);

        /// <summary>
        /// [USES 11 UNITS] Infer the likely country and phone prefix, given a personal name and formatted / unformatted phone number.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firstName"></param>
        /// <param name="lastName"></param>
        /// <param name="phoneNumber"></param>
        /// <returns>ApiResponse of FirstLastNamePhoneCodedOut</returns>
        ApiResponse<FirstLastNamePhoneCodedOut> PhoneCodeWithHttpInfo (string firstName, string lastName, string phoneNumber);
        /// <summary>
        /// [USES 11 UNITS] Infer the likely country and phone prefix, of up to 100 personal names, detecting automatically the local context given a name and formatted / unformatted phone number.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchFirstLastNamePhoneNumberIn">A list of personal names (optional)</param>
        /// <returns>BatchFirstLastNamePhoneCodedOut</returns>
        BatchFirstLastNamePhoneCodedOut PhoneCodeBatch (BatchFirstLastNamePhoneNumberIn batchFirstLastNamePhoneNumberIn = null);

        /// <summary>
        /// [USES 11 UNITS] Infer the likely country and phone prefix, of up to 100 personal names, detecting automatically the local context given a name and formatted / unformatted phone number.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchFirstLastNamePhoneNumberIn">A list of personal names (optional)</param>
        /// <returns>ApiResponse of BatchFirstLastNamePhoneCodedOut</returns>
        ApiResponse<BatchFirstLastNamePhoneCodedOut> PhoneCodeBatchWithHttpInfo (BatchFirstLastNamePhoneNumberIn batchFirstLastNamePhoneNumberIn = null);
        /// <summary>
        /// [USES 11 UNITS] Infer the likely phone prefix, given a personal name and formatted / unformatted phone number, with a local context (ISO2 country of residence).
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firstName"></param>
        /// <param name="lastName"></param>
        /// <param name="phoneNumber"></param>
        /// <param name="countryIso2"></param>
        /// <returns>FirstLastNamePhoneCodedOut</returns>
        FirstLastNamePhoneCodedOut PhoneCodeGeo (string firstName, string lastName, string phoneNumber, string countryIso2);

        /// <summary>
        /// [USES 11 UNITS] Infer the likely phone prefix, given a personal name and formatted / unformatted phone number, with a local context (ISO2 country of residence).
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firstName"></param>
        /// <param name="lastName"></param>
        /// <param name="phoneNumber"></param>
        /// <param name="countryIso2"></param>
        /// <returns>ApiResponse of FirstLastNamePhoneCodedOut</returns>
        ApiResponse<FirstLastNamePhoneCodedOut> PhoneCodeGeoWithHttpInfo (string firstName, string lastName, string phoneNumber, string countryIso2);
        /// <summary>
        /// [USES 11 UNITS] Infer the likely country and phone prefix, of up to 100 personal names, with a local context (ISO2 country of residence).
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchFirstLastNamePhoneNumberGeoIn">A list of personal names (optional)</param>
        /// <returns>BatchFirstLastNamePhoneCodedOut</returns>
        BatchFirstLastNamePhoneCodedOut PhoneCodeGeoBatch (BatchFirstLastNamePhoneNumberGeoIn batchFirstLastNamePhoneNumberGeoIn = null);

        /// <summary>
        /// [USES 11 UNITS] Infer the likely country and phone prefix, of up to 100 personal names, with a local context (ISO2 country of residence).
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchFirstLastNamePhoneNumberGeoIn">A list of personal names (optional)</param>
        /// <returns>ApiResponse of BatchFirstLastNamePhoneCodedOut</returns>
        ApiResponse<BatchFirstLastNamePhoneCodedOut> PhoneCodeGeoBatchWithHttpInfo (BatchFirstLastNamePhoneNumberGeoIn batchFirstLastNamePhoneNumberGeoIn = null);
        /// <summary>
        /// [CREDITS 1 UNIT] Feedback loop to better infer the likely phone prefix, given a personal name and formatted / unformatted phone number, with a local context (ISO2 country of residence).
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firstName"></param>
        /// <param name="lastName"></param>
        /// <param name="phoneNumber"></param>
        /// <param name="phoneNumberE164"></param>
        /// <param name="countryIso2"></param>
        /// <returns>FirstLastNamePhoneCodedOut</returns>
        FirstLastNamePhoneCodedOut PhoneCodeGeoFeedbackLoop (string firstName, string lastName, string phoneNumber, string phoneNumberE164, string countryIso2);

        /// <summary>
        /// [CREDITS 1 UNIT] Feedback loop to better infer the likely phone prefix, given a personal name and formatted / unformatted phone number, with a local context (ISO2 country of residence).
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firstName"></param>
        /// <param name="lastName"></param>
        /// <param name="phoneNumber"></param>
        /// <param name="phoneNumberE164"></param>
        /// <param name="countryIso2"></param>
        /// <returns>ApiResponse of FirstLastNamePhoneCodedOut</returns>
        ApiResponse<FirstLastNamePhoneCodedOut> PhoneCodeGeoFeedbackLoopWithHttpInfo (string firstName, string lastName, string phoneNumber, string phoneNumberE164, string countryIso2);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// [USES 11 UNITS] Infer the likely country and phone prefix, given a personal name and formatted / unformatted phone number.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firstName"></param>
        /// <param name="lastName"></param>
        /// <param name="phoneNumber"></param>
        /// <returns>Task of FirstLastNamePhoneCodedOut</returns>
        System.Threading.Tasks.Task<FirstLastNamePhoneCodedOut> PhoneCodeAsync (string firstName, string lastName, string phoneNumber);

        /// <summary>
        /// [USES 11 UNITS] Infer the likely country and phone prefix, given a personal name and formatted / unformatted phone number.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firstName"></param>
        /// <param name="lastName"></param>
        /// <param name="phoneNumber"></param>
        /// <returns>Task of ApiResponse (FirstLastNamePhoneCodedOut)</returns>
        System.Threading.Tasks.Task<ApiResponse<FirstLastNamePhoneCodedOut>> PhoneCodeAsyncWithHttpInfo (string firstName, string lastName, string phoneNumber);
        /// <summary>
        /// [USES 11 UNITS] Infer the likely country and phone prefix, of up to 100 personal names, detecting automatically the local context given a name and formatted / unformatted phone number.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchFirstLastNamePhoneNumberIn">A list of personal names (optional)</param>
        /// <returns>Task of BatchFirstLastNamePhoneCodedOut</returns>
        System.Threading.Tasks.Task<BatchFirstLastNamePhoneCodedOut> PhoneCodeBatchAsync (BatchFirstLastNamePhoneNumberIn batchFirstLastNamePhoneNumberIn = null);

        /// <summary>
        /// [USES 11 UNITS] Infer the likely country and phone prefix, of up to 100 personal names, detecting automatically the local context given a name and formatted / unformatted phone number.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchFirstLastNamePhoneNumberIn">A list of personal names (optional)</param>
        /// <returns>Task of ApiResponse (BatchFirstLastNamePhoneCodedOut)</returns>
        System.Threading.Tasks.Task<ApiResponse<BatchFirstLastNamePhoneCodedOut>> PhoneCodeBatchAsyncWithHttpInfo (BatchFirstLastNamePhoneNumberIn batchFirstLastNamePhoneNumberIn = null);
        /// <summary>
        /// [USES 11 UNITS] Infer the likely phone prefix, given a personal name and formatted / unformatted phone number, with a local context (ISO2 country of residence).
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firstName"></param>
        /// <param name="lastName"></param>
        /// <param name="phoneNumber"></param>
        /// <param name="countryIso2"></param>
        /// <returns>Task of FirstLastNamePhoneCodedOut</returns>
        System.Threading.Tasks.Task<FirstLastNamePhoneCodedOut> PhoneCodeGeoAsync (string firstName, string lastName, string phoneNumber, string countryIso2);

        /// <summary>
        /// [USES 11 UNITS] Infer the likely phone prefix, given a personal name and formatted / unformatted phone number, with a local context (ISO2 country of residence).
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firstName"></param>
        /// <param name="lastName"></param>
        /// <param name="phoneNumber"></param>
        /// <param name="countryIso2"></param>
        /// <returns>Task of ApiResponse (FirstLastNamePhoneCodedOut)</returns>
        System.Threading.Tasks.Task<ApiResponse<FirstLastNamePhoneCodedOut>> PhoneCodeGeoAsyncWithHttpInfo (string firstName, string lastName, string phoneNumber, string countryIso2);
        /// <summary>
        /// [USES 11 UNITS] Infer the likely country and phone prefix, of up to 100 personal names, with a local context (ISO2 country of residence).
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchFirstLastNamePhoneNumberGeoIn">A list of personal names (optional)</param>
        /// <returns>Task of BatchFirstLastNamePhoneCodedOut</returns>
        System.Threading.Tasks.Task<BatchFirstLastNamePhoneCodedOut> PhoneCodeGeoBatchAsync (BatchFirstLastNamePhoneNumberGeoIn batchFirstLastNamePhoneNumberGeoIn = null);

        /// <summary>
        /// [USES 11 UNITS] Infer the likely country and phone prefix, of up to 100 personal names, with a local context (ISO2 country of residence).
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchFirstLastNamePhoneNumberGeoIn">A list of personal names (optional)</param>
        /// <returns>Task of ApiResponse (BatchFirstLastNamePhoneCodedOut)</returns>
        System.Threading.Tasks.Task<ApiResponse<BatchFirstLastNamePhoneCodedOut>> PhoneCodeGeoBatchAsyncWithHttpInfo (BatchFirstLastNamePhoneNumberGeoIn batchFirstLastNamePhoneNumberGeoIn = null);
        /// <summary>
        /// [CREDITS 1 UNIT] Feedback loop to better infer the likely phone prefix, given a personal name and formatted / unformatted phone number, with a local context (ISO2 country of residence).
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firstName"></param>
        /// <param name="lastName"></param>
        /// <param name="phoneNumber"></param>
        /// <param name="phoneNumberE164"></param>
        /// <param name="countryIso2"></param>
        /// <returns>Task of FirstLastNamePhoneCodedOut</returns>
        System.Threading.Tasks.Task<FirstLastNamePhoneCodedOut> PhoneCodeGeoFeedbackLoopAsync (string firstName, string lastName, string phoneNumber, string phoneNumberE164, string countryIso2);

        /// <summary>
        /// [CREDITS 1 UNIT] Feedback loop to better infer the likely phone prefix, given a personal name and formatted / unformatted phone number, with a local context (ISO2 country of residence).
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firstName"></param>
        /// <param name="lastName"></param>
        /// <param name="phoneNumber"></param>
        /// <param name="phoneNumberE164"></param>
        /// <param name="countryIso2"></param>
        /// <returns>Task of ApiResponse (FirstLastNamePhoneCodedOut)</returns>
        System.Threading.Tasks.Task<ApiResponse<FirstLastNamePhoneCodedOut>> PhoneCodeGeoFeedbackLoopAsyncWithHttpInfo (string firstName, string lastName, string phoneNumber, string phoneNumberE164, string countryIso2);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class SocialApi : ISocialApi
    {
        private Org.OpenAPITools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="SocialApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SocialApi(String basePath)
        {
            this.Configuration = new Org.OpenAPITools.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SocialApi"/> class
        /// </summary>
        /// <returns></returns>
        public SocialApi()
        {
            this.Configuration = Org.OpenAPITools.Client.Configuration.Default;

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SocialApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public SocialApi(Org.OpenAPITools.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Org.OpenAPITools.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.OpenAPITools.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.OpenAPITools.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// [USES 11 UNITS] Infer the likely country and phone prefix, given a personal name and formatted / unformatted phone number. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firstName"></param>
        /// <param name="lastName"></param>
        /// <param name="phoneNumber"></param>
        /// <returns>FirstLastNamePhoneCodedOut</returns>
        public FirstLastNamePhoneCodedOut PhoneCode (string firstName, string lastName, string phoneNumber)
        {
             ApiResponse<FirstLastNamePhoneCodedOut> localVarResponse = PhoneCodeWithHttpInfo(firstName, lastName, phoneNumber);
             return localVarResponse.Data;
        }

        /// <summary>
        /// [USES 11 UNITS] Infer the likely country and phone prefix, given a personal name and formatted / unformatted phone number. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firstName"></param>
        /// <param name="lastName"></param>
        /// <param name="phoneNumber"></param>
        /// <returns>ApiResponse of FirstLastNamePhoneCodedOut</returns>
        public ApiResponse< FirstLastNamePhoneCodedOut > PhoneCodeWithHttpInfo (string firstName, string lastName, string phoneNumber)
        {
            // verify the required parameter 'firstName' is set
            if (firstName == null)
                throw new ApiException(400, "Missing required parameter 'firstName' when calling SocialApi->PhoneCode");
            // verify the required parameter 'lastName' is set
            if (lastName == null)
                throw new ApiException(400, "Missing required parameter 'lastName' when calling SocialApi->PhoneCode");
            // verify the required parameter 'phoneNumber' is set
            if (phoneNumber == null)
                throw new ApiException(400, "Missing required parameter 'phoneNumber' when calling SocialApi->PhoneCode");

            var localVarPath = "/api2/json/phoneCode/{firstName}/{lastName}/{phoneNumber}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (firstName != null) localVarPathParams.Add("firstName", this.Configuration.ApiClient.ParameterToString(firstName)); // path parameter
            if (lastName != null) localVarPathParams.Add("lastName", this.Configuration.ApiClient.ParameterToString(lastName)); // path parameter
            if (phoneNumber != null) localVarPathParams.Add("phoneNumber", this.Configuration.ApiClient.ParameterToString(phoneNumber)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarHeaderParams["X-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-API-KEY");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PhoneCode", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FirstLastNamePhoneCodedOut>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FirstLastNamePhoneCodedOut) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FirstLastNamePhoneCodedOut)));
        }

        /// <summary>
        /// [USES 11 UNITS] Infer the likely country and phone prefix, given a personal name and formatted / unformatted phone number. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firstName"></param>
        /// <param name="lastName"></param>
        /// <param name="phoneNumber"></param>
        /// <returns>Task of FirstLastNamePhoneCodedOut</returns>
        public async System.Threading.Tasks.Task<FirstLastNamePhoneCodedOut> PhoneCodeAsync (string firstName, string lastName, string phoneNumber)
        {
             ApiResponse<FirstLastNamePhoneCodedOut> localVarResponse = await PhoneCodeAsyncWithHttpInfo(firstName, lastName, phoneNumber);
             return localVarResponse.Data;

        }

        /// <summary>
        /// [USES 11 UNITS] Infer the likely country and phone prefix, given a personal name and formatted / unformatted phone number. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firstName"></param>
        /// <param name="lastName"></param>
        /// <param name="phoneNumber"></param>
        /// <returns>Task of ApiResponse (FirstLastNamePhoneCodedOut)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FirstLastNamePhoneCodedOut>> PhoneCodeAsyncWithHttpInfo (string firstName, string lastName, string phoneNumber)
        {
            // verify the required parameter 'firstName' is set
            if (firstName == null)
                throw new ApiException(400, "Missing required parameter 'firstName' when calling SocialApi->PhoneCode");
            // verify the required parameter 'lastName' is set
            if (lastName == null)
                throw new ApiException(400, "Missing required parameter 'lastName' when calling SocialApi->PhoneCode");
            // verify the required parameter 'phoneNumber' is set
            if (phoneNumber == null)
                throw new ApiException(400, "Missing required parameter 'phoneNumber' when calling SocialApi->PhoneCode");

            var localVarPath = "/api2/json/phoneCode/{firstName}/{lastName}/{phoneNumber}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (firstName != null) localVarPathParams.Add("firstName", this.Configuration.ApiClient.ParameterToString(firstName)); // path parameter
            if (lastName != null) localVarPathParams.Add("lastName", this.Configuration.ApiClient.ParameterToString(lastName)); // path parameter
            if (phoneNumber != null) localVarPathParams.Add("phoneNumber", this.Configuration.ApiClient.ParameterToString(phoneNumber)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarHeaderParams["X-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-API-KEY");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PhoneCode", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FirstLastNamePhoneCodedOut>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FirstLastNamePhoneCodedOut) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FirstLastNamePhoneCodedOut)));
        }

        /// <summary>
        /// [USES 11 UNITS] Infer the likely country and phone prefix, of up to 100 personal names, detecting automatically the local context given a name and formatted / unformatted phone number. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchFirstLastNamePhoneNumberIn">A list of personal names (optional)</param>
        /// <returns>BatchFirstLastNamePhoneCodedOut</returns>
        public BatchFirstLastNamePhoneCodedOut PhoneCodeBatch (BatchFirstLastNamePhoneNumberIn batchFirstLastNamePhoneNumberIn = null)
        {
             ApiResponse<BatchFirstLastNamePhoneCodedOut> localVarResponse = PhoneCodeBatchWithHttpInfo(batchFirstLastNamePhoneNumberIn);
             return localVarResponse.Data;
        }

        /// <summary>
        /// [USES 11 UNITS] Infer the likely country and phone prefix, of up to 100 personal names, detecting automatically the local context given a name and formatted / unformatted phone number. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchFirstLastNamePhoneNumberIn">A list of personal names (optional)</param>
        /// <returns>ApiResponse of BatchFirstLastNamePhoneCodedOut</returns>
        public ApiResponse< BatchFirstLastNamePhoneCodedOut > PhoneCodeBatchWithHttpInfo (BatchFirstLastNamePhoneNumberIn batchFirstLastNamePhoneNumberIn = null)
        {

            var localVarPath = "/api2/json/phoneCodeBatch";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (batchFirstLastNamePhoneNumberIn != null && batchFirstLastNamePhoneNumberIn.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(batchFirstLastNamePhoneNumberIn); // http body (model) parameter
            }
            else
            {
                localVarPostBody = batchFirstLastNamePhoneNumberIn; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarHeaderParams["X-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-API-KEY");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PhoneCodeBatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BatchFirstLastNamePhoneCodedOut>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BatchFirstLastNamePhoneCodedOut) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BatchFirstLastNamePhoneCodedOut)));
        }

        /// <summary>
        /// [USES 11 UNITS] Infer the likely country and phone prefix, of up to 100 personal names, detecting automatically the local context given a name and formatted / unformatted phone number. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchFirstLastNamePhoneNumberIn">A list of personal names (optional)</param>
        /// <returns>Task of BatchFirstLastNamePhoneCodedOut</returns>
        public async System.Threading.Tasks.Task<BatchFirstLastNamePhoneCodedOut> PhoneCodeBatchAsync (BatchFirstLastNamePhoneNumberIn batchFirstLastNamePhoneNumberIn = null)
        {
             ApiResponse<BatchFirstLastNamePhoneCodedOut> localVarResponse = await PhoneCodeBatchAsyncWithHttpInfo(batchFirstLastNamePhoneNumberIn);
             return localVarResponse.Data;

        }

        /// <summary>
        /// [USES 11 UNITS] Infer the likely country and phone prefix, of up to 100 personal names, detecting automatically the local context given a name and formatted / unformatted phone number. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchFirstLastNamePhoneNumberIn">A list of personal names (optional)</param>
        /// <returns>Task of ApiResponse (BatchFirstLastNamePhoneCodedOut)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BatchFirstLastNamePhoneCodedOut>> PhoneCodeBatchAsyncWithHttpInfo (BatchFirstLastNamePhoneNumberIn batchFirstLastNamePhoneNumberIn = null)
        {

            var localVarPath = "/api2/json/phoneCodeBatch";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (batchFirstLastNamePhoneNumberIn != null && batchFirstLastNamePhoneNumberIn.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(batchFirstLastNamePhoneNumberIn); // http body (model) parameter
            }
            else
            {
                localVarPostBody = batchFirstLastNamePhoneNumberIn; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarHeaderParams["X-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-API-KEY");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PhoneCodeBatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BatchFirstLastNamePhoneCodedOut>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BatchFirstLastNamePhoneCodedOut) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BatchFirstLastNamePhoneCodedOut)));
        }

        /// <summary>
        /// [USES 11 UNITS] Infer the likely phone prefix, given a personal name and formatted / unformatted phone number, with a local context (ISO2 country of residence). 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firstName"></param>
        /// <param name="lastName"></param>
        /// <param name="phoneNumber"></param>
        /// <param name="countryIso2"></param>
        /// <returns>FirstLastNamePhoneCodedOut</returns>
        public FirstLastNamePhoneCodedOut PhoneCodeGeo (string firstName, string lastName, string phoneNumber, string countryIso2)
        {
             ApiResponse<FirstLastNamePhoneCodedOut> localVarResponse = PhoneCodeGeoWithHttpInfo(firstName, lastName, phoneNumber, countryIso2);
             return localVarResponse.Data;
        }

        /// <summary>
        /// [USES 11 UNITS] Infer the likely phone prefix, given a personal name and formatted / unformatted phone number, with a local context (ISO2 country of residence). 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firstName"></param>
        /// <param name="lastName"></param>
        /// <param name="phoneNumber"></param>
        /// <param name="countryIso2"></param>
        /// <returns>ApiResponse of FirstLastNamePhoneCodedOut</returns>
        public ApiResponse< FirstLastNamePhoneCodedOut > PhoneCodeGeoWithHttpInfo (string firstName, string lastName, string phoneNumber, string countryIso2)
        {
            // verify the required parameter 'firstName' is set
            if (firstName == null)
                throw new ApiException(400, "Missing required parameter 'firstName' when calling SocialApi->PhoneCodeGeo");
            // verify the required parameter 'lastName' is set
            if (lastName == null)
                throw new ApiException(400, "Missing required parameter 'lastName' when calling SocialApi->PhoneCodeGeo");
            // verify the required parameter 'phoneNumber' is set
            if (phoneNumber == null)
                throw new ApiException(400, "Missing required parameter 'phoneNumber' when calling SocialApi->PhoneCodeGeo");
            // verify the required parameter 'countryIso2' is set
            if (countryIso2 == null)
                throw new ApiException(400, "Missing required parameter 'countryIso2' when calling SocialApi->PhoneCodeGeo");

            var localVarPath = "/api2/json/phoneCodeGeo/{firstName}/{lastName}/{phoneNumber}/{countryIso2}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (firstName != null) localVarPathParams.Add("firstName", this.Configuration.ApiClient.ParameterToString(firstName)); // path parameter
            if (lastName != null) localVarPathParams.Add("lastName", this.Configuration.ApiClient.ParameterToString(lastName)); // path parameter
            if (phoneNumber != null) localVarPathParams.Add("phoneNumber", this.Configuration.ApiClient.ParameterToString(phoneNumber)); // path parameter
            if (countryIso2 != null) localVarPathParams.Add("countryIso2", this.Configuration.ApiClient.ParameterToString(countryIso2)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarHeaderParams["X-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-API-KEY");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PhoneCodeGeo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FirstLastNamePhoneCodedOut>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FirstLastNamePhoneCodedOut) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FirstLastNamePhoneCodedOut)));
        }

        /// <summary>
        /// [USES 11 UNITS] Infer the likely phone prefix, given a personal name and formatted / unformatted phone number, with a local context (ISO2 country of residence). 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firstName"></param>
        /// <param name="lastName"></param>
        /// <param name="phoneNumber"></param>
        /// <param name="countryIso2"></param>
        /// <returns>Task of FirstLastNamePhoneCodedOut</returns>
        public async System.Threading.Tasks.Task<FirstLastNamePhoneCodedOut> PhoneCodeGeoAsync (string firstName, string lastName, string phoneNumber, string countryIso2)
        {
             ApiResponse<FirstLastNamePhoneCodedOut> localVarResponse = await PhoneCodeGeoAsyncWithHttpInfo(firstName, lastName, phoneNumber, countryIso2);
             return localVarResponse.Data;

        }

        /// <summary>
        /// [USES 11 UNITS] Infer the likely phone prefix, given a personal name and formatted / unformatted phone number, with a local context (ISO2 country of residence). 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firstName"></param>
        /// <param name="lastName"></param>
        /// <param name="phoneNumber"></param>
        /// <param name="countryIso2"></param>
        /// <returns>Task of ApiResponse (FirstLastNamePhoneCodedOut)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FirstLastNamePhoneCodedOut>> PhoneCodeGeoAsyncWithHttpInfo (string firstName, string lastName, string phoneNumber, string countryIso2)
        {
            // verify the required parameter 'firstName' is set
            if (firstName == null)
                throw new ApiException(400, "Missing required parameter 'firstName' when calling SocialApi->PhoneCodeGeo");
            // verify the required parameter 'lastName' is set
            if (lastName == null)
                throw new ApiException(400, "Missing required parameter 'lastName' when calling SocialApi->PhoneCodeGeo");
            // verify the required parameter 'phoneNumber' is set
            if (phoneNumber == null)
                throw new ApiException(400, "Missing required parameter 'phoneNumber' when calling SocialApi->PhoneCodeGeo");
            // verify the required parameter 'countryIso2' is set
            if (countryIso2 == null)
                throw new ApiException(400, "Missing required parameter 'countryIso2' when calling SocialApi->PhoneCodeGeo");

            var localVarPath = "/api2/json/phoneCodeGeo/{firstName}/{lastName}/{phoneNumber}/{countryIso2}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (firstName != null) localVarPathParams.Add("firstName", this.Configuration.ApiClient.ParameterToString(firstName)); // path parameter
            if (lastName != null) localVarPathParams.Add("lastName", this.Configuration.ApiClient.ParameterToString(lastName)); // path parameter
            if (phoneNumber != null) localVarPathParams.Add("phoneNumber", this.Configuration.ApiClient.ParameterToString(phoneNumber)); // path parameter
            if (countryIso2 != null) localVarPathParams.Add("countryIso2", this.Configuration.ApiClient.ParameterToString(countryIso2)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarHeaderParams["X-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-API-KEY");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PhoneCodeGeo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FirstLastNamePhoneCodedOut>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FirstLastNamePhoneCodedOut) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FirstLastNamePhoneCodedOut)));
        }

        /// <summary>
        /// [USES 11 UNITS] Infer the likely country and phone prefix, of up to 100 personal names, with a local context (ISO2 country of residence). 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchFirstLastNamePhoneNumberGeoIn">A list of personal names (optional)</param>
        /// <returns>BatchFirstLastNamePhoneCodedOut</returns>
        public BatchFirstLastNamePhoneCodedOut PhoneCodeGeoBatch (BatchFirstLastNamePhoneNumberGeoIn batchFirstLastNamePhoneNumberGeoIn = null)
        {
             ApiResponse<BatchFirstLastNamePhoneCodedOut> localVarResponse = PhoneCodeGeoBatchWithHttpInfo(batchFirstLastNamePhoneNumberGeoIn);
             return localVarResponse.Data;
        }

        /// <summary>
        /// [USES 11 UNITS] Infer the likely country and phone prefix, of up to 100 personal names, with a local context (ISO2 country of residence). 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchFirstLastNamePhoneNumberGeoIn">A list of personal names (optional)</param>
        /// <returns>ApiResponse of BatchFirstLastNamePhoneCodedOut</returns>
        public ApiResponse< BatchFirstLastNamePhoneCodedOut > PhoneCodeGeoBatchWithHttpInfo (BatchFirstLastNamePhoneNumberGeoIn batchFirstLastNamePhoneNumberGeoIn = null)
        {

            var localVarPath = "/api2/json/phoneCodeGeoBatch";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (batchFirstLastNamePhoneNumberGeoIn != null && batchFirstLastNamePhoneNumberGeoIn.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(batchFirstLastNamePhoneNumberGeoIn); // http body (model) parameter
            }
            else
            {
                localVarPostBody = batchFirstLastNamePhoneNumberGeoIn; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarHeaderParams["X-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-API-KEY");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PhoneCodeGeoBatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BatchFirstLastNamePhoneCodedOut>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BatchFirstLastNamePhoneCodedOut) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BatchFirstLastNamePhoneCodedOut)));
        }

        /// <summary>
        /// [USES 11 UNITS] Infer the likely country and phone prefix, of up to 100 personal names, with a local context (ISO2 country of residence). 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchFirstLastNamePhoneNumberGeoIn">A list of personal names (optional)</param>
        /// <returns>Task of BatchFirstLastNamePhoneCodedOut</returns>
        public async System.Threading.Tasks.Task<BatchFirstLastNamePhoneCodedOut> PhoneCodeGeoBatchAsync (BatchFirstLastNamePhoneNumberGeoIn batchFirstLastNamePhoneNumberGeoIn = null)
        {
             ApiResponse<BatchFirstLastNamePhoneCodedOut> localVarResponse = await PhoneCodeGeoBatchAsyncWithHttpInfo(batchFirstLastNamePhoneNumberGeoIn);
             return localVarResponse.Data;

        }

        /// <summary>
        /// [USES 11 UNITS] Infer the likely country and phone prefix, of up to 100 personal names, with a local context (ISO2 country of residence). 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchFirstLastNamePhoneNumberGeoIn">A list of personal names (optional)</param>
        /// <returns>Task of ApiResponse (BatchFirstLastNamePhoneCodedOut)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BatchFirstLastNamePhoneCodedOut>> PhoneCodeGeoBatchAsyncWithHttpInfo (BatchFirstLastNamePhoneNumberGeoIn batchFirstLastNamePhoneNumberGeoIn = null)
        {

            var localVarPath = "/api2/json/phoneCodeGeoBatch";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (batchFirstLastNamePhoneNumberGeoIn != null && batchFirstLastNamePhoneNumberGeoIn.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(batchFirstLastNamePhoneNumberGeoIn); // http body (model) parameter
            }
            else
            {
                localVarPostBody = batchFirstLastNamePhoneNumberGeoIn; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarHeaderParams["X-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-API-KEY");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PhoneCodeGeoBatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BatchFirstLastNamePhoneCodedOut>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BatchFirstLastNamePhoneCodedOut) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BatchFirstLastNamePhoneCodedOut)));
        }

        /// <summary>
        /// [CREDITS 1 UNIT] Feedback loop to better infer the likely phone prefix, given a personal name and formatted / unformatted phone number, with a local context (ISO2 country of residence). 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firstName"></param>
        /// <param name="lastName"></param>
        /// <param name="phoneNumber"></param>
        /// <param name="phoneNumberE164"></param>
        /// <param name="countryIso2"></param>
        /// <returns>FirstLastNamePhoneCodedOut</returns>
        public FirstLastNamePhoneCodedOut PhoneCodeGeoFeedbackLoop (string firstName, string lastName, string phoneNumber, string phoneNumberE164, string countryIso2)
        {
             ApiResponse<FirstLastNamePhoneCodedOut> localVarResponse = PhoneCodeGeoFeedbackLoopWithHttpInfo(firstName, lastName, phoneNumber, phoneNumberE164, countryIso2);
             return localVarResponse.Data;
        }

        /// <summary>
        /// [CREDITS 1 UNIT] Feedback loop to better infer the likely phone prefix, given a personal name and formatted / unformatted phone number, with a local context (ISO2 country of residence). 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firstName"></param>
        /// <param name="lastName"></param>
        /// <param name="phoneNumber"></param>
        /// <param name="phoneNumberE164"></param>
        /// <param name="countryIso2"></param>
        /// <returns>ApiResponse of FirstLastNamePhoneCodedOut</returns>
        public ApiResponse< FirstLastNamePhoneCodedOut > PhoneCodeGeoFeedbackLoopWithHttpInfo (string firstName, string lastName, string phoneNumber, string phoneNumberE164, string countryIso2)
        {
            // verify the required parameter 'firstName' is set
            if (firstName == null)
                throw new ApiException(400, "Missing required parameter 'firstName' when calling SocialApi->PhoneCodeGeoFeedbackLoop");
            // verify the required parameter 'lastName' is set
            if (lastName == null)
                throw new ApiException(400, "Missing required parameter 'lastName' when calling SocialApi->PhoneCodeGeoFeedbackLoop");
            // verify the required parameter 'phoneNumber' is set
            if (phoneNumber == null)
                throw new ApiException(400, "Missing required parameter 'phoneNumber' when calling SocialApi->PhoneCodeGeoFeedbackLoop");
            // verify the required parameter 'phoneNumberE164' is set
            if (phoneNumberE164 == null)
                throw new ApiException(400, "Missing required parameter 'phoneNumberE164' when calling SocialApi->PhoneCodeGeoFeedbackLoop");
            // verify the required parameter 'countryIso2' is set
            if (countryIso2 == null)
                throw new ApiException(400, "Missing required parameter 'countryIso2' when calling SocialApi->PhoneCodeGeoFeedbackLoop");

            var localVarPath = "/api2/json/phoneCodeGeoFeedbackLoop/{firstName}/{lastName}/{phoneNumber}/{phoneNumberE164}/{countryIso2}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (firstName != null) localVarPathParams.Add("firstName", this.Configuration.ApiClient.ParameterToString(firstName)); // path parameter
            if (lastName != null) localVarPathParams.Add("lastName", this.Configuration.ApiClient.ParameterToString(lastName)); // path parameter
            if (phoneNumber != null) localVarPathParams.Add("phoneNumber", this.Configuration.ApiClient.ParameterToString(phoneNumber)); // path parameter
            if (phoneNumberE164 != null) localVarPathParams.Add("phoneNumberE164", this.Configuration.ApiClient.ParameterToString(phoneNumberE164)); // path parameter
            if (countryIso2 != null) localVarPathParams.Add("countryIso2", this.Configuration.ApiClient.ParameterToString(countryIso2)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarHeaderParams["X-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-API-KEY");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PhoneCodeGeoFeedbackLoop", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FirstLastNamePhoneCodedOut>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FirstLastNamePhoneCodedOut) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FirstLastNamePhoneCodedOut)));
        }

        /// <summary>
        /// [CREDITS 1 UNIT] Feedback loop to better infer the likely phone prefix, given a personal name and formatted / unformatted phone number, with a local context (ISO2 country of residence). 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firstName"></param>
        /// <param name="lastName"></param>
        /// <param name="phoneNumber"></param>
        /// <param name="phoneNumberE164"></param>
        /// <param name="countryIso2"></param>
        /// <returns>Task of FirstLastNamePhoneCodedOut</returns>
        public async System.Threading.Tasks.Task<FirstLastNamePhoneCodedOut> PhoneCodeGeoFeedbackLoopAsync (string firstName, string lastName, string phoneNumber, string phoneNumberE164, string countryIso2)
        {
             ApiResponse<FirstLastNamePhoneCodedOut> localVarResponse = await PhoneCodeGeoFeedbackLoopAsyncWithHttpInfo(firstName, lastName, phoneNumber, phoneNumberE164, countryIso2);
             return localVarResponse.Data;

        }

        /// <summary>
        /// [CREDITS 1 UNIT] Feedback loop to better infer the likely phone prefix, given a personal name and formatted / unformatted phone number, with a local context (ISO2 country of residence). 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firstName"></param>
        /// <param name="lastName"></param>
        /// <param name="phoneNumber"></param>
        /// <param name="phoneNumberE164"></param>
        /// <param name="countryIso2"></param>
        /// <returns>Task of ApiResponse (FirstLastNamePhoneCodedOut)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FirstLastNamePhoneCodedOut>> PhoneCodeGeoFeedbackLoopAsyncWithHttpInfo (string firstName, string lastName, string phoneNumber, string phoneNumberE164, string countryIso2)
        {
            // verify the required parameter 'firstName' is set
            if (firstName == null)
                throw new ApiException(400, "Missing required parameter 'firstName' when calling SocialApi->PhoneCodeGeoFeedbackLoop");
            // verify the required parameter 'lastName' is set
            if (lastName == null)
                throw new ApiException(400, "Missing required parameter 'lastName' when calling SocialApi->PhoneCodeGeoFeedbackLoop");
            // verify the required parameter 'phoneNumber' is set
            if (phoneNumber == null)
                throw new ApiException(400, "Missing required parameter 'phoneNumber' when calling SocialApi->PhoneCodeGeoFeedbackLoop");
            // verify the required parameter 'phoneNumberE164' is set
            if (phoneNumberE164 == null)
                throw new ApiException(400, "Missing required parameter 'phoneNumberE164' when calling SocialApi->PhoneCodeGeoFeedbackLoop");
            // verify the required parameter 'countryIso2' is set
            if (countryIso2 == null)
                throw new ApiException(400, "Missing required parameter 'countryIso2' when calling SocialApi->PhoneCodeGeoFeedbackLoop");

            var localVarPath = "/api2/json/phoneCodeGeoFeedbackLoop/{firstName}/{lastName}/{phoneNumber}/{phoneNumberE164}/{countryIso2}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (firstName != null) localVarPathParams.Add("firstName", this.Configuration.ApiClient.ParameterToString(firstName)); // path parameter
            if (lastName != null) localVarPathParams.Add("lastName", this.Configuration.ApiClient.ParameterToString(lastName)); // path parameter
            if (phoneNumber != null) localVarPathParams.Add("phoneNumber", this.Configuration.ApiClient.ParameterToString(phoneNumber)); // path parameter
            if (phoneNumberE164 != null) localVarPathParams.Add("phoneNumberE164", this.Configuration.ApiClient.ParameterToString(phoneNumberE164)); // path parameter
            if (countryIso2 != null) localVarPathParams.Add("countryIso2", this.Configuration.ApiClient.ParameterToString(countryIso2)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarHeaderParams["X-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-API-KEY");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PhoneCodeGeoFeedbackLoop", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FirstLastNamePhoneCodedOut>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FirstLastNamePhoneCodedOut) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FirstLastNamePhoneCodedOut)));
        }

    }
}
