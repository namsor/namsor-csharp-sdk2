/* 
 * NamSor API v2
 *
 * NamSor API v2 : enpoints to process personal names (gender, cultural origin or ethnicity) in all alphabets or languages. Use GET methods for small tests, but prefer POST methods for higher throughput (batch processing of up to 100 names at a time). Need something you can't find here? We have many more features coming soon. Let us know, we'll do our best to add it! 
 *
 * OpenAPI spec version: 2.0.10
 * Contact: contact@namsor.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.com.namsor.sdk2.model
{
    /// <summary>
    /// APIPlanSubscriptionOut
    /// </summary>
    [DataContract]
    public partial class APIPlanSubscriptionOut :  IEquatable<APIPlanSubscriptionOut>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="APIPlanSubscriptionOut" /> class.
        /// </summary>
        /// <param name="apiKey">apiKey.</param>
        /// <param name="planStarted">planStarted.</param>
        /// <param name="priorPlanStarted">priorPlanStarted.</param>
        /// <param name="planEnded">planEnded.</param>
        /// <param name="taxRate">taxRate.</param>
        /// <param name="planName">planName.</param>
        /// <param name="planBaseFeesKey">planBaseFeesKey.</param>
        /// <param name="planStatus">planStatus.</param>
        /// <param name="planQuota">planQuota.</param>
        /// <param name="priceUSD">priceUSD.</param>
        /// <param name="priceOverageUSD">priceOverageUSD.</param>
        /// <param name="price">price.</param>
        /// <param name="priceOverage">priceOverage.</param>
        /// <param name="currency">currency.</param>
        /// <param name="currencyFactor">currencyFactor.</param>
        /// <param name="stripeCustomerId">stripeCustomerId.</param>
        /// <param name="stripeStatus">stripeStatus.</param>
        /// <param name="stripeSubscription">stripeSubscription.</param>
        /// <param name="userId">userId.</param>
        public APIPlanSubscriptionOut(string apiKey = default(string), long? planStarted = default(long?), long? priorPlanStarted = default(long?), long? planEnded = default(long?), double? taxRate = default(double?), string planName = default(string), string planBaseFeesKey = default(string), string planStatus = default(string), long? planQuota = default(long?), double? priceUSD = default(double?), double? priceOverageUSD = default(double?), double? price = default(double?), double? priceOverage = default(double?), string currency = default(string), double? currencyFactor = default(double?), string stripeCustomerId = default(string), string stripeStatus = default(string), string stripeSubscription = default(string), string userId = default(string))
        {
            this.ApiKey = apiKey;
            this.PlanStarted = planStarted;
            this.PriorPlanStarted = priorPlanStarted;
            this.PlanEnded = planEnded;
            this.TaxRate = taxRate;
            this.PlanName = planName;
            this.PlanBaseFeesKey = planBaseFeesKey;
            this.PlanStatus = planStatus;
            this.PlanQuota = planQuota;
            this.PriceUSD = priceUSD;
            this.PriceOverageUSD = priceOverageUSD;
            this.Price = price;
            this.PriceOverage = priceOverage;
            this.Currency = currency;
            this.CurrencyFactor = currencyFactor;
            this.StripeCustomerId = stripeCustomerId;
            this.StripeStatus = stripeStatus;
            this.StripeSubscription = stripeSubscription;
            this.UserId = userId;
        }
        
        /// <summary>
        /// Gets or Sets ApiKey
        /// </summary>
        [DataMember(Name="apiKey", EmitDefaultValue=false)]
        public string ApiKey { get; set; }

        /// <summary>
        /// Gets or Sets PlanStarted
        /// </summary>
        [DataMember(Name="planStarted", EmitDefaultValue=false)]
        public long? PlanStarted { get; set; }

        /// <summary>
        /// Gets or Sets PriorPlanStarted
        /// </summary>
        [DataMember(Name="priorPlanStarted", EmitDefaultValue=false)]
        public long? PriorPlanStarted { get; set; }

        /// <summary>
        /// Gets or Sets PlanEnded
        /// </summary>
        [DataMember(Name="planEnded", EmitDefaultValue=false)]
        public long? PlanEnded { get; set; }

        /// <summary>
        /// Gets or Sets TaxRate
        /// </summary>
        [DataMember(Name="taxRate", EmitDefaultValue=false)]
        public double? TaxRate { get; set; }

        /// <summary>
        /// Gets or Sets PlanName
        /// </summary>
        [DataMember(Name="planName", EmitDefaultValue=false)]
        public string PlanName { get; set; }

        /// <summary>
        /// Gets or Sets PlanBaseFeesKey
        /// </summary>
        [DataMember(Name="planBaseFeesKey", EmitDefaultValue=false)]
        public string PlanBaseFeesKey { get; set; }

        /// <summary>
        /// Gets or Sets PlanStatus
        /// </summary>
        [DataMember(Name="planStatus", EmitDefaultValue=false)]
        public string PlanStatus { get; set; }

        /// <summary>
        /// Gets or Sets PlanQuota
        /// </summary>
        [DataMember(Name="planQuota", EmitDefaultValue=false)]
        public long? PlanQuota { get; set; }

        /// <summary>
        /// Gets or Sets PriceUSD
        /// </summary>
        [DataMember(Name="priceUSD", EmitDefaultValue=false)]
        public double? PriceUSD { get; set; }

        /// <summary>
        /// Gets or Sets PriceOverageUSD
        /// </summary>
        [DataMember(Name="priceOverageUSD", EmitDefaultValue=false)]
        public double? PriceOverageUSD { get; set; }

        /// <summary>
        /// Gets or Sets Price
        /// </summary>
        [DataMember(Name="price", EmitDefaultValue=false)]
        public double? Price { get; set; }

        /// <summary>
        /// Gets or Sets PriceOverage
        /// </summary>
        [DataMember(Name="priceOverage", EmitDefaultValue=false)]
        public double? PriceOverage { get; set; }

        /// <summary>
        /// Gets or Sets Currency
        /// </summary>
        [DataMember(Name="currency", EmitDefaultValue=false)]
        public string Currency { get; set; }

        /// <summary>
        /// Gets or Sets CurrencyFactor
        /// </summary>
        [DataMember(Name="currencyFactor", EmitDefaultValue=false)]
        public double? CurrencyFactor { get; set; }

        /// <summary>
        /// Gets or Sets StripeCustomerId
        /// </summary>
        [DataMember(Name="stripeCustomerId", EmitDefaultValue=false)]
        public string StripeCustomerId { get; set; }

        /// <summary>
        /// Gets or Sets StripeStatus
        /// </summary>
        [DataMember(Name="stripeStatus", EmitDefaultValue=false)]
        public string StripeStatus { get; set; }

        /// <summary>
        /// Gets or Sets StripeSubscription
        /// </summary>
        [DataMember(Name="stripeSubscription", EmitDefaultValue=false)]
        public string StripeSubscription { get; set; }

        /// <summary>
        /// Gets or Sets UserId
        /// </summary>
        [DataMember(Name="userId", EmitDefaultValue=false)]
        public string UserId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class APIPlanSubscriptionOut {\n");
            sb.Append("  ApiKey: ").Append(ApiKey).Append("\n");
            sb.Append("  PlanStarted: ").Append(PlanStarted).Append("\n");
            sb.Append("  PriorPlanStarted: ").Append(PriorPlanStarted).Append("\n");
            sb.Append("  PlanEnded: ").Append(PlanEnded).Append("\n");
            sb.Append("  TaxRate: ").Append(TaxRate).Append("\n");
            sb.Append("  PlanName: ").Append(PlanName).Append("\n");
            sb.Append("  PlanBaseFeesKey: ").Append(PlanBaseFeesKey).Append("\n");
            sb.Append("  PlanStatus: ").Append(PlanStatus).Append("\n");
            sb.Append("  PlanQuota: ").Append(PlanQuota).Append("\n");
            sb.Append("  PriceUSD: ").Append(PriceUSD).Append("\n");
            sb.Append("  PriceOverageUSD: ").Append(PriceOverageUSD).Append("\n");
            sb.Append("  Price: ").Append(Price).Append("\n");
            sb.Append("  PriceOverage: ").Append(PriceOverage).Append("\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("  CurrencyFactor: ").Append(CurrencyFactor).Append("\n");
            sb.Append("  StripeCustomerId: ").Append(StripeCustomerId).Append("\n");
            sb.Append("  StripeStatus: ").Append(StripeStatus).Append("\n");
            sb.Append("  StripeSubscription: ").Append(StripeSubscription).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as APIPlanSubscriptionOut);
        }

        /// <summary>
        /// Returns true if APIPlanSubscriptionOut instances are equal
        /// </summary>
        /// <param name="input">Instance of APIPlanSubscriptionOut to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(APIPlanSubscriptionOut input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ApiKey == input.ApiKey ||
                    (this.ApiKey != null &&
                    this.ApiKey.Equals(input.ApiKey))
                ) && 
                (
                    this.PlanStarted == input.PlanStarted ||
                    (this.PlanStarted != null &&
                    this.PlanStarted.Equals(input.PlanStarted))
                ) && 
                (
                    this.PriorPlanStarted == input.PriorPlanStarted ||
                    (this.PriorPlanStarted != null &&
                    this.PriorPlanStarted.Equals(input.PriorPlanStarted))
                ) && 
                (
                    this.PlanEnded == input.PlanEnded ||
                    (this.PlanEnded != null &&
                    this.PlanEnded.Equals(input.PlanEnded))
                ) && 
                (
                    this.TaxRate == input.TaxRate ||
                    (this.TaxRate != null &&
                    this.TaxRate.Equals(input.TaxRate))
                ) && 
                (
                    this.PlanName == input.PlanName ||
                    (this.PlanName != null &&
                    this.PlanName.Equals(input.PlanName))
                ) && 
                (
                    this.PlanBaseFeesKey == input.PlanBaseFeesKey ||
                    (this.PlanBaseFeesKey != null &&
                    this.PlanBaseFeesKey.Equals(input.PlanBaseFeesKey))
                ) && 
                (
                    this.PlanStatus == input.PlanStatus ||
                    (this.PlanStatus != null &&
                    this.PlanStatus.Equals(input.PlanStatus))
                ) && 
                (
                    this.PlanQuota == input.PlanQuota ||
                    (this.PlanQuota != null &&
                    this.PlanQuota.Equals(input.PlanQuota))
                ) && 
                (
                    this.PriceUSD == input.PriceUSD ||
                    (this.PriceUSD != null &&
                    this.PriceUSD.Equals(input.PriceUSD))
                ) && 
                (
                    this.PriceOverageUSD == input.PriceOverageUSD ||
                    (this.PriceOverageUSD != null &&
                    this.PriceOverageUSD.Equals(input.PriceOverageUSD))
                ) && 
                (
                    this.Price == input.Price ||
                    (this.Price != null &&
                    this.Price.Equals(input.Price))
                ) && 
                (
                    this.PriceOverage == input.PriceOverage ||
                    (this.PriceOverage != null &&
                    this.PriceOverage.Equals(input.PriceOverage))
                ) && 
                (
                    this.Currency == input.Currency ||
                    (this.Currency != null &&
                    this.Currency.Equals(input.Currency))
                ) && 
                (
                    this.CurrencyFactor == input.CurrencyFactor ||
                    (this.CurrencyFactor != null &&
                    this.CurrencyFactor.Equals(input.CurrencyFactor))
                ) && 
                (
                    this.StripeCustomerId == input.StripeCustomerId ||
                    (this.StripeCustomerId != null &&
                    this.StripeCustomerId.Equals(input.StripeCustomerId))
                ) && 
                (
                    this.StripeStatus == input.StripeStatus ||
                    (this.StripeStatus != null &&
                    this.StripeStatus.Equals(input.StripeStatus))
                ) && 
                (
                    this.StripeSubscription == input.StripeSubscription ||
                    (this.StripeSubscription != null &&
                    this.StripeSubscription.Equals(input.StripeSubscription))
                ) && 
                (
                    this.UserId == input.UserId ||
                    (this.UserId != null &&
                    this.UserId.Equals(input.UserId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ApiKey != null)
                    hashCode = hashCode * 59 + this.ApiKey.GetHashCode();
                if (this.PlanStarted != null)
                    hashCode = hashCode * 59 + this.PlanStarted.GetHashCode();
                if (this.PriorPlanStarted != null)
                    hashCode = hashCode * 59 + this.PriorPlanStarted.GetHashCode();
                if (this.PlanEnded != null)
                    hashCode = hashCode * 59 + this.PlanEnded.GetHashCode();
                if (this.TaxRate != null)
                    hashCode = hashCode * 59 + this.TaxRate.GetHashCode();
                if (this.PlanName != null)
                    hashCode = hashCode * 59 + this.PlanName.GetHashCode();
                if (this.PlanBaseFeesKey != null)
                    hashCode = hashCode * 59 + this.PlanBaseFeesKey.GetHashCode();
                if (this.PlanStatus != null)
                    hashCode = hashCode * 59 + this.PlanStatus.GetHashCode();
                if (this.PlanQuota != null)
                    hashCode = hashCode * 59 + this.PlanQuota.GetHashCode();
                if (this.PriceUSD != null)
                    hashCode = hashCode * 59 + this.PriceUSD.GetHashCode();
                if (this.PriceOverageUSD != null)
                    hashCode = hashCode * 59 + this.PriceOverageUSD.GetHashCode();
                if (this.Price != null)
                    hashCode = hashCode * 59 + this.Price.GetHashCode();
                if (this.PriceOverage != null)
                    hashCode = hashCode * 59 + this.PriceOverage.GetHashCode();
                if (this.Currency != null)
                    hashCode = hashCode * 59 + this.Currency.GetHashCode();
                if (this.CurrencyFactor != null)
                    hashCode = hashCode * 59 + this.CurrencyFactor.GetHashCode();
                if (this.StripeCustomerId != null)
                    hashCode = hashCode * 59 + this.StripeCustomerId.GetHashCode();
                if (this.StripeStatus != null)
                    hashCode = hashCode * 59 + this.StripeStatus.GetHashCode();
                if (this.StripeSubscription != null)
                    hashCode = hashCode * 59 + this.StripeSubscription.GetHashCode();
                if (this.UserId != null)
                    hashCode = hashCode * 59 + this.UserId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
