/* 
 * NamSor API v2
 *
 * NamSor API v2 : enpoints to process personal names (gender, cultural origin or ethnicity) in all alphabets or languages. Use GET methods for small tests, but prefer POST methods for higher throughput (batch processing of up to 100 names at a time). Need something you can't find here? We have many more features coming soon. Let us know, we'll do our best to add it! 
 *
 * OpenAPI spec version: 2.0.4
 * Contact: contact@namsor.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.com.namsor.sdk2.model
{
    /// <summary>
    /// Represents the output of inferring the LIKELY country of Origin from a personal name.
    /// </summary>
    [DataContract]
    public partial class FirstLastNameOriginedOut :  IEquatable<FirstLastNameOriginedOut>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FirstLastNameOriginedOut" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="firstName">firstName.</param>
        /// <param name="lastName">lastName.</param>
        /// <param name="countryOrigin">Most likely country of Origin.</param>
        /// <param name="countryOriginAlt">Second best alternative : country of Origin.</param>
        /// <param name="score">Compatibility to NamSor_v1 Origin score value.</param>
        /// <param name="regionOrigin">Most likely region of Origin (based on countryOrigin ISO2 code).</param>
        /// <param name="topRegionOrigin">Most likely region of Origin (based on countryOrigin ISO2 code).</param>
        /// <param name="subRegionOrigin">Most likely region of Origin (based on countryOrigin ISO2 code).</param>
        public FirstLastNameOriginedOut(string id = default(string), string firstName = default(string), string lastName = default(string), string countryOrigin = default(string), string countryOriginAlt = default(string), double? score = default(double?), string regionOrigin = default(string), string topRegionOrigin = default(string), string subRegionOrigin = default(string))
        {
            this.Id = id;
            this.FirstName = firstName;
            this.LastName = lastName;
            this.CountryOrigin = countryOrigin;
            this.CountryOriginAlt = countryOriginAlt;
            this.Score = score;
            this.RegionOrigin = regionOrigin;
            this.TopRegionOrigin = topRegionOrigin;
            this.SubRegionOrigin = subRegionOrigin;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets FirstName
        /// </summary>
        [DataMember(Name="firstName", EmitDefaultValue=false)]
        public string FirstName { get; set; }

        /// <summary>
        /// Gets or Sets LastName
        /// </summary>
        [DataMember(Name="lastName", EmitDefaultValue=false)]
        public string LastName { get; set; }

        /// <summary>
        /// Most likely country of Origin
        /// </summary>
        /// <value>Most likely country of Origin</value>
        [DataMember(Name="countryOrigin", EmitDefaultValue=false)]
        public string CountryOrigin { get; set; }

        /// <summary>
        /// Second best alternative : country of Origin
        /// </summary>
        /// <value>Second best alternative : country of Origin</value>
        [DataMember(Name="countryOriginAlt", EmitDefaultValue=false)]
        public string CountryOriginAlt { get; set; }

        /// <summary>
        /// Compatibility to NamSor_v1 Origin score value
        /// </summary>
        /// <value>Compatibility to NamSor_v1 Origin score value</value>
        [DataMember(Name="score", EmitDefaultValue=false)]
        public double? Score { get; set; }

        /// <summary>
        /// Most likely region of Origin (based on countryOrigin ISO2 code)
        /// </summary>
        /// <value>Most likely region of Origin (based on countryOrigin ISO2 code)</value>
        [DataMember(Name="regionOrigin", EmitDefaultValue=false)]
        public string RegionOrigin { get; set; }

        /// <summary>
        /// Most likely region of Origin (based on countryOrigin ISO2 code)
        /// </summary>
        /// <value>Most likely region of Origin (based on countryOrigin ISO2 code)</value>
        [DataMember(Name="topRegionOrigin", EmitDefaultValue=false)]
        public string TopRegionOrigin { get; set; }

        /// <summary>
        /// Most likely region of Origin (based on countryOrigin ISO2 code)
        /// </summary>
        /// <value>Most likely region of Origin (based on countryOrigin ISO2 code)</value>
        [DataMember(Name="subRegionOrigin", EmitDefaultValue=false)]
        public string SubRegionOrigin { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FirstLastNameOriginedOut {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  FirstName: ").Append(FirstName).Append("\n");
            sb.Append("  LastName: ").Append(LastName).Append("\n");
            sb.Append("  CountryOrigin: ").Append(CountryOrigin).Append("\n");
            sb.Append("  CountryOriginAlt: ").Append(CountryOriginAlt).Append("\n");
            sb.Append("  Score: ").Append(Score).Append("\n");
            sb.Append("  RegionOrigin: ").Append(RegionOrigin).Append("\n");
            sb.Append("  TopRegionOrigin: ").Append(TopRegionOrigin).Append("\n");
            sb.Append("  SubRegionOrigin: ").Append(SubRegionOrigin).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FirstLastNameOriginedOut);
        }

        /// <summary>
        /// Returns true if FirstLastNameOriginedOut instances are equal
        /// </summary>
        /// <param name="input">Instance of FirstLastNameOriginedOut to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FirstLastNameOriginedOut input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.FirstName == input.FirstName ||
                    (this.FirstName != null &&
                    this.FirstName.Equals(input.FirstName))
                ) && 
                (
                    this.LastName == input.LastName ||
                    (this.LastName != null &&
                    this.LastName.Equals(input.LastName))
                ) && 
                (
                    this.CountryOrigin == input.CountryOrigin ||
                    (this.CountryOrigin != null &&
                    this.CountryOrigin.Equals(input.CountryOrigin))
                ) && 
                (
                    this.CountryOriginAlt == input.CountryOriginAlt ||
                    (this.CountryOriginAlt != null &&
                    this.CountryOriginAlt.Equals(input.CountryOriginAlt))
                ) && 
                (
                    this.Score == input.Score ||
                    (this.Score != null &&
                    this.Score.Equals(input.Score))
                ) && 
                (
                    this.RegionOrigin == input.RegionOrigin ||
                    (this.RegionOrigin != null &&
                    this.RegionOrigin.Equals(input.RegionOrigin))
                ) && 
                (
                    this.TopRegionOrigin == input.TopRegionOrigin ||
                    (this.TopRegionOrigin != null &&
                    this.TopRegionOrigin.Equals(input.TopRegionOrigin))
                ) && 
                (
                    this.SubRegionOrigin == input.SubRegionOrigin ||
                    (this.SubRegionOrigin != null &&
                    this.SubRegionOrigin.Equals(input.SubRegionOrigin))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.FirstName != null)
                    hashCode = hashCode * 59 + this.FirstName.GetHashCode();
                if (this.LastName != null)
                    hashCode = hashCode * 59 + this.LastName.GetHashCode();
                if (this.CountryOrigin != null)
                    hashCode = hashCode * 59 + this.CountryOrigin.GetHashCode();
                if (this.CountryOriginAlt != null)
                    hashCode = hashCode * 59 + this.CountryOriginAlt.GetHashCode();
                if (this.Score != null)
                    hashCode = hashCode * 59 + this.Score.GetHashCode();
                if (this.RegionOrigin != null)
                    hashCode = hashCode * 59 + this.RegionOrigin.GetHashCode();
                if (this.TopRegionOrigin != null)
                    hashCode = hashCode * 59 + this.TopRegionOrigin.GetHashCode();
                if (this.SubRegionOrigin != null)
                    hashCode = hashCode * 59 + this.SubRegionOrigin.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
