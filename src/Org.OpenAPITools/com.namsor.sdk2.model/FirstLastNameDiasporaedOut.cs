/* 
 * NamSor API v2
 *
 * NamSor API v2 : enpoints to process personal names (gender, cultural origin or ethnicity) in all alphabets or languages. Use GET methods for small tests, but prefer POST methods for higher throughput (batch processing of up to 100 names at a time). Need something you can't find here? We have many more features coming soon. Let us know, we'll do our best to add it! 
 *
 * OpenAPI spec version: 2.0.7
 * Contact: contact@namsor.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.com.namsor.sdk2.model
{
    /// <summary>
    /// Represents the output of inferring the LIKELY ethnicity from a personal name, given an country of residence.
    /// </summary>
    [DataContract]
    public partial class FirstLastNameDiasporaedOut :  IEquatable<FirstLastNameDiasporaedOut>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FirstLastNameDiasporaedOut" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="firstName">firstName.</param>
        /// <param name="lastName">lastName.</param>
        /// <param name="score">Compatibility to NamSor_v1 Origin score value.</param>
        /// <param name="ethnicityAlt">ethnicityAlt.</param>
        /// <param name="ethnicity">ethnicity.</param>
        /// <param name="lifted">lifted.</param>
        /// <param name="countryIso2">countryIso2.</param>
        /// <param name="ethnicitiesTop">List ethnicities (top 10).</param>
        public FirstLastNameDiasporaedOut(string id = default(string), string firstName = default(string), string lastName = default(string), double? score = default(double?), string ethnicityAlt = default(string), string ethnicity = default(string), bool? lifted = default(bool?), string countryIso2 = default(string), List<string> ethnicitiesTop = default(List<string>))
        {
            this.Id = id;
            this.FirstName = firstName;
            this.LastName = lastName;
            this.Score = score;
            this.EthnicityAlt = ethnicityAlt;
            this.Ethnicity = ethnicity;
            this.Lifted = lifted;
            this.CountryIso2 = countryIso2;
            this.EthnicitiesTop = ethnicitiesTop;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets FirstName
        /// </summary>
        [DataMember(Name="firstName", EmitDefaultValue=false)]
        public string FirstName { get; set; }

        /// <summary>
        /// Gets or Sets LastName
        /// </summary>
        [DataMember(Name="lastName", EmitDefaultValue=false)]
        public string LastName { get; set; }

        /// <summary>
        /// Compatibility to NamSor_v1 Origin score value
        /// </summary>
        /// <value>Compatibility to NamSor_v1 Origin score value</value>
        [DataMember(Name="score", EmitDefaultValue=false)]
        public double? Score { get; set; }

        /// <summary>
        /// Gets or Sets EthnicityAlt
        /// </summary>
        [DataMember(Name="ethnicityAlt", EmitDefaultValue=false)]
        public string EthnicityAlt { get; set; }

        /// <summary>
        /// Gets or Sets Ethnicity
        /// </summary>
        [DataMember(Name="ethnicity", EmitDefaultValue=false)]
        public string Ethnicity { get; set; }

        /// <summary>
        /// Gets or Sets Lifted
        /// </summary>
        [DataMember(Name="lifted", EmitDefaultValue=false)]
        public bool? Lifted { get; set; }

        /// <summary>
        /// Gets or Sets CountryIso2
        /// </summary>
        [DataMember(Name="countryIso2", EmitDefaultValue=false)]
        public string CountryIso2 { get; set; }

        /// <summary>
        /// List ethnicities (top 10)
        /// </summary>
        /// <value>List ethnicities (top 10)</value>
        [DataMember(Name="ethnicitiesTop", EmitDefaultValue=false)]
        public List<string> EthnicitiesTop { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FirstLastNameDiasporaedOut {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  FirstName: ").Append(FirstName).Append("\n");
            sb.Append("  LastName: ").Append(LastName).Append("\n");
            sb.Append("  Score: ").Append(Score).Append("\n");
            sb.Append("  EthnicityAlt: ").Append(EthnicityAlt).Append("\n");
            sb.Append("  Ethnicity: ").Append(Ethnicity).Append("\n");
            sb.Append("  Lifted: ").Append(Lifted).Append("\n");
            sb.Append("  CountryIso2: ").Append(CountryIso2).Append("\n");
            sb.Append("  EthnicitiesTop: ").Append(EthnicitiesTop).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FirstLastNameDiasporaedOut);
        }

        /// <summary>
        /// Returns true if FirstLastNameDiasporaedOut instances are equal
        /// </summary>
        /// <param name="input">Instance of FirstLastNameDiasporaedOut to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FirstLastNameDiasporaedOut input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.FirstName == input.FirstName ||
                    (this.FirstName != null &&
                    this.FirstName.Equals(input.FirstName))
                ) && 
                (
                    this.LastName == input.LastName ||
                    (this.LastName != null &&
                    this.LastName.Equals(input.LastName))
                ) && 
                (
                    this.Score == input.Score ||
                    (this.Score != null &&
                    this.Score.Equals(input.Score))
                ) && 
                (
                    this.EthnicityAlt == input.EthnicityAlt ||
                    (this.EthnicityAlt != null &&
                    this.EthnicityAlt.Equals(input.EthnicityAlt))
                ) && 
                (
                    this.Ethnicity == input.Ethnicity ||
                    (this.Ethnicity != null &&
                    this.Ethnicity.Equals(input.Ethnicity))
                ) && 
                (
                    this.Lifted == input.Lifted ||
                    (this.Lifted != null &&
                    this.Lifted.Equals(input.Lifted))
                ) && 
                (
                    this.CountryIso2 == input.CountryIso2 ||
                    (this.CountryIso2 != null &&
                    this.CountryIso2.Equals(input.CountryIso2))
                ) && 
                (
                    this.EthnicitiesTop == input.EthnicitiesTop ||
                    this.EthnicitiesTop != null &&
                    this.EthnicitiesTop.SequenceEqual(input.EthnicitiesTop)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.FirstName != null)
                    hashCode = hashCode * 59 + this.FirstName.GetHashCode();
                if (this.LastName != null)
                    hashCode = hashCode * 59 + this.LastName.GetHashCode();
                if (this.Score != null)
                    hashCode = hashCode * 59 + this.Score.GetHashCode();
                if (this.EthnicityAlt != null)
                    hashCode = hashCode * 59 + this.EthnicityAlt.GetHashCode();
                if (this.Ethnicity != null)
                    hashCode = hashCode * 59 + this.Ethnicity.GetHashCode();
                if (this.Lifted != null)
                    hashCode = hashCode * 59 + this.Lifted.GetHashCode();
                if (this.CountryIso2 != null)
                    hashCode = hashCode * 59 + this.CountryIso2.GetHashCode();
                if (this.EthnicitiesTop != null)
                    hashCode = hashCode * 59 + this.EthnicitiesTop.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
