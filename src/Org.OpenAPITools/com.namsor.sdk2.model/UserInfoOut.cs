/* 
 * NamSor API v2
 *
 * NamSor API v2 : enpoints to process personal names (gender, cultural origin or ethnicity) in all alphabets or languages. Use GET methods for small tests, but prefer POST methods for higher throughput (batch processing of up to 100 names at a time). Need something you can't find here? We have many more features coming soon. Let us know, we'll do our best to add it! 
 *
 * OpenAPI spec version: 2.0.4
 * Contact: contact@namsor.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.com.namsor.sdk2.model
{
    /// <summary>
    /// UserInfoOut
    /// </summary>
    [DataContract]
    public partial class UserInfoOut :  IEquatable<UserInfoOut>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UserInfoOut" /> class.
        /// </summary>
        /// <param name="uid">uid.</param>
        /// <param name="email">email.</param>
        /// <param name="phoneNumber">phoneNumber.</param>
        /// <param name="emailVerified">emailVerified.</param>
        /// <param name="displayName">displayName.</param>
        /// <param name="photoUrl">photoUrl.</param>
        /// <param name="disabled">disabled.</param>
        /// <param name="firstKnownIpAddress">firstKnownIpAddress.</param>
        /// <param name="providerId">providerId.</param>
        /// <param name="timeStamp">timeStamp.</param>
        /// <param name="verifyToken">verifyToken.</param>
        /// <param name="apiKey">apiKey.</param>
        /// <param name="stripePerishableKey">stripePerishableKey.</param>
        /// <param name="stripeCustomerId">stripeCustomerId.</param>
        /// <param name="otherInfos">otherInfos.</param>
        public UserInfoOut(string uid = default(string), string email = default(string), string phoneNumber = default(string), bool? emailVerified = default(bool?), string displayName = default(string), string photoUrl = default(string), bool? disabled = default(bool?), string firstKnownIpAddress = default(string), string providerId = default(string), long? timeStamp = default(long?), string verifyToken = default(string), string apiKey = default(string), string stripePerishableKey = default(string), string stripeCustomerId = default(string), List<UserInfoOut> otherInfos = default(List<UserInfoOut>))
        {
            this.Uid = uid;
            this.Email = email;
            this.PhoneNumber = phoneNumber;
            this.EmailVerified = emailVerified;
            this.DisplayName = displayName;
            this.PhotoUrl = photoUrl;
            this.Disabled = disabled;
            this.FirstKnownIpAddress = firstKnownIpAddress;
            this.ProviderId = providerId;
            this.TimeStamp = timeStamp;
            this.VerifyToken = verifyToken;
            this.ApiKey = apiKey;
            this.StripePerishableKey = stripePerishableKey;
            this.StripeCustomerId = stripeCustomerId;
            this.OtherInfos = otherInfos;
        }
        
        /// <summary>
        /// Gets or Sets Uid
        /// </summary>
        [DataMember(Name="uid", EmitDefaultValue=false)]
        public string Uid { get; set; }

        /// <summary>
        /// Gets or Sets Email
        /// </summary>
        [DataMember(Name="email", EmitDefaultValue=false)]
        public string Email { get; set; }

        /// <summary>
        /// Gets or Sets PhoneNumber
        /// </summary>
        [DataMember(Name="phoneNumber", EmitDefaultValue=false)]
        public string PhoneNumber { get; set; }

        /// <summary>
        /// Gets or Sets EmailVerified
        /// </summary>
        [DataMember(Name="emailVerified", EmitDefaultValue=false)]
        public bool? EmailVerified { get; set; }

        /// <summary>
        /// Gets or Sets DisplayName
        /// </summary>
        [DataMember(Name="displayName", EmitDefaultValue=false)]
        public string DisplayName { get; set; }

        /// <summary>
        /// Gets or Sets PhotoUrl
        /// </summary>
        [DataMember(Name="photoUrl", EmitDefaultValue=false)]
        public string PhotoUrl { get; set; }

        /// <summary>
        /// Gets or Sets Disabled
        /// </summary>
        [DataMember(Name="disabled", EmitDefaultValue=false)]
        public bool? Disabled { get; set; }

        /// <summary>
        /// Gets or Sets FirstKnownIpAddress
        /// </summary>
        [DataMember(Name="firstKnownIpAddress", EmitDefaultValue=false)]
        public string FirstKnownIpAddress { get; set; }

        /// <summary>
        /// Gets or Sets ProviderId
        /// </summary>
        [DataMember(Name="providerId", EmitDefaultValue=false)]
        public string ProviderId { get; set; }

        /// <summary>
        /// Gets or Sets TimeStamp
        /// </summary>
        [DataMember(Name="timeStamp", EmitDefaultValue=false)]
        public long? TimeStamp { get; set; }

        /// <summary>
        /// Gets or Sets VerifyToken
        /// </summary>
        [DataMember(Name="verifyToken", EmitDefaultValue=false)]
        public string VerifyToken { get; set; }

        /// <summary>
        /// Gets or Sets ApiKey
        /// </summary>
        [DataMember(Name="apiKey", EmitDefaultValue=false)]
        public string ApiKey { get; set; }

        /// <summary>
        /// Gets or Sets StripePerishableKey
        /// </summary>
        [DataMember(Name="stripePerishableKey", EmitDefaultValue=false)]
        public string StripePerishableKey { get; set; }

        /// <summary>
        /// Gets or Sets StripeCustomerId
        /// </summary>
        [DataMember(Name="stripeCustomerId", EmitDefaultValue=false)]
        public string StripeCustomerId { get; set; }

        /// <summary>
        /// Gets or Sets OtherInfos
        /// </summary>
        [DataMember(Name="otherInfos", EmitDefaultValue=false)]
        public List<UserInfoOut> OtherInfos { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UserInfoOut {\n");
            sb.Append("  Uid: ").Append(Uid).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  PhoneNumber: ").Append(PhoneNumber).Append("\n");
            sb.Append("  EmailVerified: ").Append(EmailVerified).Append("\n");
            sb.Append("  DisplayName: ").Append(DisplayName).Append("\n");
            sb.Append("  PhotoUrl: ").Append(PhotoUrl).Append("\n");
            sb.Append("  Disabled: ").Append(Disabled).Append("\n");
            sb.Append("  FirstKnownIpAddress: ").Append(FirstKnownIpAddress).Append("\n");
            sb.Append("  ProviderId: ").Append(ProviderId).Append("\n");
            sb.Append("  TimeStamp: ").Append(TimeStamp).Append("\n");
            sb.Append("  VerifyToken: ").Append(VerifyToken).Append("\n");
            sb.Append("  ApiKey: ").Append(ApiKey).Append("\n");
            sb.Append("  StripePerishableKey: ").Append(StripePerishableKey).Append("\n");
            sb.Append("  StripeCustomerId: ").Append(StripeCustomerId).Append("\n");
            sb.Append("  OtherInfos: ").Append(OtherInfos).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UserInfoOut);
        }

        /// <summary>
        /// Returns true if UserInfoOut instances are equal
        /// </summary>
        /// <param name="input">Instance of UserInfoOut to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UserInfoOut input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Uid == input.Uid ||
                    (this.Uid != null &&
                    this.Uid.Equals(input.Uid))
                ) && 
                (
                    this.Email == input.Email ||
                    (this.Email != null &&
                    this.Email.Equals(input.Email))
                ) && 
                (
                    this.PhoneNumber == input.PhoneNumber ||
                    (this.PhoneNumber != null &&
                    this.PhoneNumber.Equals(input.PhoneNumber))
                ) && 
                (
                    this.EmailVerified == input.EmailVerified ||
                    (this.EmailVerified != null &&
                    this.EmailVerified.Equals(input.EmailVerified))
                ) && 
                (
                    this.DisplayName == input.DisplayName ||
                    (this.DisplayName != null &&
                    this.DisplayName.Equals(input.DisplayName))
                ) && 
                (
                    this.PhotoUrl == input.PhotoUrl ||
                    (this.PhotoUrl != null &&
                    this.PhotoUrl.Equals(input.PhotoUrl))
                ) && 
                (
                    this.Disabled == input.Disabled ||
                    (this.Disabled != null &&
                    this.Disabled.Equals(input.Disabled))
                ) && 
                (
                    this.FirstKnownIpAddress == input.FirstKnownIpAddress ||
                    (this.FirstKnownIpAddress != null &&
                    this.FirstKnownIpAddress.Equals(input.FirstKnownIpAddress))
                ) && 
                (
                    this.ProviderId == input.ProviderId ||
                    (this.ProviderId != null &&
                    this.ProviderId.Equals(input.ProviderId))
                ) && 
                (
                    this.TimeStamp == input.TimeStamp ||
                    (this.TimeStamp != null &&
                    this.TimeStamp.Equals(input.TimeStamp))
                ) && 
                (
                    this.VerifyToken == input.VerifyToken ||
                    (this.VerifyToken != null &&
                    this.VerifyToken.Equals(input.VerifyToken))
                ) && 
                (
                    this.ApiKey == input.ApiKey ||
                    (this.ApiKey != null &&
                    this.ApiKey.Equals(input.ApiKey))
                ) && 
                (
                    this.StripePerishableKey == input.StripePerishableKey ||
                    (this.StripePerishableKey != null &&
                    this.StripePerishableKey.Equals(input.StripePerishableKey))
                ) && 
                (
                    this.StripeCustomerId == input.StripeCustomerId ||
                    (this.StripeCustomerId != null &&
                    this.StripeCustomerId.Equals(input.StripeCustomerId))
                ) && 
                (
                    this.OtherInfos == input.OtherInfos ||
                    this.OtherInfos != null &&
                    this.OtherInfos.SequenceEqual(input.OtherInfos)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Uid != null)
                    hashCode = hashCode * 59 + this.Uid.GetHashCode();
                if (this.Email != null)
                    hashCode = hashCode * 59 + this.Email.GetHashCode();
                if (this.PhoneNumber != null)
                    hashCode = hashCode * 59 + this.PhoneNumber.GetHashCode();
                if (this.EmailVerified != null)
                    hashCode = hashCode * 59 + this.EmailVerified.GetHashCode();
                if (this.DisplayName != null)
                    hashCode = hashCode * 59 + this.DisplayName.GetHashCode();
                if (this.PhotoUrl != null)
                    hashCode = hashCode * 59 + this.PhotoUrl.GetHashCode();
                if (this.Disabled != null)
                    hashCode = hashCode * 59 + this.Disabled.GetHashCode();
                if (this.FirstKnownIpAddress != null)
                    hashCode = hashCode * 59 + this.FirstKnownIpAddress.GetHashCode();
                if (this.ProviderId != null)
                    hashCode = hashCode * 59 + this.ProviderId.GetHashCode();
                if (this.TimeStamp != null)
                    hashCode = hashCode * 59 + this.TimeStamp.GetHashCode();
                if (this.VerifyToken != null)
                    hashCode = hashCode * 59 + this.VerifyToken.GetHashCode();
                if (this.ApiKey != null)
                    hashCode = hashCode * 59 + this.ApiKey.GetHashCode();
                if (this.StripePerishableKey != null)
                    hashCode = hashCode * 59 + this.StripePerishableKey.GetHashCode();
                if (this.StripeCustomerId != null)
                    hashCode = hashCode * 59 + this.StripeCustomerId.GetHashCode();
                if (this.OtherInfos != null)
                    hashCode = hashCode * 59 + this.OtherInfos.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
