/* 
 * NamSor API v2
 *
 * NamSor API v2 : enpoints to process personal names (gender, cultural origin or ethnicity) in all alphabets or languages. Use GET methods for small tests, but prefer POST methods for higher throughput (batch processing of up to 100 names at a time). Need something you can't find here? We have many more features coming soon. Let us know, we'll do our best to add it! 
 *
 * OpenAPI spec version: 2.0.9
 * Contact: contact@namsor.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.com.namsor.sdk2.model
{
    /// <summary>
    /// InvoiceItemOut
    /// </summary>
    [DataContract]
    public partial class InvoiceItemOut :  IEquatable<InvoiceItemOut>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InvoiceItemOut" /> class.
        /// </summary>
        /// <param name="itemId">itemId.</param>
        /// <param name="amount">amount.</param>
        /// <param name="currency">currency.</param>
        /// <param name="description">description.</param>
        /// <param name="quantity">quantity.</param>
        /// <param name="subscription">subscription.</param>
        /// <param name="subscriptionItem">subscriptionItem.</param>
        /// <param name="invoiceItemType">invoiceItemType.</param>
        /// <param name="planNickname">planNickname.</param>
        /// <param name="planDesc">planDesc.</param>
        /// <param name="planName">planName.</param>
        public InvoiceItemOut(string itemId = default(string), long? amount = default(long?), string currency = default(string), string description = default(string), long? quantity = default(long?), string subscription = default(string), string subscriptionItem = default(string), string invoiceItemType = default(string), string planNickname = default(string), string planDesc = default(string), string planName = default(string))
        {
            this.ItemId = itemId;
            this.Amount = amount;
            this.Currency = currency;
            this.Description = description;
            this.Quantity = quantity;
            this.Subscription = subscription;
            this.SubscriptionItem = subscriptionItem;
            this.InvoiceItemType = invoiceItemType;
            this.PlanNickname = planNickname;
            this.PlanDesc = planDesc;
            this.PlanName = planName;
        }
        
        /// <summary>
        /// Gets or Sets ItemId
        /// </summary>
        [DataMember(Name="itemId", EmitDefaultValue=false)]
        public string ItemId { get; set; }

        /// <summary>
        /// Gets or Sets Amount
        /// </summary>
        [DataMember(Name="amount", EmitDefaultValue=false)]
        public long? Amount { get; set; }

        /// <summary>
        /// Gets or Sets Currency
        /// </summary>
        [DataMember(Name="currency", EmitDefaultValue=false)]
        public string Currency { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets Quantity
        /// </summary>
        [DataMember(Name="quantity", EmitDefaultValue=false)]
        public long? Quantity { get; set; }

        /// <summary>
        /// Gets or Sets Subscription
        /// </summary>
        [DataMember(Name="subscription", EmitDefaultValue=false)]
        public string Subscription { get; set; }

        /// <summary>
        /// Gets or Sets SubscriptionItem
        /// </summary>
        [DataMember(Name="subscriptionItem", EmitDefaultValue=false)]
        public string SubscriptionItem { get; set; }

        /// <summary>
        /// Gets or Sets InvoiceItemType
        /// </summary>
        [DataMember(Name="invoiceItemType", EmitDefaultValue=false)]
        public string InvoiceItemType { get; set; }

        /// <summary>
        /// Gets or Sets PlanNickname
        /// </summary>
        [DataMember(Name="planNickname", EmitDefaultValue=false)]
        public string PlanNickname { get; set; }

        /// <summary>
        /// Gets or Sets PlanDesc
        /// </summary>
        [DataMember(Name="planDesc", EmitDefaultValue=false)]
        public string PlanDesc { get; set; }

        /// <summary>
        /// Gets or Sets PlanName
        /// </summary>
        [DataMember(Name="planName", EmitDefaultValue=false)]
        public string PlanName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InvoiceItemOut {\n");
            sb.Append("  ItemId: ").Append(ItemId).Append("\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Quantity: ").Append(Quantity).Append("\n");
            sb.Append("  Subscription: ").Append(Subscription).Append("\n");
            sb.Append("  SubscriptionItem: ").Append(SubscriptionItem).Append("\n");
            sb.Append("  InvoiceItemType: ").Append(InvoiceItemType).Append("\n");
            sb.Append("  PlanNickname: ").Append(PlanNickname).Append("\n");
            sb.Append("  PlanDesc: ").Append(PlanDesc).Append("\n");
            sb.Append("  PlanName: ").Append(PlanName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InvoiceItemOut);
        }

        /// <summary>
        /// Returns true if InvoiceItemOut instances are equal
        /// </summary>
        /// <param name="input">Instance of InvoiceItemOut to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InvoiceItemOut input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ItemId == input.ItemId ||
                    (this.ItemId != null &&
                    this.ItemId.Equals(input.ItemId))
                ) && 
                (
                    this.Amount == input.Amount ||
                    (this.Amount != null &&
                    this.Amount.Equals(input.Amount))
                ) && 
                (
                    this.Currency == input.Currency ||
                    (this.Currency != null &&
                    this.Currency.Equals(input.Currency))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Quantity == input.Quantity ||
                    (this.Quantity != null &&
                    this.Quantity.Equals(input.Quantity))
                ) && 
                (
                    this.Subscription == input.Subscription ||
                    (this.Subscription != null &&
                    this.Subscription.Equals(input.Subscription))
                ) && 
                (
                    this.SubscriptionItem == input.SubscriptionItem ||
                    (this.SubscriptionItem != null &&
                    this.SubscriptionItem.Equals(input.SubscriptionItem))
                ) && 
                (
                    this.InvoiceItemType == input.InvoiceItemType ||
                    (this.InvoiceItemType != null &&
                    this.InvoiceItemType.Equals(input.InvoiceItemType))
                ) && 
                (
                    this.PlanNickname == input.PlanNickname ||
                    (this.PlanNickname != null &&
                    this.PlanNickname.Equals(input.PlanNickname))
                ) && 
                (
                    this.PlanDesc == input.PlanDesc ||
                    (this.PlanDesc != null &&
                    this.PlanDesc.Equals(input.PlanDesc))
                ) && 
                (
                    this.PlanName == input.PlanName ||
                    (this.PlanName != null &&
                    this.PlanName.Equals(input.PlanName))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ItemId != null)
                    hashCode = hashCode * 59 + this.ItemId.GetHashCode();
                if (this.Amount != null)
                    hashCode = hashCode * 59 + this.Amount.GetHashCode();
                if (this.Currency != null)
                    hashCode = hashCode * 59 + this.Currency.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.Quantity != null)
                    hashCode = hashCode * 59 + this.Quantity.GetHashCode();
                if (this.Subscription != null)
                    hashCode = hashCode * 59 + this.Subscription.GetHashCode();
                if (this.SubscriptionItem != null)
                    hashCode = hashCode * 59 + this.SubscriptionItem.GetHashCode();
                if (this.InvoiceItemType != null)
                    hashCode = hashCode * 59 + this.InvoiceItemType.GetHashCode();
                if (this.PlanNickname != null)
                    hashCode = hashCode * 59 + this.PlanNickname.GetHashCode();
                if (this.PlanDesc != null)
                    hashCode = hashCode * 59 + this.PlanDesc.GetHashCode();
                if (this.PlanName != null)
                    hashCode = hashCode * 59 + this.PlanName.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
