/* 
 * NamSor API v2
 *
 * NamSor API v2 : enpoints to process personal names (gender, cultural origin or ethnicity) in all alphabets or languages. Use GET methods for small tests, but prefer POST methods for higher throughput (batch processing of up to 100 names at a time). Need something you can't find here? We have many more features coming soon. Let us know, we'll do our best to add it! 
 *
 * OpenAPI spec version: 2.0.10
 * Contact: contact@namsor.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.com.namsor.sdk2.model
{
    /// <summary>
    /// Represents the output of inferring the LIKELY US &#39;race/ethnicity&#39; from a personal name, given US country of residence and (optionally) a ZIP5 code.
    /// </summary>
    [DataContract]
    public partial class FirstLastNameUSRaceEthnicityOut :  IEquatable<FirstLastNameUSRaceEthnicityOut>, IValidatableObject
    {
        /// <summary>
        /// Second most likely US &#39;race&#39;/ethnicity
        /// </summary>
        /// <value>Second most likely US &#39;race&#39;/ethnicity</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum RaceEthnicityAltEnum
        {
            /// <summary>
            /// Enum WNL for value: W_NL
            /// </summary>
            [EnumMember(Value = "W_NL")]
            WNL = 1,

            /// <summary>
            /// Enum HL for value: HL
            /// </summary>
            [EnumMember(Value = "HL")]
            HL = 2,

            /// <summary>
            /// Enum A for value: A
            /// </summary>
            [EnumMember(Value = "A")]
            A = 3,

            /// <summary>
            /// Enum BNL for value: B_NL
            /// </summary>
            [EnumMember(Value = "B_NL")]
            BNL = 4

        }

        /// <summary>
        /// Second most likely US &#39;race&#39;/ethnicity
        /// </summary>
        /// <value>Second most likely US &#39;race&#39;/ethnicity</value>
        [DataMember(Name="raceEthnicityAlt", EmitDefaultValue=false)]
        public RaceEthnicityAltEnum? RaceEthnicityAlt { get; set; }
        /// <summary>
        /// Most likely US &#39;race&#39;/ethnicity
        /// </summary>
        /// <value>Most likely US &#39;race&#39;/ethnicity</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum RaceEthnicityEnum
        {
            /// <summary>
            /// Enum WNL for value: W_NL
            /// </summary>
            [EnumMember(Value = "W_NL")]
            WNL = 1,

            /// <summary>
            /// Enum HL for value: HL
            /// </summary>
            [EnumMember(Value = "HL")]
            HL = 2,

            /// <summary>
            /// Enum A for value: A
            /// </summary>
            [EnumMember(Value = "A")]
            A = 3,

            /// <summary>
            /// Enum BNL for value: B_NL
            /// </summary>
            [EnumMember(Value = "B_NL")]
            BNL = 4

        }

        /// <summary>
        /// Most likely US &#39;race&#39;/ethnicity
        /// </summary>
        /// <value>Most likely US &#39;race&#39;/ethnicity</value>
        [DataMember(Name="raceEthnicity", EmitDefaultValue=false)]
        public RaceEthnicityEnum? RaceEthnicity { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="FirstLastNameUSRaceEthnicityOut" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="firstName">firstName.</param>
        /// <param name="lastName">lastName.</param>
        /// <param name="raceEthnicityAlt">Second most likely US &#39;race&#39;/ethnicity.</param>
        /// <param name="raceEthnicity">Most likely US &#39;race&#39;/ethnicity.</param>
        /// <param name="score">Compatibility to NamSor_v1 Origin score value.</param>
        /// <param name="raceEthnicitiesTop">List &#39;race&#39;/ethnicities.</param>
        /// <param name="probabilityCalibrated">probabilityCalibrated.</param>
        /// <param name="probabilityAltCalibrated">probabilityAltCalibrated.</param>
        public FirstLastNameUSRaceEthnicityOut(string id = default(string), string firstName = default(string), string lastName = default(string), RaceEthnicityAltEnum? raceEthnicityAlt = default(RaceEthnicityAltEnum?), RaceEthnicityEnum? raceEthnicity = default(RaceEthnicityEnum?), double? score = default(double?), List<string> raceEthnicitiesTop = default(List<string>), double? probabilityCalibrated = default(double?), double? probabilityAltCalibrated = default(double?))
        {
            this.Id = id;
            this.FirstName = firstName;
            this.LastName = lastName;
            this.RaceEthnicityAlt = raceEthnicityAlt;
            this.RaceEthnicity = raceEthnicity;
            this.Score = score;
            this.RaceEthnicitiesTop = raceEthnicitiesTop;
            this.ProbabilityCalibrated = probabilityCalibrated;
            this.ProbabilityAltCalibrated = probabilityAltCalibrated;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets FirstName
        /// </summary>
        [DataMember(Name="firstName", EmitDefaultValue=false)]
        public string FirstName { get; set; }

        /// <summary>
        /// Gets or Sets LastName
        /// </summary>
        [DataMember(Name="lastName", EmitDefaultValue=false)]
        public string LastName { get; set; }



        /// <summary>
        /// Compatibility to NamSor_v1 Origin score value
        /// </summary>
        /// <value>Compatibility to NamSor_v1 Origin score value</value>
        [DataMember(Name="score", EmitDefaultValue=false)]
        public double? Score { get; set; }

        /// <summary>
        /// List &#39;race&#39;/ethnicities
        /// </summary>
        /// <value>List &#39;race&#39;/ethnicities</value>
        [DataMember(Name="raceEthnicitiesTop", EmitDefaultValue=false)]
        public List<string> RaceEthnicitiesTop { get; set; }

        /// <summary>
        /// Gets or Sets ProbabilityCalibrated
        /// </summary>
        [DataMember(Name="probabilityCalibrated", EmitDefaultValue=false)]
        public double? ProbabilityCalibrated { get; set; }

        /// <summary>
        /// Gets or Sets ProbabilityAltCalibrated
        /// </summary>
        [DataMember(Name="probabilityAltCalibrated", EmitDefaultValue=false)]
        public double? ProbabilityAltCalibrated { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FirstLastNameUSRaceEthnicityOut {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  FirstName: ").Append(FirstName).Append("\n");
            sb.Append("  LastName: ").Append(LastName).Append("\n");
            sb.Append("  RaceEthnicityAlt: ").Append(RaceEthnicityAlt).Append("\n");
            sb.Append("  RaceEthnicity: ").Append(RaceEthnicity).Append("\n");
            sb.Append("  Score: ").Append(Score).Append("\n");
            sb.Append("  RaceEthnicitiesTop: ").Append(RaceEthnicitiesTop).Append("\n");
            sb.Append("  ProbabilityCalibrated: ").Append(ProbabilityCalibrated).Append("\n");
            sb.Append("  ProbabilityAltCalibrated: ").Append(ProbabilityAltCalibrated).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FirstLastNameUSRaceEthnicityOut);
        }

        /// <summary>
        /// Returns true if FirstLastNameUSRaceEthnicityOut instances are equal
        /// </summary>
        /// <param name="input">Instance of FirstLastNameUSRaceEthnicityOut to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FirstLastNameUSRaceEthnicityOut input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.FirstName == input.FirstName ||
                    (this.FirstName != null &&
                    this.FirstName.Equals(input.FirstName))
                ) && 
                (
                    this.LastName == input.LastName ||
                    (this.LastName != null &&
                    this.LastName.Equals(input.LastName))
                ) && 
                (
                    this.RaceEthnicityAlt == input.RaceEthnicityAlt ||
                    (this.RaceEthnicityAlt != null &&
                    this.RaceEthnicityAlt.Equals(input.RaceEthnicityAlt))
                ) && 
                (
                    this.RaceEthnicity == input.RaceEthnicity ||
                    (this.RaceEthnicity != null &&
                    this.RaceEthnicity.Equals(input.RaceEthnicity))
                ) && 
                (
                    this.Score == input.Score ||
                    (this.Score != null &&
                    this.Score.Equals(input.Score))
                ) && 
                (
                    this.RaceEthnicitiesTop == input.RaceEthnicitiesTop ||
                    this.RaceEthnicitiesTop != null &&
                    this.RaceEthnicitiesTop.SequenceEqual(input.RaceEthnicitiesTop)
                ) && 
                (
                    this.ProbabilityCalibrated == input.ProbabilityCalibrated ||
                    (this.ProbabilityCalibrated != null &&
                    this.ProbabilityCalibrated.Equals(input.ProbabilityCalibrated))
                ) && 
                (
                    this.ProbabilityAltCalibrated == input.ProbabilityAltCalibrated ||
                    (this.ProbabilityAltCalibrated != null &&
                    this.ProbabilityAltCalibrated.Equals(input.ProbabilityAltCalibrated))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.FirstName != null)
                    hashCode = hashCode * 59 + this.FirstName.GetHashCode();
                if (this.LastName != null)
                    hashCode = hashCode * 59 + this.LastName.GetHashCode();
                if (this.RaceEthnicityAlt != null)
                    hashCode = hashCode * 59 + this.RaceEthnicityAlt.GetHashCode();
                if (this.RaceEthnicity != null)
                    hashCode = hashCode * 59 + this.RaceEthnicity.GetHashCode();
                if (this.Score != null)
                    hashCode = hashCode * 59 + this.Score.GetHashCode();
                if (this.RaceEthnicitiesTop != null)
                    hashCode = hashCode * 59 + this.RaceEthnicitiesTop.GetHashCode();
                if (this.ProbabilityCalibrated != null)
                    hashCode = hashCode * 59 + this.ProbabilityCalibrated.GetHashCode();
                if (this.ProbabilityAltCalibrated != null)
                    hashCode = hashCode * 59 + this.ProbabilityAltCalibrated.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
