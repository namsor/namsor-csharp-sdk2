/* 
 * NamSor API v2
 *
 * NamSor API v2 : enpoints to process personal names (gender, cultural origin or ethnicity) in all alphabets or languages. Use GET methods for small tests, but prefer POST methods for higher throughput (batch processing of up to 100 names at a time). Need something you can't find here? We have many more features coming soon. Let us know, we'll do our best to add it! 
 *
 * OpenAPI spec version: 2.0.9
 * Contact: contact@namsor.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.com.namsor.sdk2.model
{
    /// <summary>
    /// Represents the output of inferring the LIKELY country and phone code from a personal name and phone number.
    /// </summary>
    [DataContract]
    public partial class FirstLastNamePhoneCodedOut :  IEquatable<FirstLastNamePhoneCodedOut>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FirstLastNamePhoneCodedOut" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="firstName">firstName.</param>
        /// <param name="lastName">lastName.</param>
        /// <param name="internationalPhoneNumberVerified">internationalPhoneNumberVerified.</param>
        /// <param name="phoneCountryIso2Verified">phoneCountryIso2Verified.</param>
        /// <param name="phoneCountryCode">phoneCountryCode.</param>
        /// <param name="phoneCountryCodeAlt">phoneCountryCodeAlt.</param>
        /// <param name="phoneCountryIso2">phoneCountryIso2.</param>
        /// <param name="phoneCountryIso2Alt">phoneCountryIso2Alt.</param>
        /// <param name="originCountryIso2">originCountryIso2.</param>
        /// <param name="originCountryIso2Alt">originCountryIso2Alt.</param>
        /// <param name="phoneNumber">phoneNumber.</param>
        /// <param name="verified">verified.</param>
        /// <param name="score">score.</param>
        /// <param name="countryIso2">countryIso2.</param>
        public FirstLastNamePhoneCodedOut(string id = default(string), string firstName = default(string), string lastName = default(string), string internationalPhoneNumberVerified = default(string), string phoneCountryIso2Verified = default(string), int? phoneCountryCode = default(int?), int? phoneCountryCodeAlt = default(int?), string phoneCountryIso2 = default(string), string phoneCountryIso2Alt = default(string), string originCountryIso2 = default(string), string originCountryIso2Alt = default(string), string phoneNumber = default(string), bool? verified = default(bool?), double? score = default(double?), string countryIso2 = default(string))
        {
            this.Id = id;
            this.FirstName = firstName;
            this.LastName = lastName;
            this.InternationalPhoneNumberVerified = internationalPhoneNumberVerified;
            this.PhoneCountryIso2Verified = phoneCountryIso2Verified;
            this.PhoneCountryCode = phoneCountryCode;
            this.PhoneCountryCodeAlt = phoneCountryCodeAlt;
            this.PhoneCountryIso2 = phoneCountryIso2;
            this.PhoneCountryIso2Alt = phoneCountryIso2Alt;
            this.OriginCountryIso2 = originCountryIso2;
            this.OriginCountryIso2Alt = originCountryIso2Alt;
            this.PhoneNumber = phoneNumber;
            this.Verified = verified;
            this.Score = score;
            this.CountryIso2 = countryIso2;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets FirstName
        /// </summary>
        [DataMember(Name="firstName", EmitDefaultValue=false)]
        public string FirstName { get; set; }

        /// <summary>
        /// Gets or Sets LastName
        /// </summary>
        [DataMember(Name="lastName", EmitDefaultValue=false)]
        public string LastName { get; set; }

        /// <summary>
        /// Gets or Sets InternationalPhoneNumberVerified
        /// </summary>
        [DataMember(Name="internationalPhoneNumberVerified", EmitDefaultValue=false)]
        public string InternationalPhoneNumberVerified { get; set; }

        /// <summary>
        /// Gets or Sets PhoneCountryIso2Verified
        /// </summary>
        [DataMember(Name="phoneCountryIso2Verified", EmitDefaultValue=false)]
        public string PhoneCountryIso2Verified { get; set; }

        /// <summary>
        /// Gets or Sets PhoneCountryCode
        /// </summary>
        [DataMember(Name="phoneCountryCode", EmitDefaultValue=false)]
        public int? PhoneCountryCode { get; set; }

        /// <summary>
        /// Gets or Sets PhoneCountryCodeAlt
        /// </summary>
        [DataMember(Name="phoneCountryCodeAlt", EmitDefaultValue=false)]
        public int? PhoneCountryCodeAlt { get; set; }

        /// <summary>
        /// Gets or Sets PhoneCountryIso2
        /// </summary>
        [DataMember(Name="phoneCountryIso2", EmitDefaultValue=false)]
        public string PhoneCountryIso2 { get; set; }

        /// <summary>
        /// Gets or Sets PhoneCountryIso2Alt
        /// </summary>
        [DataMember(Name="phoneCountryIso2Alt", EmitDefaultValue=false)]
        public string PhoneCountryIso2Alt { get; set; }

        /// <summary>
        /// Gets or Sets OriginCountryIso2
        /// </summary>
        [DataMember(Name="originCountryIso2", EmitDefaultValue=false)]
        public string OriginCountryIso2 { get; set; }

        /// <summary>
        /// Gets or Sets OriginCountryIso2Alt
        /// </summary>
        [DataMember(Name="originCountryIso2Alt", EmitDefaultValue=false)]
        public string OriginCountryIso2Alt { get; set; }

        /// <summary>
        /// Gets or Sets PhoneNumber
        /// </summary>
        [DataMember(Name="phoneNumber", EmitDefaultValue=false)]
        public string PhoneNumber { get; set; }

        /// <summary>
        /// Gets or Sets Verified
        /// </summary>
        [DataMember(Name="verified", EmitDefaultValue=false)]
        public bool? Verified { get; set; }

        /// <summary>
        /// Gets or Sets Score
        /// </summary>
        [DataMember(Name="score", EmitDefaultValue=false)]
        public double? Score { get; set; }

        /// <summary>
        /// Gets or Sets CountryIso2
        /// </summary>
        [DataMember(Name="countryIso2", EmitDefaultValue=false)]
        public string CountryIso2 { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FirstLastNamePhoneCodedOut {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  FirstName: ").Append(FirstName).Append("\n");
            sb.Append("  LastName: ").Append(LastName).Append("\n");
            sb.Append("  InternationalPhoneNumberVerified: ").Append(InternationalPhoneNumberVerified).Append("\n");
            sb.Append("  PhoneCountryIso2Verified: ").Append(PhoneCountryIso2Verified).Append("\n");
            sb.Append("  PhoneCountryCode: ").Append(PhoneCountryCode).Append("\n");
            sb.Append("  PhoneCountryCodeAlt: ").Append(PhoneCountryCodeAlt).Append("\n");
            sb.Append("  PhoneCountryIso2: ").Append(PhoneCountryIso2).Append("\n");
            sb.Append("  PhoneCountryIso2Alt: ").Append(PhoneCountryIso2Alt).Append("\n");
            sb.Append("  OriginCountryIso2: ").Append(OriginCountryIso2).Append("\n");
            sb.Append("  OriginCountryIso2Alt: ").Append(OriginCountryIso2Alt).Append("\n");
            sb.Append("  PhoneNumber: ").Append(PhoneNumber).Append("\n");
            sb.Append("  Verified: ").Append(Verified).Append("\n");
            sb.Append("  Score: ").Append(Score).Append("\n");
            sb.Append("  CountryIso2: ").Append(CountryIso2).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FirstLastNamePhoneCodedOut);
        }

        /// <summary>
        /// Returns true if FirstLastNamePhoneCodedOut instances are equal
        /// </summary>
        /// <param name="input">Instance of FirstLastNamePhoneCodedOut to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FirstLastNamePhoneCodedOut input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.FirstName == input.FirstName ||
                    (this.FirstName != null &&
                    this.FirstName.Equals(input.FirstName))
                ) && 
                (
                    this.LastName == input.LastName ||
                    (this.LastName != null &&
                    this.LastName.Equals(input.LastName))
                ) && 
                (
                    this.InternationalPhoneNumberVerified == input.InternationalPhoneNumberVerified ||
                    (this.InternationalPhoneNumberVerified != null &&
                    this.InternationalPhoneNumberVerified.Equals(input.InternationalPhoneNumberVerified))
                ) && 
                (
                    this.PhoneCountryIso2Verified == input.PhoneCountryIso2Verified ||
                    (this.PhoneCountryIso2Verified != null &&
                    this.PhoneCountryIso2Verified.Equals(input.PhoneCountryIso2Verified))
                ) && 
                (
                    this.PhoneCountryCode == input.PhoneCountryCode ||
                    (this.PhoneCountryCode != null &&
                    this.PhoneCountryCode.Equals(input.PhoneCountryCode))
                ) && 
                (
                    this.PhoneCountryCodeAlt == input.PhoneCountryCodeAlt ||
                    (this.PhoneCountryCodeAlt != null &&
                    this.PhoneCountryCodeAlt.Equals(input.PhoneCountryCodeAlt))
                ) && 
                (
                    this.PhoneCountryIso2 == input.PhoneCountryIso2 ||
                    (this.PhoneCountryIso2 != null &&
                    this.PhoneCountryIso2.Equals(input.PhoneCountryIso2))
                ) && 
                (
                    this.PhoneCountryIso2Alt == input.PhoneCountryIso2Alt ||
                    (this.PhoneCountryIso2Alt != null &&
                    this.PhoneCountryIso2Alt.Equals(input.PhoneCountryIso2Alt))
                ) && 
                (
                    this.OriginCountryIso2 == input.OriginCountryIso2 ||
                    (this.OriginCountryIso2 != null &&
                    this.OriginCountryIso2.Equals(input.OriginCountryIso2))
                ) && 
                (
                    this.OriginCountryIso2Alt == input.OriginCountryIso2Alt ||
                    (this.OriginCountryIso2Alt != null &&
                    this.OriginCountryIso2Alt.Equals(input.OriginCountryIso2Alt))
                ) && 
                (
                    this.PhoneNumber == input.PhoneNumber ||
                    (this.PhoneNumber != null &&
                    this.PhoneNumber.Equals(input.PhoneNumber))
                ) && 
                (
                    this.Verified == input.Verified ||
                    (this.Verified != null &&
                    this.Verified.Equals(input.Verified))
                ) && 
                (
                    this.Score == input.Score ||
                    (this.Score != null &&
                    this.Score.Equals(input.Score))
                ) && 
                (
                    this.CountryIso2 == input.CountryIso2 ||
                    (this.CountryIso2 != null &&
                    this.CountryIso2.Equals(input.CountryIso2))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.FirstName != null)
                    hashCode = hashCode * 59 + this.FirstName.GetHashCode();
                if (this.LastName != null)
                    hashCode = hashCode * 59 + this.LastName.GetHashCode();
                if (this.InternationalPhoneNumberVerified != null)
                    hashCode = hashCode * 59 + this.InternationalPhoneNumberVerified.GetHashCode();
                if (this.PhoneCountryIso2Verified != null)
                    hashCode = hashCode * 59 + this.PhoneCountryIso2Verified.GetHashCode();
                if (this.PhoneCountryCode != null)
                    hashCode = hashCode * 59 + this.PhoneCountryCode.GetHashCode();
                if (this.PhoneCountryCodeAlt != null)
                    hashCode = hashCode * 59 + this.PhoneCountryCodeAlt.GetHashCode();
                if (this.PhoneCountryIso2 != null)
                    hashCode = hashCode * 59 + this.PhoneCountryIso2.GetHashCode();
                if (this.PhoneCountryIso2Alt != null)
                    hashCode = hashCode * 59 + this.PhoneCountryIso2Alt.GetHashCode();
                if (this.OriginCountryIso2 != null)
                    hashCode = hashCode * 59 + this.OriginCountryIso2.GetHashCode();
                if (this.OriginCountryIso2Alt != null)
                    hashCode = hashCode * 59 + this.OriginCountryIso2Alt.GetHashCode();
                if (this.PhoneNumber != null)
                    hashCode = hashCode * 59 + this.PhoneNumber.GetHashCode();
                if (this.Verified != null)
                    hashCode = hashCode * 59 + this.Verified.GetHashCode();
                if (this.Score != null)
                    hashCode = hashCode * 59 + this.Score.GetHashCode();
                if (this.CountryIso2 != null)
                    hashCode = hashCode * 59 + this.CountryIso2.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
